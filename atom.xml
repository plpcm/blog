<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曹淼的“git博客”</title>
  <subtitle>道法自然</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://plpcm.github.io/blog/"/>
  <updated>2017-01-05T03:55:54.000Z</updated>
  <id>https://plpcm.github.io/blog/</id>
  
  <author>
    <name>曹淼</name>
    <email>plp.cm@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>salt 命令使用入门</title>
    <link href="https://plpcm.github.io/blog/2017/01/02/salt-command/"/>
    <id>https://plpcm.github.io/blog/2017/01/02/salt-command/</id>
    <published>2017-01-02T02:30:16.000Z</published>
    <updated>2017-01-05T03:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查找目标minion的三种方式"><a href="#查找目标minion的三种方式" class="headerlink" title="查找目标minion的三种方式"></a>查找目标minion的三种方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">salt <span class="string">'shell正则'</span> <span class="built_in">command</span></div><div class="line">salt -E <span class="string">'prel 正则'</span> commang</div><div class="line">salt -N <span class="variable">$group</span> <span class="built_in">command</span></div><div class="line">salt -L <span class="string">'server1,server2'</span> <span class="built_in">command</span></div></pre></td></tr></table></figure>
<p>1、根据bash glob来查找：salt ‘*foo.com’ sys.doc</p>
<p>2、根据正则表达式来查找：salt -E ‘.*’ cmd.run ‘ls -l | grep foo’</p>
<p>3、根据hostname来查找：salt -L foo.bar.baz,quo.qux cmd.run ‘ps aux | grep<br>foo’</p>
<p>4、根据grains（机器各种信息）来查找：salt -G ‘os:Redhat’ test.ping</p>
<p>5、综合以上几种模式混合查找：salt -C ‘G@os:Debian and webser<em> or E@db.</em>‘ test.ping</p>
<h3 id="常见grains信息如下："><a href="#常见grains信息如下：" class="headerlink" title="常见grains信息如下："></a>常见grains信息如下：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">salt <span class="string">'*'</span> grains.ls  查看grains分类</div><div class="line">salt <span class="string">'*'</span> grains.items 查看grains所有信息</div><div class="line">salt <span class="string">'*'</span> grains.item osrelease 查看grains某个信息</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      查找minion并执行命令样例
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="saltstack" scheme="https://plpcm.github.io/blog/tags/saltstack/"/>
    
  </entry>
  
  <entry>
    <title>supervisor安装与使用</title>
    <link href="https://plpcm.github.io/blog/2016/12/12/supervisor-manual/"/>
    <id>https://plpcm.github.io/blog/2016/12/12/supervisor-manual/</id>
    <published>2016-12-12T02:30:16.000Z</published>
    <updated>2016-12-13T08:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Supervisor</code>是用 <code>Python</code> 开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。</p>
<p>一、安装<br>首先必须先安装好 <code>python</code> 环境，Linux 已经自带 <code>python</code>，建议安装 <code>python2.7.5</code>. 先在终端输入 <code>python</code> 查看<code>python</code> 版本，能正常显示则表明没问题，输入 <code>exit()</code> 退出 <code>python</code> 环境。<br>Centos下用 <code>easy_instal</code> l安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install supervisor</div></pre></td></tr></table></figure>
<p>Debian / Ubuntu可以直接通过 apt 安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install supervisor</div></pre></td></tr></table></figure>
<p>安装成功后显示 finished ,我们再次进行 python 环境，输入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> supervisor</div></pre></td></tr></table></figure>
<p>如果没提示错误则表示安装成功。<br>安装之后，会有两个可执行文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/bin/supervisord             --  supervisor服务守护进程</div><div class="line">/usr/bin/supervisorctl           --  supervisor控制台进程</div></pre></td></tr></table></figure>
<p>Supervisor 有两个可执行程序 – <code>supervisord</code> 和 <code>supervisorctl</code>:</p>
<ul>
<li><p><code>Supervisord</code> 是后台管理服务器, 用来依据配置文件的策略管理后台守护进程, 它会随系统自动启动<code>Supervisorctl</code> 用于管理员向后台管理程序发送 启动/重启/停止 等指令;<br>  它们之间的关系就相当于 Apache 的 <code>httpd</code> 和 <code>apachectl</code>.</p>
<p>   生成默认配置文件</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure>
<p>ubuntu下需要使用如下命令创建配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo su - root -c <span class="string">"echo_supervisord_conf &gt; /etc/supervisord.conf"</span></div></pre></td></tr></table></figure>
<p>在<code>/etc/supervisor</code> 目录中存放着 supervisor 的配置文件：其中 <code>conf.d</code> 是一个子目录，其中存放着supervisor监管的进程的配置信息，一个进程有一个对应的配置文件；<code>supervisord.conf</code> 是<code>supervisor</code> 的主配置文件，定义服务名称以及接口等等。</p>
<p>二、配置<br>主配置文件 的路径位于 <code>/etc/supervisor/supervisord.conf</code>, 主配置文件中的末尾两行文本:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[include]</div><div class="line">files = /etc/supervisor/conf.d/*.conf</div></pre></td></tr></table></figure>
<p>指明了 Supervisor 会去 <code>/etc/supervisor/conf.d/</code> 目录下查找以 <code>.conf</code>结尾的子配置文件, 也就是说, 我们只需在 <code>/etc/supervisor/conf.d/</code> 目录下为每个后台守护应用新建一个配置文件即可。<br>现在要用 supervisor监控一个脚本进程，在<code>/etc/supervisor/conf.d</code> 中新建一个关于这个脚本进程的配置文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/supervisor/conf.d</div><div class="line">vim script.conf</div></pre></td></tr></table></figure>
<p>其中输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[program:script.py] <span class="comment">#程序的名字，在supervisor中可以用这个名字来管理该程序</span></div><div class="line"><span class="built_in">command</span>=/home/hadoop/script1.1.py <span class="comment">#启动程序的命令</span></div><div class="line">autorstart=<span class="literal">true</span> <span class="comment">#是否随supervisor启动而启动</span></div><div class="line">directory=/home/hadoop <span class="comment">#执行命令前先cd到此目录</span></div><div class="line">autorestart=<span class="literal">true</span> <span class="comment">#程序停止之后是否需要重新将其启动</span></div><div class="line">startsecs=10 <span class="comment">#重新启动等待时间</span></div><div class="line">startretries=36 <span class="comment">#重启程序尝试次数</span></div><div class="line">redirect_stderr=<span class="literal">true</span> <span class="comment">#是否将程序错误信息重定向到文件</span></div><div class="line">stdout_logfile=/home/supervisor_log/log.txt <span class="comment">#将程序输出重定向到该文件</span></div><div class="line">stderr_logfile=/home/supervisor_log/err.txt <span class="comment">#将程序错误重定向到该文件</span></div></pre></td></tr></table></figure>
<p>保存文件，便完成配置。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">program其它配置项:</div><div class="line">process_name=%(program_name)s     进程名称</div><div class="line">priority=999                      进程启动优先级(数值越小优先级越高,即先启动、后关闭)</div><div class="line">exitcodes=0,2                   进程结束代码(默认值0,2)</div><div class="line">stopsignal=QUIT              停止进程时发送的信号</div><div class="line">stopwaitsecs=10              结束等待时间，否则使用SIGKILL结束</div><div class="line">user=root                         运行程序的用户</div><div class="line">stdout_logfile_maxbytes=50MB      日志文件最大值，否则循环写入，默认50MB</div><div class="line">stdout_logfile_backups=10             标准输出日志备份数目</div><div class="line">environment=A=<span class="string">"1"</span>,B=<span class="string">"2"</span>               进程附加环境变量</div><div class="line"></div><div class="line">group配置项:</div><div class="line">programs=A,B,C                                   进程名称,与program进程名称对应，多个逗号分隔</div><div class="line">priority=1                                             优先级</div></pre></td></tr></table></figure>
<p>三、生效<br>每次修改主配置文件或增改子配置文件都需要执行 supervisorctl update 使新配置生效。或者用supervisorctl reload 重新重新启动 supervisor 程序。<br>每次 修改主配置文件 或 增改子配置文件 都需要执行 supervisorctl update 使新配置生效:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">supervisorctl update</div></pre></td></tr></table></figure>
<p>控制命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">supervisorctl status</div><div class="line">supervisorctl start all</div><div class="line">supervisorctl stop all</div><div class="line">supervisorctl restart all         <span class="comment">#定向控制指定进程</span></div><div class="line">supervisorctl stop iot-kb</div><div class="line">supervisorctl start iot-kb</div><div class="line">supervisorctl restart iot-kb   <span class="comment">#加载和更新</span></div><div class="line">supervisorctl reload</div><div class="line">supervisorctl update</div></pre></td></tr></table></figure></p>
<p>四、管理<br>修改主配置文件，开启基于http的UI控制台:<br>添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[inet_http_server]</div><div class="line">port = 172.16.22.39:9001</div><div class="line">username = admin</div><div class="line">password = 123456</div></pre></td></tr></table></figure>
<p>这样，在浏览器中输入配置中写的地址和端口号，输入配置好的用户名和密码，便可以看到基于网页的控制台界面。从中，可以察看 Supervisor 监控的信息，可以察看进程的日志等。</p>
<p>附配置文件一例:</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">[unix_http_server]</div><div class="line">file = /var/run/supervisor.sock</div><div class="line">chmod = 0777</div><div class="line">chown= root:felinx</div><div class="line"> </div><div class="line">[inet_http_server]</div><div class="line"><span class="comment"># Web管理界面设定</span></div><div class="line">port=9001</div><div class="line">username = admin</div><div class="line">password = yourpassword</div><div class="line"> </div><div class="line">[supervisorctl]</div><div class="line">; 必须和<span class="string">'unix_http_server'</span>里面的设定匹配</div><div class="line">serverurl = unix:///var/run/supervisord.sock</div><div class="line"> </div><div class="line">[supervisord]</div><div class="line">logfile=/var/<span class="built_in">log</span>/supervisord/supervisord.log ; (main <span class="built_in">log</span> file;default <span class="variable">$CWD</span>/supervisord.log)</div><div class="line">logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)</div><div class="line">logfile_backups=10          ; (num of main logfile rotation backups;default 10)</div><div class="line">loglevel=info               ; (<span class="built_in">log</span> level;default info; others: debug,warn,trace)</div><div class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</div><div class="line">nodaemon=<span class="literal">true</span>              ; (start <span class="keyword">in</span> foreground <span class="keyword">if</span> <span class="literal">true</span>;default <span class="literal">false</span>)</div><div class="line">minfds=1024                 ; (min. avail startup file descriptors;default 1024)</div><div class="line">minprocs=200                ; (min. avail process descriptors;default 200)</div><div class="line">user=root                 ; (default is current user, required <span class="keyword">if</span> root)</div><div class="line">childlogdir=/var/<span class="built_in">log</span>/supervisord/            ; (<span class="string">'AUTO'</span> child <span class="built_in">log</span> dir, default <span class="variable">$TEMP</span>)</div><div class="line"> </div><div class="line">[rpcinterface:supervisor]</div><div class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class="line"> </div><div class="line">; 管理的单个进程的配置，可以添加多个program</div><div class="line">[program:chatdemon]</div><div class="line"><span class="built_in">command</span>=python /home/felinx/demos/chat/chatdemo.py</div><div class="line">autostart = <span class="literal">true</span></div><div class="line">startsecs = 5</div><div class="line">user = felinx</div><div class="line">redirect_stderr = <span class="literal">true</span></div><div class="line">；这对这个program的<span class="built_in">log</span>的配置，上面的logfile_maxbytes是supervisord本身的<span class="built_in">log</span>配置</div><div class="line">stdout_logfile_maxbytes = 20MB</div><div class="line">stdoiut_logfile_backups = 20</div><div class="line">stdout_logfile = /var/<span class="built_in">log</span>/supervisord/chatdemo.log</div><div class="line"> </div><div class="line">; 配置一组进程，对于类似的program可以通过这种方式添加，避免手工一个个添加</div><div class="line">[program:groupworker]</div><div class="line"><span class="built_in">command</span>=python /home/felinx/demos/groupworker/worker.py</div><div class="line">numprocs=24</div><div class="line">process_name=%(program_name)s_%(process_num)02d</div><div class="line">autostart = <span class="literal">true</span></div><div class="line">startsecs = 5</div><div class="line">user = felinx</div><div class="line">redirect_stderr = <span class="literal">true</span></div><div class="line">stdout_logfile = /var/<span class="built_in">log</span>/supervisord/groupworker.log</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Supervisor是用 Python 开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。
    
    </summary>
    
      <category term="supervisor" scheme="https://plpcm.github.io/blog/categories/supervisor/"/>
    
    
      <category term="supervisor" scheme="https://plpcm.github.io/blog/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>收藏链接</title>
    <link href="https://plpcm.github.io/blog/2016/12/05/hotlink/"/>
    <id>https://plpcm.github.io/blog/2016/12/05/hotlink/</id>
    <published>2016-12-05T09:06:40.000Z</published>
    <updated>2016-12-05T09:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Markdown-语法说明-简体中文版"><a href="#Markdown-语法说明-简体中文版" class="headerlink" title="Markdown 语法说明 (简体中文版)"></a>Markdown 语法说明 (简体中文版)</h4><p><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></p>
<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h4 id="zc-buildout-类似virtualenv-使用buildout管理项目"><a href="#zc-buildout-类似virtualenv-使用buildout管理项目" class="headerlink" title="zc.buildout 类似virtualenv 使用buildout管理项目"></a>zc.buildout 类似virtualenv 使用buildout管理项目</h4><p><a href="http://www.infoq.com/cn/presentations/manage-projects-using-buildout?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row2&amp;from=the5fire" target="_blank" rel="external">http://www.infoq.com/cn/presentations/manage-projects-using-buildout?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row2&amp;from=the5fire</a></p>
<a id="more"></a>
<h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><h4 id="powerline-fonts"><a href="#powerline-fonts" class="headerlink" title="powerline fonts"></a>powerline fonts</h4><p><a href="https://github.com/powerline/fonts" target="_blank" rel="external">https://github.com/powerline/fonts</a></p>
<h4 id="一种zsh主题-powerline-shell"><a href="#一种zsh主题-powerline-shell" class="headerlink" title="一种zsh主题 powerline-shell"></a>一种zsh主题 powerline-shell</h4><p><a href="https://github.com/banga/powerline-shell" target="_blank" rel="external">https://github.com/banga/powerline-shell</a></p>
<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h4 id="hexo主题next使用帮助"><a href="#hexo主题next使用帮助" class="headerlink" title="hexo主题next使用帮助"></a>hexo主题next使用帮助</h4><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<h4 id="很不错的hexo介绍文章"><a href="#很不错的hexo介绍文章" class="headerlink" title="很不错的hexo介绍文章"></a>很不错的hexo介绍文章</h4><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a></p>
<h4 id="hexo原作者-Hexo-颯爽登場！"><a href="#hexo原作者-Hexo-颯爽登場！" class="headerlink" title="hexo原作者-Hexo 颯爽登場！"></a>hexo原作者-Hexo 颯爽登場！</h4><p><a href="https://zespia.tw/blog/2012/10/11/hexo-debut/" target="_blank" rel="external">https://zespia.tw/blog/2012/10/11/hexo-debut/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Markdown-语法说明-简体中文版&quot;&gt;&lt;a href=&quot;#Markdown-语法说明-简体中文版&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法说明 (简体中文版)&quot;&gt;&lt;/a&gt;Markdown 语法说明 (简体中文版)&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;http://wowubuntu.com/markdown/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; title=&quot;python&quot;&gt;&lt;/a&gt;python&lt;/h3&gt;&lt;h4 id=&quot;zc-buildout-类似virtualenv-使用buildout管理项目&quot;&gt;&lt;a href=&quot;#zc-buildout-类似virtualenv-使用buildout管理项目&quot; class=&quot;headerlink&quot; title=&quot;zc.buildout 类似virtualenv 使用buildout管理项目&quot;&gt;&lt;/a&gt;zc.buildout 类似virtualenv 使用buildout管理项目&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/presentations/manage-projects-using-buildout?utm_source=infoq&amp;amp;utm_medium=videos_homepage&amp;amp;utm_campaign=videos_row2&amp;amp;from=the5fire&quot;&gt;http://www.infoq.com/cn/presentations/manage-projects-using-buildout?utm_source=infoq&amp;amp;utm_medium=videos_homepage&amp;amp;utm_campaign=videos_row2&amp;amp;from=the5fire&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Collection" scheme="https://plpcm.github.io/blog/categories/Collection/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈CLOSE_WAIT</title>
    <link href="https://plpcm.github.io/blog/2016/12/02/tcp_CLOSE_WAIT/"/>
    <id>https://plpcm.github.io/blog/2016/12/02/tcp_CLOSE_WAIT/</id>
    <published>2016-12-02T02:30:16.000Z</published>
    <updated>2017-01-05T07:41:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>发表于<a href="http://huoding.com/2016/01/19/488" target="_blank" rel="external">2016-01-19</a></p>
<p>TCP 有很多连接状态，每一个都够聊十块钱儿的，比如我们以前讨论过 <a href="http://huoding.com/2013/12/31/316" target="_blank" rel="external">TIME_WAIT</a> 和 <a href="http://huoding.com/2014/11/06/383" target="_blank" rel="external">FIN_WAIT1</a>，最近时不时听人提起 CLOSE_WAIT，感觉有必要梳理一下。</p>
<p>所谓 CLOSE_WAIT，借用某位大牛的话来说应该倒过来叫做 WAIT_CLOSE，也就是说「等待关闭」，如果你还不理解其含义，可以看看 TCP 关闭连接时的图例：</p>
<p><a href="http://huoding.com/2013/12/31/316/tcp_close" target="_blank" rel="external"><img src="http://huoding.com/wp-content/uploads/2013/12/tcp_close.png" alt="TCP Close"></a>TCP Close</p>
<p>不要被图中的 client 和 server 所迷惑，你只要记住：主动关闭的一方发出 FIN 包，被动关闭的一方响应 ACK 包，此时，被动关闭的一方就进入了 CLOSE_WAIT 状态。如果一切正常，稍后被动关闭的一方也会发出 FIN 包，然后迁移到 LAST_ACK 状态。</p>
<p>通常，CLOSE_WAIT 状态在服务器停留时间很短，如果你发现大量的 CLOSE_WAIT 状态，那么就意味着被动关闭的一方没有及时发出 FIN 包，一般有如下几种可能：</p>
<ul>
<li>程序问题：如果代码层面忘记了 close 相应的 socket 连接，那么自然不会发出 FIN 包，从而导致 CLOSE_WAIT 累积；或者代码不严谨，出现死循环之类的问题，导致即便后面写了 close 也永远执行不到。</li>
<li>响应太慢或者超时设置过小：如果连接双方不和谐，一方不耐烦直接 timeout，另一方却还在忙于耗时逻辑，就会导致 close 被延后。响应太慢是首要问题，不过换个角度看，也可能是 timeout 设置过小。</li>
<li>BACKLOG 太大：此处的 backlog 不是 syn backlog，而是 accept 的 backlog，如果 backlog 太大的话，设想突然遭遇大访问量的话，即便响应速度不慢，也可能出现来不及消费的情况，导致多余的请求还在<a href="http://jaseywang.me/2014/07/20/tcp-queue-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/" target="_blank" rel="external">队列</a>里就被对方关闭了。</li>
</ul>
<p>如果你通过「netstat -ant」或者「ss -ant」命令发现了很多 CLOSE_WAIT 连接，请注意结果中的「Recv-Q」和「Local Address」字段，通常「Recv-Q」会不为空，它表示应用还没来得及接收数据，而「Local Address」表示哪个地址和端口有问题，我们可以通过「lsof -i:<port>」来确认端口对应运行的是什么程序以及它的进程号是多少。</port></p>
<p>如果是我们自己写的一些程序，比如用 HttpClient 自定义的蜘蛛，那么八九不离十是程序问题，如果是一些使用广泛的程序，比如 Tomcat 之类的，那么更可能是响应速度太慢或者 timeout 设置太小或者 BACKLOG 设置过大导致的故障。</p>
<p>此外还有一点需要说明：按照前面图例所示，当被动关闭的一方处于 CLOSE_WAIT 状态时，主动关闭的一方处于 FIN_WAIT2 状态。 那么为什么我们总听说 CLOSE_WAIT 状态过多的故障，但是却相对少听说 FIN_WAIT2 状态过多的故障呢？这是因为 Linux 有一个「tcp_fin_timeout」设置，控制了 FIN_WAIT2 的最大生命周期。坏消息是 CLOSE_WAIT 没有类似的设置，如果不重启进程，那么 CLOSE_WAIT 状态很可能会永远持续下去；好消息是如果 socket 开启了 <a href="http://www.tldp.org/HOWTO/html_single/TCP-Keepalive-HOWTO/" target="_blank" rel="external">keepalive</a> 机制，那么可以通过相应的设置来清理无效连接，不过 keepalive 是治标不治本的方法，还是应该找到问题的症结才对。</p>
<p>本来想多写点的，但是着急回家，就写到这吧，推荐两个案例：</p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzUwNDA5MA==&amp;mid=200667929&amp;idx=1&amp;sn=67cada895ac100115fded319b6b23a21&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd" target="_blank" rel="external">PHP升级导致系统负载过高问题分析</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI4MjA4ODU0Ng==&amp;mid=402163560&amp;idx=1&amp;sn=5269044286ce1d142cca1b5fed3efab1&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd" target="_blank" rel="external">又见CLOSE_WAIT</a></li>
</ul>
<p>写得都比我好，建议大家仔细阅读。</p>
]]></content>
    
    <summary type="html">
    
      tcp CLOSE_WAIT 过多的分析
    
    </summary>
    
      <category term="tcp" scheme="https://plpcm.github.io/blog/categories/tcp/"/>
    
    
      <category term="tcp" scheme="https://plpcm.github.io/blog/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>PYTHON FABRIC实现远程操作和部署</title>
    <link href="https://plpcm.github.io/blog/2016/12/02/fabric/"/>
    <id>https://plpcm.github.io/blog/2016/12/02/fabric/</id>
    <published>2016-12-02T02:30:16.000Z</published>
    <updated>2017-01-05T03:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#">Python fabric实现远程操作和部署</a></li>
<li><a href="#fabric">fabric</a></li>
<li><a href="#_1">作用</a></li>
<li><a href="#_2">环境配置</a></li>
<li><a href="#hello-world">hello world</a></li>
<li><a href="#_3">执行本机操作</a></li>
<li><a href="#_4">混搭整合远端操作</a></li>
<li><a href="#_5">多服务器混搭</a></li>
<li><a href="#_6">扩展</a></li>
</ul>
<h2 id="fabric"><a href="#fabric" class="headerlink" title="fabric"></a>fabric</h2><p>官方文档 <a href="http://fabric.readthedocs.org/" target="_blank" rel="external">入口</a></p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>很强大的工具</p>
<p>可以将自动化部署或者多机操作的命令固化到一个脚本里</p>
<p>和某些运维工具很像，用它主要是因为，python…..</p>
<p>简单好用易上手</p>
<p>当然，shell各种命令组合起来也可以，上古神器和现代兵器的区别</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>在本机和目标机器安装对应包（注意，都要有）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo easy_install fabric</div></pre></td></tr></table></figure>
<p>目前是1.8版本</p>
<p>安装完后，可以查看是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ken@~$] which fab</div><div class="line">/usr/local/bin/fab</div></pre></td></tr></table></figure>
<p>装完之后，可以浏览下<a href="http://docs.fabfile.org/en/1.8/" target="_blank" rel="external">官方文档</a></p>
<p>然后，可以动手了</p>
<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>先进行本机简单操作，有一个初步认识，例子来源与官网</p>
<p>新建一个py脚本: fabfile.py</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def hello():</div><div class="line">    print(&quot;Hello world!&quot;)</div></pre></td></tr></table></figure>
<p>命令行执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[ken@~/tmp/fab$] fab hello</div><div class="line">Hello world!</div><div class="line"></div><div class="line">Done.</div></pre></td></tr></table></figure>
<p>注意，这里可以不用fabfile作为文件名，但是在执行时需指定文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[ken@~/tmp/fab$] mv fabfile.py test.py</div><div class="line">fabfile.py -&gt; test.py</div><div class="line">[ken@~/tmp/fab$] fab hello</div><div class="line"></div><div class="line">Fatal error: Couldn&apos;t find any fabfiles!</div><div class="line"></div><div class="line">Remember that -f can be used to specify fabfile path, and use -h for help.</div><div class="line"></div><div class="line">Aborting.</div><div class="line">[ken@~/tmp/fab$] fab -f test.py hello</div><div class="line">Hello world!</div><div class="line"></div><div class="line">Done.</div></pre></td></tr></table></figure>
<p>带参数：</p>
<p>修改fabfile.py脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def hello(name, value):</div><div class="line">    print(&quot;%s = %s!&quot; % (name, value))</div></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[ken@~/tmp/fab$] fab hello:name=age,value=20</div><div class="line">age = 20!</div><div class="line"></div><div class="line">Done.</div><div class="line">[ken@~/tmp/fab$] fab hello:age,20</div><div class="line">age = 20!</div><div class="line"></div><div class="line">Done.</div></pre></td></tr></table></figure>
<h3 id="执行本机操作"><a href="#执行本机操作" class="headerlink" title="执行本机操作"></a>执行本机操作</h3><p>简单的本地操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from fabric.api import local, lcd</div><div class="line"></div><div class="line">def lsfab():</div><div class="line">    with lcd(&apos;~/tmp/fab&apos;):</div><div class="line">        local(&apos;ls&apos;)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[ken@~/tmp/fab$] pwd;ls</div><div class="line">/Users/ken/tmp/fab</div><div class="line">fabfile.py   fabfile.pyc  test.py      test.pyc</div><div class="line">[ken@~/tmp/fab$] fab -f test.py lsfab</div><div class="line">[localhost] local: cd ~/tmp/fab</div><div class="line">[localhost] local: ls</div><div class="line">fabfile.py  fabfile.pyc test.py     test.pyc</div><div class="line"></div><div class="line">Done.</div></pre></td></tr></table></figure>
<p>实战开始：</p>
<p>假设，你每天要提交一份配置文件settings.py到版本库（这里没有考虑冲突的情况）</p>
<p>如果是手工操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /home/project/test/conf/</div><div class="line">git add settings.py</div><div class="line">git commit -m &apos;daily update settings.py&apos;</div><div class="line">git pull origin</div><div class="line">git push origin</div></pre></td></tr></table></figure>
<p>也就是说，这几个命令你每天都要手动敲一次，所谓daily job，就是每天都要重复的，机械化的工作，让我们看看用fabric怎么实现一键搞定：(其实用shell脚本可以直接搞定，但是fab的优势不是在这里，这里主要位后面本地+远端操作做准备，毕竟两个地方的操作写一种脚本便于维护)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from fabric.api import local, lcd</div><div class="line"></div><div class="line">def setting_ci():</div><div class="line">    with lcd(&apos;/home/project/test/conf/&apos;):</div><div class="line">        local(&quot;git add settings.py&quot;)</div><div class="line">        #后面你懂的，懒得敲了…..</div></pre></td></tr></table></figure>
<h3 id="混搭整合远端操作"><a href="#混搭整合远端操作" class="headerlink" title="混搭整合远端操作"></a>混搭整合远端操作</h3><p>这时候，假设，你要到机器A的/home/ken/project对应项目目录把配置文件更新下来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># encoding: utf-8</div><div class="line"></div><div class="line">from fabric.api import local,cd,run, env</div><div class="line"></div><div class="line">env.hosts=[&apos;user@ip:port&apos;,] #ssh要用到的参数</div><div class="line">env.password = &apos;pwd&apos;</div><div class="line"></div><div class="line"></div><div class="line">def setting_ci():</div><div class="line">    local(&apos;echo &quot;add and commit settings in local&quot;&apos;)</div><div class="line">    #刚才的操作换到这里，你懂的</div><div class="line"></div><div class="line">def update_setting_remote():</div><div class="line">    print &quot;remote update&quot;</div><div class="line">    with cd(&apos;~/temp&apos;):   #cd用于进入某个目录</div><div class="line">        run(&apos;ls -l | wc -l&apos;)  #远程操作用run</div><div class="line"></div><div class="line">def update():</div><div class="line">    setting_ci()</div><div class="line">    update_setting_remote()</div></pre></td></tr></table></figure>
<p>然后，执行之：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[ken@~/tmp/fab$] fab -f deploy.py update</div><div class="line">[user@ip:port] Executing task &apos;update&apos;</div><div class="line">[localhost] local: echo &quot;add and commit settings in local&quot;</div><div class="line">add and commit settings in local</div><div class="line">remote update</div><div class="line">[user@ip:port] run: ls -l | wc -l</div><div class="line">[user@ip:port] out: 12</div><div class="line">[user@ip:port] out:</div><div class="line"></div><div class="line"></div><div class="line">Done.</div></pre></td></tr></table></figure>
<p>注意，如果不声明env.password，执行到对应机器时会跳出要求输入密码的交互</p>
<h3 id="多服务器混搭"><a href="#多服务器混搭" class="headerlink" title="多服务器混搭"></a>多服务器混搭</h3><p>操作多个服务器，需要配置多个host</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># encoding: utf-8</div><div class="line"></div><div class="line">from fabric.api import *</div><div class="line"></div><div class="line">#操作一致的服务器可以放在一组，同一组的执行同一套操作</div><div class="line">env.roledefs = &#123;</div><div class="line">            &apos;testserver&apos;: [&apos;user1@host1:port1&apos;,],</div><div class="line">            &apos;realserver&apos;: [&apos;user2@host2:port2&apos;, ]</div><div class="line">            &#125;</div><div class="line"></div><div class="line">#env.password = &apos;这里不要用这种配置了，不可能要求密码都一致的，明文编写也不合适。打通所有ssh就行了&apos;</div><div class="line"></div><div class="line">@roles(&apos;testserver&apos;)</div><div class="line">def task1():</div><div class="line">    run(&apos;ls -l | wc -l&apos;)</div><div class="line"></div><div class="line">@roles(&apos;realserver&apos;)</div><div class="line">def task2():</div><div class="line">    run(&apos;ls ~/temp/ | wc -l&apos;)</div><div class="line"></div><div class="line">def dotask():</div><div class="line">    execute(task1)</div><div class="line">    execute(task2)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[ken@~/tmp/fab$] fab -f mult.py dotask</div><div class="line">[user1@host1:port1] Executing task &apos;task1&apos;</div><div class="line">[user1@host1:port1] run: ls -l | wc -l</div><div class="line">[user1@host1:port1] out: 9</div><div class="line">[user1@host1:port1] out:</div><div class="line"></div><div class="line">[user2@host2:port2] Executing task &apos;task2&apos;</div><div class="line">[user2@host2:port2] run: ls ~/temp/ | wc -l</div><div class="line">[user2@host2:port2] out: 11</div><div class="line">[user2@host2:port2] out:</div><div class="line"></div><div class="line"></div><div class="line">Done.</div></pre></td></tr></table></figure>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>1.颜色</p>
<p>可以打印颜色，在查看操作结果信息的时候更为醒目和方便</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from fabric.colors import *</div><div class="line"></div><div class="line">def show():</div><div class="line">    print green(&apos;success&apos;)</div><div class="line">    print red(&apos;fail&apos;)</div><div class="line">    print yellow(&apos;yellow&apos;)</div><div class="line">#fab -f color.py show</div></pre></td></tr></table></figure>
<p>2.错误和异常</p>
<p>关于<a href="http://docs.fabfile.org/en/1.6/usage/execution.html#failures" target="_blank" rel="external">错误处理</a></p>
<p>默认，一组命令，上一个命令执行失败后，不会接着往下执行</p>
<p>失败后也可以进行不一样的处理， <a href="http://docs.fabfile.org/en/1.6/tutorial.html#failure-handling" target="_blank" rel="external">文档</a></p>
<p>目前没用到，后续用到再看了</p>
<p>3.密码管理</p>
<p>看<a href="http://docs.fabfile.org/en/1.6/usage/execution.html#password-management" target="_blank" rel="external">文档</a></p>
<p>更好的密码管理方式，哥比较土，没打通，主要是服务器列表变化频繁，我的处理方式是：</p>
<p>3.1 host,user,port,password配置列表，所有的都写在一个文件</p>
<p>或者直接搞到脚本里，当然这个更……..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">env.hosts = [</div><div class="line">        &apos;host1&apos;,</div><div class="line">        &apos;host2&apos;</div><div class="line">]</div><div class="line"># 注意: 要使env.passwords生效, host格式必须是  user@ip:port 端口号一定要显式写出来,即使是使用的默认22端口</div><div class="line">env.passwords = &#123;</div><div class="line">    &apos;host1&apos;: &quot;pwdofhost1&quot;,</div><div class="line">    &apos;host2&apos;: &quot;pwdofhost2&quot;,</div><div class="line">&#125;</div><div class="line"></div><div class="line">或者</div><div class="line">env.roledefs = &#123;</div><div class="line">&apos;testserver&apos;: [&apos;host1:22&apos;, &apos;host2:22&apos;],</div><div class="line">&apos;realserver&apos;: [&apos;host3:22&apos;, ]</div><div class="line">&#125;</div><div class="line"># 注意: 要使env.passwords生效, host格式必须是  user@ip:port 端口号一定要显式写出来,即使是使用的默认22端口</div><div class="line">env.passwords = &#123;</div><div class="line">    &apos;host1:22&apos;: &quot;pwdofhost1&quot;,</div><div class="line">    &apos;host2:22&apos;: &quot;pwdofhost2&quot;,</div><div class="line">    &apos;host3:22&apos;: &quot;pwdofhost3&quot;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.2 根据key解析成map嵌套，放到deploy中</p>
<p>另外命令其实也可以固化成一个cmds列表的…..</p>
<p>粗略就用到这些，后续有更多需求的时候再去捞文档了，话说文档里好东西真多，就是太多了，看了晕。。。</p>
<p>TODO:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">装饰器作用？</div><div class="line">@task</div><div class="line">@parallel</div><div class="line"></div><div class="line">命令行常用： fab --help</div><div class="line">fab -l             -- 显示可用的task（命令）</div><div class="line">fab -H             -- 指定host，支持多host逗号分开</div><div class="line">fab -R             -- 指定role，支持多个</div><div class="line">fab -P             -- 并发数，默认是串行</div><div class="line">fab -w             -- warn_only，默认是碰到异常直接abort退出</div><div class="line">fab -f             -- 指定入口文件，fab默认入口文件是：fabfile/fabfile.py</div><div class="line"></div><div class="line">状态确认及错误处理</div><div class="line"></div><div class="line">更复杂的操作</div></pre></td></tr></table></figure>
<hr>
<p>update log</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2014-10-26 fix error of local/lcd</div></pre></td></tr></table></figure>
<hr>
<p>The end!</p>
]]></content>
    
    <summary type="html">
    
      PYTHON FABRIC实现远程操作和部署
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="fabric" scheme="https://plpcm.github.io/blog/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（十 二）磁盘使用率筛选</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_12/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_12/</id>
    <published>2016-10-22T02:55:16.000Z</published>
    <updated>2017-01-11T01:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、实现目标"><a href="#一、实现目标" class="headerlink" title="一、实现目标"></a>一、实现目标</h3><p>将所有主机的磁盘大于75%的主机获取到，并输出为下面的格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">主机IP    主机名      磁盘挂载点信息     磁盘使用率</div></pre></td></tr></table></figure>
<p>假如 host1上有多个分区都大于75% ，则写多条。当主机上没有一台符合时，则什么都不输出。</p>
<p>注：现网主机上有两个 bond 网卡，其中一个配置的是10段的IP，另一个配置的是192段的IP。这里要获取的是10段的IP。</p>
<h3 id="二、-ansible-awk-简单输出"><a href="#二、-ansible-awk-简单输出" class="headerlink" title="二、 ansible + awk 简单输出"></a>二、 ansible + awk 简单输出</h3><p>该问题我处理的结果是使用ansible api 写的一个python脚本实现的。先看下我在一个技术群和一个大牛的讨论的结果(点击图片看大图)。</p>
<p><a href="http://www.361way.com/wp-content/uploads/2016/01/ansible-df.png" target="_blank" rel="external"><img src="http://www.361way.com/wp-content/uploads/2016/01/ansible-df-300x100.png" alt="ansible-df"></a></p>
<p>如上图，大牛的做法用的是awk 的next方法进行的处理，awk 的next功能我也做过记录，具体参看<a href="http://www.361way.com/awk-next-merge-lines/4923.html" target="_blank" rel="external">awk next多行合并</a> 。</p>
<p>这里有几个注意点需要说明下：</p>
<p>1、大牛的写法中在筛选上写的不严谨，$5前应该有int转化，不过不能正确的取到值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# df -hP|awk &apos;NR&gt;1 &amp;&amp; $5 &gt; 20&apos;</div><div class="line">/dev/xvda1       20G  4.6G   15G  25% /</div><div class="line">/dev/xvdb        20G  645M   18G   4% /data1</div><div class="line">[root@361way ~]# df -hP|awk &apos;NR&gt;1 &amp;&amp; int($5) &gt; 20&apos;</div><div class="line">/dev/xvda1       20G  4.6G   15G  25% /</div></pre></td></tr></table></figure>
<p>有没有看到，如果不做int格式转换取的结果是所有分区的信息，而加上int后获取的才是我们想要的结果</p>
<p>2、在ansible执行时$5前面要加上转义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># ansible all -m shell -a &quot;df -hP|awk &apos;NR&gt;1 &amp;&amp; int($5) &gt; 50&apos;&quot;</div><div class="line">10.212.52.252 | FAILED | rc=2 &gt;&gt;</div><div class="line">awk: fatal: 0 is invalid as number of arguments for int</div><div class="line">[root@361way ~]# df -hP|awk &apos;NR&gt;1 &amp;&amp; int(\$5) &gt; 20&apos;</div><div class="line">awk: NR&gt;1 &amp;&amp; int(\$5) &gt; 20</div><div class="line">awk:             ^ backslash not last character on line</div></pre></td></tr></table></figure>
<p>如上面的结果，如果在ansible执行时不加转义时会有报错提示，如果加上转义在主机端执行时会自动是将转义符去掉的结果。而在主机端执行时，如果加上了转义也会报错。所以主机端一定不能加上转义。</p>
<p>3、在实际应用时，输出结果可能和大牛的输出有差距</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ansible all -m shell -a &quot;df -hP|awk &apos;NR&gt;1 &amp;&amp; int(\$5) &gt; 30&apos;&quot;|awk &apos;/success/&#123;ip=$1;next&#125;&#123;print ip,$0&#125;&apos;</div><div class="line">10.212.52.252 /dev/sda9       9.9G  2.9G  6.5G  31% /opt</div><div class="line">10.212.52.252 /dev/sda6       5.0G  1.9G  2.8G  41% /tmp</div><div class="line">10.212.52.252 /dev/sda5       9.9G  3.9G  5.5G  42% /usr</div><div class="line">10.212.52.252</div><div class="line">10.212.52.14 /dev/cciss/c0d0p5  9.9G  3.2G  6.3G  34% /usr</div><div class="line">10.212.52.14</div><div class="line">10.212.52.16 /dev/cciss/c0d0p7  9.9G  4.0G  5.4G  43% /tmp</div><div class="line">10.212.52.16 /dev/cciss/c0d0p5  9.9G  2.9G  6.5G  31% /usrdf: `/root/.gvfs&apos;: Permission denied</div><div class="line">10.212.52.16</div></pre></td></tr></table></figure>
<p>上面的结果是我在自己的测试环境上执行的结果。可以看到多出的空行也打印了主机的IP 。还会需要注意的，我这里ansible输出的success是小写的。</p>
<p>不知道以上的问题是不是使用的环境不同造成的。我运行的环境是ansible主机为redhat6，ansible版本为1.9，被取数据主机有redhat6和suse11 。不过这都是小问题，同样可以通过处理获取到正常的结果。</p>
<p>4、ansible api 执行</p>
<p>上面的大牛的结果，我使用ansible api 执行，如下，可以对比下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# cat /tmp/test.py</div><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf-8</div><div class="line"># author ： www.361way.com</div><div class="line"># mail : itybku@139.com</div><div class="line">import ansible.runner</div><div class="line">#import json</div><div class="line">runner = ansible.runner.Runner(</div><div class="line">           module_name=&apos;shell&apos;,</div><div class="line">           module_args=&quot;df -hP|awk &apos;NR&gt;1 &amp;&amp; int($5)&gt;30&apos;&quot;,</div><div class="line">           pattern=&apos;all&apos;,</div><div class="line">           forks=10</div><div class="line">        )</div><div class="line">results = runner.run()</div><div class="line">#print  results</div><div class="line">for (hostname, result) in results[&apos;contacted&apos;].items():</div><div class="line">    if not &apos;failed&apos; in result:</div><div class="line">        for line in  result[&apos;stdout&apos;].split(&apos;\n&apos;):</div><div class="line">            print &quot;%s  %s&quot; % (hostname, line)</div><div class="line"># 执行结果如下</div><div class="line">[root@localhost ~]# python /tmp/test.py</div><div class="line">10.212.52.16  /dev/cciss/c0d0p7  9.9G  4.0G  5.4G  43% /tmp</div><div class="line">10.212.52.16  /dev/cciss/c0d0p5  9.9G  2.9G  6.5G  31% /usr</div><div class="line">10.212.52.252  /dev/sda9       9.9G  2.9G  6.5G  31% /opt</div><div class="line">10.212.52.252  /dev/sda6       5.0G  1.9G  2.8G  41% /tmp</div><div class="line">10.212.52.252  /dev/sda5       9.9G  3.9G  5.5G  42% /usr</div><div class="line">10.212.52.14  /dev/cciss/c0d0p5  9.9G  3.2G  6.3G  34% /usr</div></pre></td></tr></table></figure>
<h3 id="三、还是ansible-api-获取磁盘信息"><a href="#三、还是ansible-api-获取磁盘信息" class="headerlink" title="三、还是ansible api 获取磁盘信息"></a>三、还是ansible api 获取磁盘信息</h3><p>上面的方法中实际执行时，比我们预期需要的效果少了主机名一项。这里我换做执行脚本实现，实现效果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#/bin/bash</div><div class="line"># author : www.361way.com</div><div class="line">IP=`ip add show|grep inet|grep 10|awk &apos;&#123;print $2&#125;&apos;`</div><div class="line">df -hl|grep &apos;^/&apos;|sed &apos;s/%//g&apos;|awk &apos;&#123;if($5&gt;30) print $0&#125;&apos;|while read line</div><div class="line">do</div><div class="line">    echo $IP `hostname` $line</div><div class="line">done</div><div class="line"># 执行结果如下</div><div class="line"># sh aa.sh</div><div class="line">10.212.52.253/24 localhost /dev/sda3 9.5G 5.7G 3.4G 64 /</div><div class="line">10.212.52.253/24 localhost /dev/sda2 39G 19G 18G 52 /home</div><div class="line">10.212.52.253/24 localhost /dev/sda6 9.5G 7.1G 2.0G 78 /usr</div></pre></td></tr></table></figure>
<p>使用ansible api 执行该脚本的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># python dfscript.py</div><div class="line">df: `/root/.gvfs&apos;: Permission denied</div><div class="line">df: `/root/.gvfs&apos;: Permission denied</div><div class="line">10.212.52.16/24 linux /dev/cciss/c0d0p7 9.9G 4.0G 5.4G 43 /tmp</div><div class="line">10.212.52.16/24 linux /dev/cciss/c0d0p5 9.9G 2.9G 6.5G 31 /usr</div><div class="line">10.212.52.252/24 zjhz-bmc-test /dev/sda9 9.9G 2.9G 6.5G 31 /opt</div><div class="line">10.212.52.252/24 zjhz-bmc-test /dev/sda6 5.0G 1.9G 2.8G 41 /tmp</div><div class="line">10.212.52.252/24 zjhz-bmc-test /dev/sda5 9.9G 3.9G 5.5G 42 /usr</div><div class="line">10.212.52.14/24 linux /dev/cciss/c0d0p5 9.9G 3.2G 6.3G 34 /usr</div></pre></td></tr></table></figure>
<p>dfscript.py脚本内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># cat dfscript.py</div><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf-8</div><div class="line"># author ： www.361way.com</div><div class="line"># mail : itybku@139.com</div><div class="line">import ansible.runner</div><div class="line">#import json</div><div class="line">runner = ansible.runner.Runner(</div><div class="line">           module_name=&apos;script&apos;,</div><div class="line">           module_args=&quot;aa.sh&quot;,</div><div class="line">           pattern=&apos;all&apos;,</div><div class="line">           forks=10</div><div class="line">        )</div><div class="line">results = runner.run()</div><div class="line">#print  results</div><div class="line">for (hostname, result) in results[&apos;contacted&apos;].items():</div><div class="line">    if not &apos;failed&apos; in result:</div><div class="line">        for line in  result[&apos;stdout&apos;].split(&apos;\r\n&apos;):</div><div class="line">            #print &quot;%s  %s&quot; % (hostname, line)</div><div class="line">            print line</div></pre></td></tr></table></figure>
<p>直接对该脚本执行后的结果进行grep 标准输出时，会发现其行与行之间是以\r\n这样的方式分行的。</p>
<p><img src="http://www.361way.com/wp-content/uploads/2016/01/diskdf.png" alt="img"></p>
<p>所以在数据获取方面，尽量以ansible api 的方式进行获取，而api 的使用非常简单，无法是几个参数的替换后面再调用run方法，最终在对结果进行处理。而涉及多项信息获取时，建议使用自定义模块的方法，先将所需数据取回来，以json方式返回－－－ansible自定义模块所要求的格式。返回后可以再以api 或其他方式处理返回的数据即可。</p>
]]></content>
    
    <summary type="html">
    
      年底了虽然有各种告警，不过还是需要做一下全网巡检，这里以磁盘使用率为例。由于目前平台上使用的是商业版的自动化工具bmc，其在执行分发都方面非常不存，不过在取值返回上做的不好－－－当然也和其是商业化工具有关，很多东西不开源，用shell 的语法概念写nsh时又执行不通过，NND总是要问原厂支撑 。刚好在测试环境上有之前安装的ansible环境，也测试下用ansible 来实现该功能。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（十一）ansible普通用户su切换问题</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_11/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_11/</id>
    <published>2016-10-22T02:50:16.000Z</published>
    <updated>2017-01-11T01:46:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ansible-hosts配置文件"><a href="#一、ansible-hosts配置文件" class="headerlink" title="一、ansible hosts配置文件"></a>一、ansible hosts配置文件</h3><p>在之前的系列文章中我们提到，可以把密码写到hosts配置文件，通过查询官网的相关信息了解了，其除了ansible_ssh_user、ansible_ssh_pass变量外，还为su切换提供了ansible_su_pass变量，通过该变量我们可以把root密码直接写到配置文件中。具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# cat /etc/ansible/hosts</div><div class="line">[test01]</div><div class="line">10.212.52.14 ansible_ssh_user=test ansible_ssh_pass=111111 ansible_su_pass=*I2145</div><div class="line">10.212.52.16 ansible_ssh_user=test ansible_ssh_pass=xyz123  ansible_su_pass=mn1Pokm</div><div class="line">10.212.52.252 ansible_ssh_user=amos ansible_ssh_pass=asdf ansible_su_pass=xyzp)okm</div></pre></td></tr></table></figure>
<p>注：我测试使用的ansible版本是1.9版的，在新的2.0版本中，变量也做了变化ansible_become_pass替换了之前的ansible_sudo_pass or ansible_su_pass ，具体可以参看<a href="http://docs.ansible.com/ansible/become.html" target="_blank" rel="external">官方文档</a>。</p>
<h3 id="二、ansible命令参数"><a href="#二、ansible命令参数" class="headerlink" title="二、ansible命令参数"></a>二、ansible命令参数</h3><p>在执行ansible -h查看时，会看到如下条目：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-S, --su              run operations with su (deprecated, use become)</div><div class="line">-R SU_USER, --su-user=SU_USER</div><div class="line">                      run operations with su as this user (default=root)</div><div class="line">                      (deprecated, use become)</div></pre></td></tr></table></figure>
<h3 id="三、su切换执行"><a href="#三、su切换执行" class="headerlink" title="三、su切换执行"></a>三、su切换执行</h3><p>所以结合上面两块，我们做下简单的测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# ansible all  -S -R root -m shell -a &quot;uptime&quot;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line"> 16:13pm  up 34 days  5:40,  2 users,  load average: 0.08, 0.21, 0.30</div><div class="line">10.212.52.16 | success | rc=0 &gt;&gt;</div><div class="line"> 16:26pm  up 538 days 23:17,  2 users,  load average: 0.00, 0.01, 0.05</div><div class="line">10.212.52.14 | success | rc=0 &gt;&gt;</div><div class="line"> 16:24pm  up 538 days 22:39,  2 users,  load average: 0.00, 0.01, 0.05</div></pre></td></tr></table></figure>
<p>这里需要注意的是，普通用户的家目录是要存在，并切该普通用户要有写的权限的，不然会出现类似如下的报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">10.212.52.252 | FAILED =&gt; Authentication or permission failure.</div><div class="line">In some cases, you may have been able to authenticate and did not have permissions on the remote directory.</div><div class="line">Consider changing the remote temp path in ansible.cfg to a path rooted in &quot;/tmp&quot;.</div><div class="line">Failed command was: mkdir -p $HOME/.ansible/tmp/ansible-tmp-1449456070.96-212322517029279 &amp;&amp; echo $HOME/.ansible/tmp/ansible-tmp-1449456070.96-212322517029279,</div><div class="line">exited with result 1: mkdir: cannot create directory `/home/amos/.ansible&apos;: Permission denied</div></pre></td></tr></table></figure>
<p>当然，如果这个普通用户没有家目录或者家目录没有写权限在不修改远端主机也有办法可以搞定，修改ansible主机的ansible.cfg配置文件，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# vim /etc/ansible/ansible.cfg</div><div class="line">找到如下行：</div><div class="line">remote_tmp     = $HOME/.ansible/tmp</div><div class="line">修改为</div><div class="line">remote_tmp     = /tmp/.ansible/tmp</div></pre></td></tr></table></figure>
<p>tmp目录一般都有写的权限吧，改成临时目录为/tmp下即可。</p>
<p>再下为我们再看看远程主机的message日志文件确认下是否真的是通过普通用户切换的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Dec  3 11:36:20 linux su: (to root) test on /dev/pts/1     //由普通用户test切换为su切换为root的日志</div><div class="line">Dec  3 11:36:20 linux ansible-command: Invoked with creates=None executable=None chdir=None args=uptime removes=None NO_LOG=None shell=True warn=True  //ansible执行的内容</div></pre></td></tr></table></figure>
<p>功能实现了，最后要说的是，由于该配置文件中涉及到多台主机的用户名密码，所以该文件的安全工作一定要做好。</p>
]]></content>
    
    <summary type="html">
    
      在现网应用中，安全加固后的主机是不允许直接以root用户登陆的，而很多命令又需要root用户来执行，在不改造现网的情况下。希望通过一个普通用户先登陆，再su切到root执行。而且每台主机的普通用户和root用户的密码又不同。希望在通过ansible执行的时候不需要交互输入密码，而是直接执行后输出结果。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（十）ansible api</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_10/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_10/</id>
    <published>2016-10-22T02:40:16.000Z</published>
    <updated>2017-01-11T01:46:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、ansible-api"><a href="#一、ansible-api" class="headerlink" title="一、ansible api"></a>一、ansible api</h3><p>ansible api 的使用非常强大，也非常简单，只不过把模块需要使用的参数写到了脚本中，这里先来看下官方给的示例，不过同于官方的是，我这里增我将结果进行了json美化输出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@361way api]# cat test_api.py</div><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf-8</div><div class="line">import ansible.runner</div><div class="line">import json</div><div class="line">runner = ansible.runner.Runner(</div><div class="line">       module_name=&apos;ping&apos;,</div><div class="line">       module_args=&apos;&apos;,</div><div class="line">       pattern=&apos;all&apos;,</div><div class="line">       forks=10</div><div class="line">    )</div><div class="line">datastructure = runner.run()</div><div class="line">data = json.dumps(datastructure,indent=4)</div><div class="line">print data</div></pre></td></tr></table></figure>
<p>其输出结果如下：</p>
<p><a href="http://www.361way.com/wp-content/uploads/2015/05/ansible-api.png" target="_blank" rel="external"><img src="http://www.361way.com/wp-content/uploads/2015/05/ansible-api.png" alt="ansible-api"></a></p>
<p>注：如果主机是不通或失败的，结果将会输出到dark部分里，一个含有失败主机的结果类似如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;dark&quot; : &#123;</div><div class="line">       &quot;web1.example.com&quot; : &quot;failure message&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;contacted&quot; : &#123;</div><div class="line">       &quot;web2.example.com&quot; : 1</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再为看下第二个示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line">import ansible.runner</div><div class="line">import sys</div><div class="line"># construct the ansible runner and execute on all hosts</div><div class="line">results = ansible.runner.Runner(</div><div class="line">    pattern=&apos;*&apos;, forks=10,</div><div class="line">    module_name=&apos;command&apos;, module_args=&apos;/usr/bin/uptime&apos;,</div><div class="line">).run()</div><div class="line">if results is None:</div><div class="line">   print &quot;No hosts found&quot;</div><div class="line">   sys.exit(1)</div><div class="line">print &quot;UP ***********&quot;</div><div class="line">for (hostname, result) in results[&apos;contacted&apos;].items():</div><div class="line">    if not &apos;failed&apos; in result:</div><div class="line">        print &quot;%s &gt;&gt;&gt; %s&quot; % (hostname, result[&apos;stdout&apos;])</div><div class="line">print &quot;FAILED *******&quot;</div><div class="line">for (hostname, result) in results[&apos;contacted&apos;].items():</div><div class="line">    if &apos;failed&apos; in result:</div><div class="line">        print &quot;%s &gt;&gt;&gt; %s&quot; % (hostname, result[&apos;msg&apos;])</div><div class="line">print &quot;DOWN *********&quot;</div><div class="line">for (hostname, result) in results[&apos;dark&apos;].items():</div><div class="line">    print &quot;%s &gt;&gt;&gt; %s&quot; % (hostname, result)</div></pre></td></tr></table></figure>
<p>上面的示例中对主机的输出结果进行了判断，并且结果的输出进行了定制化，上面执行的结果你可以和ansible all -m command -a ‘uptime’ 的结果进行下比对，看下有什么不同。</p>
<p>上面的示例基本上都是参照<a href="http://docs.ansible.com/developing_api.html" target="_blank" rel="external">官方页面</a>进行执行的，更多用法可以通过pydoc ansible或者通过python里的help(ansible)查看。另外在多主机执行时，可以使用async(异部)方式运行。</p>
<h3 id="二、ansible-playbook-api"><a href="#二、ansible-playbook-api" class="headerlink" title="二、ansible_playbook api"></a>二、ansible_playbook api</h3><p>ansible_playbook api 部分在官方文档上并没有提，不过通过查看ansible模块的帮助信息可以看到其是支持的。在<a href="https://groups.google.com/forum/#!topic/ansible-project/V1PoNJcXV_w" target="_blank" rel="external">ansible google论坛</a>里（需翻墙），有老外也给出里代码，其实它和执行ansible的api方式一样，只是多了个几个参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import ansible.playbook</div><div class="line">from ansible import callbacks</div><div class="line">from ansible import utils</div><div class="line">stats = callbacks.AggregateStats()</div><div class="line">playbook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)</div><div class="line">runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=utils.VERBOSITY)</div><div class="line">pb = ansible.playbook.PlayBook(</div><div class="line">    playbook=&quot;nseries.yml&quot;,</div><div class="line">    stats=stats,</div><div class="line">    callbacks=playbook_cb,</div><div class="line">    runner_callbacks=runner_cb,</div><div class="line">    check=True</div><div class="line">)</div><div class="line">for (play_ds, play_basedir) in zip(pb.playbook, pb.play_basedirs):</div><div class="line">    import ipdb</div><div class="line">    ipdb.set_trace()</div><div class="line">    # Can play around here to see what&apos;s going on.</div><div class="line">pb.run()</div></pre></td></tr></table></figure>
<p>大致看了下代码，在用api的方式执行playbook的时候，playbook，stats，callbacks，runner_callbacks这几个参数是必须的。不使用的时候会报错。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">arguments = []</div><div class="line">if playbook is None:</div><div class="line">    arguments.append(&apos;playbook&apos;)</div><div class="line">if callbacks is None:</div><div class="line">    arguments.append(&apos;callbacks&apos;)</div><div class="line">if runner_callbacks is None:</div><div class="line">    arguments.append(&apos;runner_callbacks&apos;)</div><div class="line">if stats is None:</div><div class="line">    arguments.append(&apos;stats&apos;)</div><div class="line">if arguments:</div><div class="line">    raise Exception(&apos;PlayBook missing required arguments: %s&apos; % &apos;, &apos;.join(arguments))</div></pre></td></tr></table></figure>
<p>playbook用来指定playbook的yaml文件</p>
<p>stats用来收集playbook执行期间的状态信息，最后会进行汇总</p>
<p>callbacks用来输出playbook执行的结果</p>
<p>runner_callbacks用来输出playbook执行期间的结果。但是它返回的结果太简单，我想让它详细点，如果用自定义callback的方法插入到mongo里面的话也行，或者是直接输出，但是我想所有task都执行完后，把每个task的详细信息输出到终端上，最后发现结果输出都是靠callbacks.py里的AggregateStats这个类，在每执行完一个task后，都会调用AggregateStats进行计算，汇总。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">[root@361way api]# cat playbook_api.py</div><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf-8</div><div class="line">import ansible.playbook</div><div class="line">from ansible import callbacks</div><div class="line">from ansible import utils</div><div class="line">import json</div><div class="line">stats = callbacks.AggregateStats()</div><div class="line">playbook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)</div><div class="line">runner_cb = callbacks.PlaybookRunnerCallbacks(stats,verbose=utils.VERBOSITY)</div><div class="line">res=ansible.playbook.PlayBook(</div><div class="line">            playbook=&apos;/etc/ansible/playbooks/user.yml&apos;,</div><div class="line">            stats=stats,</div><div class="line">            callbacks=playbook_cb,</div><div class="line">            runner_callbacks=runner_cb</div><div class="line">    ).run()</div><div class="line">data = json.dumps(res,indent=4)</div><div class="line">print data</div><div class="line"># 执行结果如下：</div><div class="line">[root@361way api]# python playbook_api.py</div><div class="line">PLAY [create user] ************************************************************</div><div class="line">TASK: [create test &quot;&#123;&#123; user &#125;&#125;&quot;] **********************************************</div><div class="line">changed: [10.212.52.16]</div><div class="line">changed: [10.212.52.14]</div><div class="line">&#123;</div><div class="line">    &quot;10.212.52.16&quot;: &#123;</div><div class="line">        &quot;unreachable&quot;: 0,</div><div class="line">        &quot;skipped&quot;: 0,</div><div class="line">        &quot;ok&quot;: 1,</div><div class="line">        &quot;changed&quot;: 1,</div><div class="line">        &quot;failures&quot;: 0</div><div class="line">    &#125;,</div><div class="line">    &quot;10.212.52.14&quot;: &#123;</div><div class="line">        &quot;unreachable&quot;: 0,</div><div class="line">        &quot;skipped&quot;: 0,</div><div class="line">        &quot;ok&quot;: 1,</div><div class="line">        &quot;changed&quot;: 1,</div><div class="line">        &quot;failures&quot;: 0</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">[root@361way api]#</div></pre></td></tr></table></figure>
<h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><p>从上面的例子来看，感觉作用似乎有点鸡肋。多条ansible shell 指令的执行可以写成playbook 来执行，ansbile-playbook 也可以通过include 调用子playbook ，似乎API 部分用处并不大 。咋一听深感有理，不过细究一下，</p>
<p>1、当需要先对前一次作任务执行的结果进行处理，并将相应的结果对应的作为输入再在一次任务传入时，这里使用api 更方便；</p>
<p>2、需要对结果输出进行整形时，也比较api 方便；</p>
<p>3、playbook 之间进行调用或都playbook比较复杂时，想要理清任务之间的关系势必累显麻烦，而通过api，从上一层任务到下一层任务之间的调用关系明子。而且playbook之间可以是平行的关系。方便小的功能模块的复用。</p>
<p>4、方便二次开发及和其他程序之间的耦合调用－－－－目前感觉这条是最实用的。</p>
]]></content>
    
    <summary type="html">
    
      ansible api 与ansible-playbook api 本应该是后面放在 ansible条件与循环、ansible变量篇之后讲的，不过使用过后实在按捺不住提前写的冲动，这个插个队先讲讲API 部分。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（八）ansible-playbook简单使用</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_08/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_08/</id>
    <published>2016-10-22T02:38:16.000Z</published>
    <updated>2017-01-11T01:39:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>playbook通过ansible-playbook命令使用,它的参数和ansible命令类似,如参数-k(–ask-pass) 和 -K (–ask-sudo) 来询问ssh密码和sudo密码,-u指定用户,这些指令也可以通过规定的单元写在playbook 。ansible-playbook的简单使用方法: ansible-playbook example-play.yml 。</p>
<h3 id="一、一个简单的示例"><a href="#一、一个简单的示例" class="headerlink" title="一、一个简单的示例"></a>一、一个简单的示例</h3><p>下面给出一个简单的ansible-playbook示例，了解下其构成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># cat user.yml</div><div class="line">- name: create user</div><div class="line">  hosts: all</div><div class="line">  user: root</div><div class="line">  gather_facts: false</div><div class="line">  vars:</div><div class="line">  - user: &quot;test&quot;</div><div class="line">  tasks:</div><div class="line">  - name: create  user</div><div class="line">    user: name=&quot;&#123;&#123; user &#125;&#125;&quot;</div></pre></td></tr></table></figure>
<p>上面的playbook 实现的功能是新增一个用户：</p>
<p>name参数对该playbook实现的功能做一个概述，后面执行过程中，会打印 name变量的值 ；</p>
<p>hosts参数指定了对哪些主机进行参作；</p>
<p>user参数指定了使用什么用户登录远程主机操作；</p>
<p>gather_facts参数指定了在以下任务部分执行前，是否先执行setup模块获取主机相关信息，这在后面的task会使用到setup获取的信息时用到；</p>
<p>vars参数，指定了变量，这里指字一个user变量，其值为test ，需要注意的是，变量值一定要用引号引住；</p>
<p>task指定了一个任务，其下面的name参数同样是对任务的描述，在执行过程中会打印出来。user提定了调用user模块，name是user模块里的一个参数，而增加的用户名字调用了上面user变量的值。具体执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@361way playbooks]# ansible-playbook user.yml</div><div class="line">PLAY [create user] ************************************************************</div><div class="line">TASK: [create  user ] **********************************************</div><div class="line">changed: [10.212.52.252]</div><div class="line">changed: [10.212.52.14]</div><div class="line">changed: [10.212.52.16]</div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">10.212.52.14               : ok=1    changed=1    unreachable=0    failed=0</div><div class="line">10.212.52.16               : ok=1    changed=1    unreachable=0    failed=0</div><div class="line">10.212.52.252              : ok=1    changed=1    unreachable=0    failed=0</div></pre></td></tr></table></figure>
<p>同样，如果想实现把这个新增的用户删除，只需将该playbook文件的最后一行替换为如下行再执行相应的playbook即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user: name=&quot;&#123;&#123; user &#125;&#125;&quot; state=absent remove=yes</div></pre></td></tr></table></figure>
<h3 id="二、一键修补bash-shellcode示例"><a href="#二、一键修补bash-shellcode示例" class="headerlink" title="二、一键修补bash shellcode示例"></a>二、一键修补bash shellcode示例</h3><p>再给出一个稍微复杂的示例，通过ansible-playbook实现对N台主机同时修补bash shellcode 漏洞。需要注意的是，可能现网主机分布着不同的系统版本。这里假设现网同时存在centos5和6版本，具体playbook内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># cat update_bash.yml</div><div class="line">- hosts: all</div><div class="line">  remote_user: root</div><div class="line">  gather_facts: True</div><div class="line">  tasks:</div><div class="line">  - name: update bash in redhat 6 version</div><div class="line">    yum: name=http://mirrors.aliyun.com/centos/6.6/os/x86_64/Packages/bash-4.1.2-29.el6.x86_64.rpm.rpm state=present</div><div class="line">    when: ansible_os_family == &quot;RedHat&quot; and ansible_distribution_version|int &gt;=6</div><div class="line">  - name: update bash in redhat 5 version</div><div class="line">    yum: name=http://mirrors.hustunique.com/centos/5/updates/x86_64/RPMS/bash-3.2-33.el5.1.x86_64.rpm state=present</div><div class="line">    when: ansible_os_family == &quot;RedHat&quot; and ansible_distribution_version|int &lt;=5</div></pre></td></tr></table></figure>
<p>上面使用了when语句，同时也开启了gather_facts setup模块，这里的ansible_os_family变量和ansible_distribution_version变量就是直接使用的setup模块获取的信息。</p>
<p>如果有大量主机，就在运行的时候加上-f然后选择一个合适的并发主机数量即可，我这里使用了这个，很快的就升级完成bash了。</p>
<h3 id="三、playbook的构成"><a href="#三、playbook的构成" class="headerlink" title="三、playbook的构成"></a>三、playbook的构成</h3><p>playbook是由一个或多个“play”组成的列表。play的主要功能在于将事先归并为一组的主机装扮成事先通过ansible中的task定义好的角色。从根本上来讲所谓task无非是调用ansible的一个module。将多个play组织在一个playbook中即可以让它们联同起来按事先编排的机制同唱一台大戏。其主要有以下四部分构成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">playbooks组成：</div><div class="line">  Target section：   定义将要执行 playbook 的远程主机组</div><div class="line">  Variable section： 定义 playbook 运行时需要使用的变量</div><div class="line">  Task section：     定义将要在远程主机上执行的任务列表</div><div class="line">  Handler section：  定义 task 执行完成以后需要调用的任务</div></pre></td></tr></table></figure>
<p>而其对应的目录层为五个，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">一般所需的目录层有：(视情况可变化)</div><div class="line">  vars     变量层</div><div class="line">  tasks    任务层</div><div class="line">  handlers 触发条件</div><div class="line">  files    文件</div><div class="line">  template 模板</div></pre></td></tr></table></figure>
<p>下面介绍下构成playbook 的四层结构。</p>
<h4 id="1、Hosts和Users"><a href="#1、Hosts和Users" class="headerlink" title="1、Hosts和Users"></a>1、Hosts和Users</h4><p>playbook中的每一个play的目的都是为了让某个或某些主机以某个指定的用户身份执行任务。</p>
<p>hosts 用于指定要执行指定任务的主机其可以是一个或多个由冒号分隔主机组。</p>
<p>remote_user 则用于指定远程主机上的执行任务的用户。<br>不过remote_user也可用于各task中。也可以通过指定其通过sudo的方式在远程主机上执行任务其可用于play全局或某任务。<br>此外甚至可以在sudo时使用sudo_user指定sudo时切换的用户。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- hosts: webnodes</div><div class="line">  tasks:</div><div class="line">    - name: test ping connection:</div><div class="line">    remote_user: test</div><div class="line">    sudo: yes</div></pre></td></tr></table></figure>
<h4 id="2、任务列表和action"><a href="#2、任务列表和action" class="headerlink" title="2、任务列表和action"></a>2、任务列表和action</h4><p>play的主体部分是task list。</p>
<p>task list中的各任务按次序逐个在hosts中指定的所有主机上执行即在所有主机上完成第一个任务后再开始第二个。在运行自下而下某playbook时如果中途发生错误所有已执行任务都将回滚因此在更正playbook后重新执行一次即可。 </p>
<p>task的目的是使用指定的参数执行模块而在模块参数中可以使用变量。模块执行是幂等的这意味着多次执行是安全的因为其结果均一致。每个task都应该有其name用于playbook的执行结果输出建议其内容尽可能清晰地描述任务执行步骤。如果未提供name则action的结果将用于输出。 </p>
<p>定义task的可以使用“action: module options”或“module: options”的格式推荐使用后者以实现向后兼容。如果action一行的内容过多也中使用在行首使用几个空白字符进行换行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">  - name: make sure apache is running</div><div class="line">    service: name=httpd state=running</div><div class="line">在众多模块中只有command和shell模块仅需要给定一个列表而无需使用“key=value”格式例如</div><div class="line">tasks:</div><div class="line">  - name: disable selinux</div><div class="line">    command: /sbin/setenforce 0  如果命令或脚本的退出码不为零可以使用如下方式替代</div><div class="line">tasks:</div><div class="line">  - name: run this command and ignore the result</div><div class="line">    shell: /usr/bin/somecommand || /bin/true</div><div class="line">或者使用ignore_errors来忽略错误信息</div><div class="line">tasks:</div><div class="line">  - name: run this command and ignore the result</div><div class="line">    shell: /usr/bin/somecommand</div><div class="line">    ignore_errors: True</div></pre></td></tr></table></figure>
<h4 id="3、handlers"><a href="#3、handlers" class="headerlink" title="3、handlers"></a>3、handlers</h4><p>用于当关注的资源发生变化时采取一定的操作。<br>“notify”这个action可用于在每个play的最后被触发这样可以避免多次有改变发生时每次都执行指定的操作取而代之仅在所有的变化发生完成后一次性地执行指定操作。<br>在notify中列出的操作称为handler也即notify中调用 handler中定义的操作。 </p>
<p>注意：在 notify 中定义内容一定要和tasks中定义的 - name 内容一样，这样才能达到触发的效果，否则会不生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- name: template configuration file</div><div class="line">  template: src=template.j2 dest=/etc/foo.conf</div><div class="line">  notify:</div><div class="line">  - restart memcached</div><div class="line">  - restart apache</div><div class="line">handler是task列表这些task与前述的task并没有本质上的不同。</div><div class="line">handlers:</div><div class="line">  - name: restart memcached</div><div class="line">    service: name=memcached state=restarted</div><div class="line">  - name: restart apache</div><div class="line">    service: name=apache state=restarted</div></pre></td></tr></table></figure>
<h4 id="4、tags"><a href="#4、tags" class="headerlink" title="4、tags"></a>4、tags</h4><p>tags用于让用户选择运行或略过playbook中的部分代码。ansible具有幂等性因此会自动跳过没有变化的部分即便如此有些代码为测试其确实没有发生变化的时间依然会非常地长。<br>此时如果确信其没有变化就可以通过tags跳过此些代码片断。</p>
<h4 id="5、示例"><a href="#5、示例" class="headerlink" title="5、示例"></a>5、示例</h4><p>下面再给出一个安装httpd web服务的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># cat /etc/ansible/playbook/install_web.yml</div><div class="line">- hosts: webservers</div><div class="line">  remote_user: root</div><div class="line">  gather_fasks: False</div><div class="line">  vars:</div><div class="line">    packages: httpd</div><div class="line">  tasks:</div><div class="line">    - name: Install httpd</div><div class="line">      yum: name=&#123;&#123; packages &#125;&#125; state=present</div><div class="line">    - name: Cofiguration httpd</div><div class="line">      copy: src=/root/httpd.conf dest=/etc/httpd/conf/httpd.conf</div><div class="line">      tags: httpd_conf</div><div class="line">    notify:</div><div class="line">      - restart httpd</div><div class="line">    - name: Start httpd</div><div class="line">      service: name=httpd state=started enabled=no</div><div class="line">      tags: start</div><div class="line">    - name:Add centos user</div><div class="line">      user: name=&#123;&#123; item &#125;&#125; state=absent</div><div class="line">      tags: adduser</div><div class="line">      with_items:</div><div class="line">        - centos</div><div class="line">        - admin</div><div class="line">  handlers:</div><div class="line">    - name: restart httpd</div><div class="line">      service: name=httpd state=restart</div></pre></td></tr></table></figure>
<p>注：上面的代码没有考虑ubuntu平台，仅仅考虑centos/redhat平台。</p>
]]></content>
    
    <summary type="html">
    
      ansbile-playbook是一系统ansible命令的集合，其利用yaml 语言编写，运行过程，ansbile-playbook命令根据自上而下的顺序依次执行。同时，playbook开创了很多特性,它可以允许你传输某个命令的状态到后面的指令,如你可以从一台机器的文件中抓取内容并附为变量,然后在另一台机器中使用,这使得你可以实现一些复杂的部署机制,这是ansible命令无法实现的。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（七）常用模块</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_07/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_07/</id>
    <published>2016-10-22T02:37:16.000Z</published>
    <updated>2017-01-11T01:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里从官方分类的模块里选择最常用的一些模块进行介绍（commands模块上一篇已经介绍，这里不再提）。</p>
<h3 id="一、ping模块"><a href="#一、ping模块" class="headerlink" title="一、ping模块"></a>一、ping模块</h3><p>测试主机是否是通的，用法很简单，不涉及参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -m ping</div><div class="line">10.212.52.252 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: false,</div><div class="line">    &quot;ping&quot;: &quot;pong&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、setup模块"><a href="#二、setup模块" class="headerlink" title="二、setup模块"></a>二、setup模块</h3><p>setup模块，主要用于获取主机信息，在playbooks里经常会用到的一个参数gather_facts就与该模块相关。setup模块下经常使用的一个参数是filter参数，具体使用示例如下（由于输出结果较多，这里只列命令不写结果）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -m setup -a &apos;filter=ansible_*_mb&apos;   //查看主机内存信息</div><div class="line">[root@361way ~]# ansible 10.212.52.252 -m setup -a &apos;filter=ansible_eth[0-2]&apos;   //查看地接口为eth0-2的网卡信息</div><div class="line">[root@361way ~]# ansible all -m setup --tree /tmp/facts   //将所有主机的信息输入到/tmp/facts目录下，每台主机的信息输入到主机名文件中（/etc/ansible/hosts里的主机名）</div></pre></td></tr></table></figure>
<h3 id="三、file模块"><a href="#三、file模块" class="headerlink" title="三、file模块"></a>三、file模块</h3><p>file模块主要用于远程主机上的文件操作，file模块包含如下选项： </p>
<ul>
<li>force：需要在两种情况下强制创建软链接，一种是源文件不存在但之后会建立的情况下；另一种是目标软链接已存在,需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no </li>
<li>group：定义文件/目录的属组 </li>
<li>mode：定义文件/目录的权限</li>
<li>owner：定义文件/目录的属主</li>
<li>path：必选项，定义文件/目录的路径</li>
<li>recurse：递归的设置文件的属性，只对目录有效</li>
<li>src：要被链接的源文件的路径，只应用于state=link的情况</li>
<li>dest：被链接到的路径，只应用于state=link的情况 </li>
<li>state：  directory：如果目录不存在，创建目录<br>file：即使文件不存在，也不会被创建<br>link：创建软链接<br>hard：创建硬链接<br>touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间<br>absent：删除目录、文件或者取消链接文件</li>
</ul>
<p>使用示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ansible test -m file -a &quot;src=/etc/fstab dest=/tmp/fstab state=link&quot;</div><div class="line">ansible test -m file -a &quot;path=/tmp/fstab state=absent&quot;</div><div class="line">ansible test -m file -a &quot;path=/tmp/test state=touch&quot;</div></pre></td></tr></table></figure>
<h3 id="四、copy模块"><a href="#四、copy模块" class="headerlink" title="四、copy模块"></a>四、copy模块</h3><p>复制文件到远程主机，copy模块包含如下选项：</p>
<ul>
<li>backup：在覆盖之前将原文件备份，备份文件包含时间信息。有两个选项：yes|no </li>
<li>content：用于替代”src”,可以直接设定指定文件的值 </li>
<li>dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录 </li>
<li>directory_mode：递归的设定目录的权限，默认为系统默认权限</li>
<li>force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes</li>
<li>others：所有的file模块里的选项都可以在这里使用</li>
<li>src：要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用”/“来结尾，则只复制目录里的内容，如果没有使用”/“来结尾，则包含目录在内的整个内容全部复制，类似于rsync。 </li>
<li>validate ：The validation command to run before copying into place. The path to the file to validate is passed in via ‘%s’ which must be present as in the visudo example below.</li>
</ul>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ansible test -m copy -a &quot;src=/srv/myfiles/foo.conf dest=/etc/foo.conf owner=foo group=foo mode=0644&quot;</div><div class="line">ansible test -m copy -a &quot;src=/mine/ntp.conf dest=/etc/ntp.conf owner=root group=root mode=644 backup=yes&quot;</div><div class="line">ansible test -m copy -a &quot;src=/mine/sudoers dest=/etc/sudoers validate=&apos;visudo -cf %s&apos;&quot;</div></pre></td></tr></table></figure>
<h3 id="五、service模块"><a href="#五、service模块" class="headerlink" title="五、service模块"></a>五、service模块</h3><p>用于管理服务<br>该模块包含如下选项： </p>
<p>arguments：给命令行提供一些选项 </p>
<p>enabled：是否开机启动 yes|no</p>
<p>name：必选项，服务名称 </p>
<p>pattern：定义一个模式，如果通过status指令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务依然在运行</p>
<p>runlevel：运行级别</p>
<p>sleep：如果执行了restarted，在则stop和start之间沉睡几秒钟</p>
<p>state：对当前服务执行启动，停止、重启、重新加载等操作（started,stopped,restarted,reloaded）</p>
<p>使用示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Example action to reload service httpd, in all cases</div><div class="line">- service: name=httpd state=reloaded</div><div class="line"># Example action to enable service httpd, and not touch the running state</div><div class="line">- service: name=httpd enabled=yes</div><div class="line"># Example action to start service foo, based on running process /usr/bin/foo</div><div class="line">- service: name=foo pattern=/usr/bin/foo state=started</div><div class="line"># Example action to restart network service for interface eth0</div><div class="line">- service: name=network state=restarted args=eth0</div></pre></td></tr></table></figure>
<h3 id="六、cron模块"><a href="#六、cron模块" class="headerlink" title="六、cron模块"></a>六、cron模块</h3><ul>
<li>用于管理计划任务<br>包含如下选项： </li>
<li>backup：对远程主机上的原任务计划内容修改之前做备份 </li>
<li>cron_file：如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户的任务计划 </li>
<li>day：日（1-31，<em>，</em>/2,……） </li>
<li>hour：小时（0-23，<em>，</em>/2，……）  </li>
<li>minute：分钟（0-59，<em>，</em>/2，……） </li>
<li>month：月（1-12，<em>，</em>/2，……） </li>
<li>weekday：周（0-7，*，……）</li>
<li>job：要执行的任务，依赖于state=present </li>
<li>name：该任务的描述 </li>
<li>special_time：指定什么时候执行，参数：reboot,yearly,annually,monthly,weekly,daily,hourly </li>
<li>state：确认该任务计划是创建还是删除 </li>
<li>user：以哪个用户的身份执行</li>
</ul>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ansible test -m cron -a &apos;name=&quot;a job for reboot&quot; special_time=reboot job=&quot;/some/job.sh&quot;&apos;</div><div class="line">ansible test -m cron -a &apos;name=&quot;yum autoupdate&quot; weekday=&quot;2&quot; minute=0 hour=12 user=&quot;root</div><div class="line">ansible 10.212.52.252 -m cron  -a &apos;backup=&quot;True&quot; name=&quot;test&quot; minute=&quot;0&quot; hour=&quot;2&quot; job=&quot;ls -alh &gt; /dev/null&quot;&apos;</div><div class="line">ansilbe test -m cron -a &apos;cron_file=ansible_yum-autoupdate state=absent&apos;</div></pre></td></tr></table></figure>
<h3 id="七、yum模块"><a href="#七、yum模块" class="headerlink" title="七、yum模块"></a>七、yum模块</h3><p>使用yum包管理器来管理软件包，其选项有： </p>
<ul>
<li>config_file：yum的配置文件 </li>
<li>disable_gpg_check：关闭gpg_check </li>
<li>disablerepo：不启用某个源 </li>
<li>enablerepo：启用某个源</li>
<li>name：要进行操作的软件包的名字，也可以传递一个url或者一个本地的rpm包的路径 </li>
<li>state：状态（present，absent，latest）</li>
</ul>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ansible test -m yum -a &apos;name=httpd state=latest&apos;</div><div class="line">ansible test -m yum -a &apos;name=&quot;@Development tools&quot; state=present&apos;</div><div class="line">ansible test -m yum -a &apos;name=http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm state=present&apos;</div></pre></td></tr></table></figure>
<h3 id="八、user模块与group模块"><a href="#八、user模块与group模块" class="headerlink" title="八、user模块与group模块"></a>八、user模块与group模块</h3><p>user模块是请求的是useradd, userdel, usermod三个指令，goup模块请求的是groupadd, groupdel, groupmod 三个指令，具体参数这里不再细讲，直接上示例。</p>
<h4 id="1、user模块示例："><a href="#1、user模块示例：" class="headerlink" title="1、user模块示例："></a>1、user模块示例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- user: name=johnd comment=&quot;John Doe&quot; uid=1040 group=admin</div><div class="line">- user: name=james shell=/bin/bash groups=admins,developers append=yes</div><div class="line">- user: name=johnd state=absent remove=yes</div><div class="line">- user: name=james18 shell=/bin/zsh groups=developers expires=1422403387</div><div class="line">#生成密钥时，只会生成公钥文件和私钥文件，和直接使用ssh-keygen指令效果相同，不会生成authorized_keys文件。</div><div class="line">- user: name=test generate_ssh_key=yes ssh_key_bits=2048 ssh_key_file=.ssh/id_rsa</div></pre></td></tr></table></figure>
<p>注：指定password参数时，不能使用后面这一串密码会被直接传送到被管理主机的/etc/shadow文件中，所以需要先将密码字符串进行加密处理。然后将得到的字符串放到password中即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]#  openssl passwd -1 -salt $(&lt; /dev/urandom tr -dc &apos;[:alnum:]&apos; | head -c 32)</div><div class="line">Password:</div><div class="line">$1$YngB4z8s$atSVltYKnDxJmWZ3s.4/80</div><div class="line">或者</div><div class="line">[root@361way ~]# echo &quot;123456&quot; | openssl passwd -1 -salt $(&lt; /dev/urandom tr -dc &apos;[:alnum:]&apos; | head -c 32) -stdin</div><div class="line">$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0</div><div class="line">#经验证下面生成的密码串也可以正常使用，不过与/etc/shadow的格式不统一，不建议使用</div><div class="line">[root@361way ~]# openssl passwd -salt -1 &quot;123456&quot;</div><div class="line">-1yEWqqJQLC66</div><div class="line">#使用上面的密码创建用户</div><div class="line">[root@361way ~]#ansible all -m user -a &apos;name=foo password=&quot;$1$4P4PlFuE$ur9ObJiT5iHNrb9QnjaIB0&quot;&apos;</div></pre></td></tr></table></figure>
<p>不同的发行版默认使用的加密方式可能会有区别，具体可以查看/etc/login.defs文件确认，centos 6.5版本使用的是SHA512加密算法，生成密码可以通过ansible官方给出的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c &quot;from passlib.hash import sha512_crypt; import getpass; print sha512_crypt.encrypt(getpass.getpass())&quot;</div></pre></td></tr></table></figure>
<h4 id="2、group示例"><a href="#2、group示例" class="headerlink" title="2、group示例"></a>2、group示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- group: name=somegroup state=present</div></pre></td></tr></table></figure>
<p>九、synchronize模块</p>
<p>使用rsync同步文件，其参数如下：</p>
<ul>
<li>archive: 归档，相当于同时开启recursive(递归)、links、perms、times、owner、group、-D选项都为yes ，默认该项为开启</li>
<li>checksum: 跳过检测sum值，默认关闭</li>
<li>compress:是否开启压缩</li>
<li>copy_links：复制链接文件，默认为no ，注意后面还有一个links参数</li>
<li>delete: 删除不存在的文件，默认no</li>
<li>dest：目录路径</li>
<li>dest_port：默认目录主机上的端口 ，默认是22，走的ssh协议</li>
<li>dirs：传速目录不进行递归，默认为no，即进行目录递归</li>
<li>rsync_opts：rsync参数部分</li>
<li>set_remote_user：主要用于/etc/ansible/hosts中定义或默认使用的用户与rsync使用的用户不同的情况</li>
<li>mode: push或pull 模块，push模的话，一般用于从本机向远程主机上传文件，pull 模式用于从远程主机上取文件</li>
</ul>
<p>另外还有其他参数，这里不再一一说明。上几个用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">src=some/relative/path dest=/some/absolute/path rsync_path=&quot;sudo rsync&quot;</div><div class="line">src=some/relative/path dest=/some/absolute/path archive=no links=yes</div><div class="line">src=some/relative/path dest=/some/absolute/path checksum=yes times=no</div><div class="line">src=/tmp/helloworld dest=/var/www/helloword rsync_opts=--no-motd,--exclude=.git mode=pull</div></pre></td></tr></table></figure>
<h3 id="十、mount模块"><a href="#十、mount模块" class="headerlink" title="十、mount模块"></a>十、mount模块</h3><ul>
<li>配置挂载点<br>选项： </li>
<li>dump<br>fstype：必选项，挂载文件的类型 </li>
<li>name：必选项，挂载点 </li>
<li>opts：传递给mount命令的参数</li>
<li>src：必选项，要挂载的文件 </li>
<li>state：必选项 present：只处理fstab中的配置 absent：删除挂载点 mounted：自动创建挂载点并挂载之 umounted：卸载</li>
</ul>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">name=/mnt/dvd src=/dev/sr0 fstype=iso9660 opts=ro state=present</div><div class="line">name=/srv/disk src=&apos;LABEL=SOME_LABEL&apos; state=present</div><div class="line">name=/home src=&apos;UUID=b3e48f45-f933-4c8e-a700-22a159ec9077&apos; opts=noatime state=present</div><div class="line">ansible test -a &apos;dd if=/dev/zero of=/disk.img bs=4k count=1024&apos;</div><div class="line">ansible test -a &apos;losetup /dev/loop0 /disk.img&apos;</div><div class="line">ansible test -m filesystem &apos;fstype=ext4 force=yes opts=-F dev=/dev/loop0&apos;</div><div class="line">ansible test -m mount &apos;name=/mnt src=/dev/loop0 fstype=ext4 state=mounted opts=rw&apos;</div></pre></td></tr></table></figure>
<h3 id="十一、get-url-模块"><a href="#十一、get-url-模块" class="headerlink" title="十一、get_url 模块"></a>十一、get_url 模块</h3><p>该模块主要用于从http、ftp、https服务器上下载文件（类似于wget），主要有如下选项：</p>
<p>sha256sum：下载完成后进行sha256 check；</p>
<p>timeout：下载超时时间，默认10s</p>
<p>url：下载的URL</p>
<p>url_password、url_username：主要用于需要用户名密码进行验证的情况</p>
<p>use_proxy：是事使用代理，代理需事先在环境变更中定义</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- name: download foo.conf</div><div class="line">  get_url: url=http://example.com/path/file.conf dest=/etc/foo.conf mode=0440</div><div class="line">- name: download file with sha256 check  get_url: url=http://example.com/path/file.conf</div><div class="line">  dest=/etc/foo.conf sha256sum=b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c</div></pre></td></tr></table></figure>
<p>模块部分就先介绍到这里吧，官方提供的可能用到模块有git、svn版本控制模块，sysctl 、authorized_key_module系统模块，apt、zypper、pip、gem包管理模块，find、template文件模块，mysql_db、redis数据库模块，url 网络模块等。具体可以参看<a href="http://docs.ansible.com/modules_by_category.html" target="_blank" rel="external">官方手册模块部分</a>。</p>
]]></content>
    
    <summary type="html">
    
      本篇承接上篇介绍下常用的模块。根据官方的分类，将模块按功能分类为：云模块、命令模块、数据库模块、文件模块、资产模块、消息模块、监控模块、网络模块、通知模块、包管理模块、源码控制模块、系统模块、单元模块、web设施模块、windows模块 ，具体可以参看[官方页面](http://docs.ansible.com/list_of_all_modules.html)。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（六）Ad-hoc与commands模块</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_06/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_06/</id>
    <published>2016-10-22T02:35:16.000Z</published>
    <updated>2017-01-11T01:39:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Ad-hoc"><a href="#一、Ad-hoc" class="headerlink" title="一、Ad-hoc"></a>一、Ad-hoc</h3><h4 id="1、直接执行"><a href="#1、直接执行" class="headerlink" title="1、直接执行"></a>1、直接执行</h4><p>这里还是先来一个上几篇幅经常用到的一个例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -a &apos;uptime&apos; -kSSH password:10.212.52.252 | success | rc=0 &gt;&gt; 10:10am  up 27 days 19:33,  2 users,  load average: 0.39, 0.34, 0.33</div></pre></td></tr></table></figure>
<p>一个ad-hoc命令的执行，需要按以下格式进行执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible 主机或组  -m 模块名 -a &apos;模块参数&apos;  ansible参数</div></pre></td></tr></table></figure>
<ul>
<li>主机和组，是在/etc/ansible/hosts 里进行指定的部分，当然动态Inventory 使用的是脚本从外部应用里获取的主机，这部分具体可以参考<a href="http://www.361way.com/ansible-dynamic-inventory/4403.html" target="_blank" rel="external">ansible小结（五）Dynamic Inventory </a>；</li>
<li>模块名，可以通过ansible-doc -l 查看目前安装的模块，默认不指定时，使用的是command模块，具体可以查看/etc/ansible/ansible.cfg 的“#module_name = command ” 部分，默认模块可以在该配置文件中进行修改；</li>
<li>模块参数，可以通过 “ansible-doc 模块名” 查看具体的用法及后面的参数；</li>
<li>ansible参数，可以通过ansible命令的帮忙信息里查看到，这里有很多参数可以供选择，如是否需要输入密码、是否sudo等。</li>
</ul>
<h4 id="2、后台执行"><a href="#2、后台执行" class="headerlink" title="2、后台执行"></a>2、后台执行</h4><p>当命令执行时间比较长时，也可以放到后台执行，这里会用到-B、-P参数，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible all -B 3600 -a &quot;/usr/bin/long_running_operation --do-stuff&quot; \\后台执行命令 3600s，-B 表示后台执行的时间ansible all -m async_status -a &quot;jid=123456789&quot;  \\检查任务的状态ansible all -B 1800 -P 60 -a &quot;/usr/bin/long_running_operation --do-stuff&quot; \\后台执行命令最大时间是 1800s 即 30 分钟，-P 每 60s 检查下状态默认 15s</div></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -B 3600 -P 0 -a &apos;watch ls&apos;background launch...10.212.52.252 | success &gt;&gt; &#123;    &quot;ansible_job_id&quot;: &quot;411650646689.13501&quot;,    &quot;results_file&quot;: &quot;/root/.ansible_async/411650646689.13501&quot;,    &quot;started&quot;: 1&#125;[root@361way ~]# ansible 10.212.52.252 -m async_status -a &apos;jid=411650646689.13501&apos;10.212.52.252 | success &gt;&gt; &#123;    &quot;ansible_job_id&quot;: &quot;411650646689.13501&quot;,    &quot;changed&quot;: false,    &quot;finished&quot;: 0,    &quot;results_file&quot;: &quot;/root/.ansible_async/411650646689.13501&quot;,    &quot;started&quot;: 1&#125;</div></pre></td></tr></table></figure>
<p>不指定-P或-P参数为非0时，该任务就会按-P直接的参数一直刷新下去，直到超出-B参数指定的时间或命令执行完成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -B 3600  -a &apos;watch ls&apos;background launch...10.212.52.252 | success &gt;&gt; &#123;    &quot;ansible_job_id&quot;: &quot;397200656414.15008&quot;,    &quot;results_file&quot;: &quot;/root/.ansible_async/397200656414.15008&quot;,    &quot;started&quot;: 1&#125;10.212.52.252 | success &gt;&gt; &#123;    &quot;ansible_job_id&quot;: &quot;397200656414.15008&quot;,    &quot;changed&quot;: false,    &quot;finished&quot;: 0,    &quot;results_file&quot;: &quot;/root/.ansible_async/397200656414.15008&quot;,    &quot;started&quot;: 1&#125;&lt;job 397200656414.15008&gt; polling on 10.212.52.252, 3585s remaining…………………………………………略</div></pre></td></tr></table></figure>
<h3 id="二、commands模块"><a href="#二、commands模块" class="headerlink" title="二、commands模块"></a>二、commands模块</h3><p>上面已经提到，ansbile自身已经自带了很多模块，可以通过ansible-doc -l 进行查看。这里就结合command、shell、raw、script模块了解下其用法。</p>
<p>上面四个模块都属于<a href="http://docs.ansible.com/list_of_commands_modules.html" target="_blank" rel="external">commands 类</a>。</p>
<ul>
<li><a href="http://docs.ansible.com/command_module.html" target="_blank" rel="external">command模块</a>，该模块通过-a跟上要执行的命令可以直接执行，不过命令里如果有带有如下字符部分则执行不成功 “ so variables like $HOME and operations like “&lt;”, “&gt;”, “|”, and “&amp;” will not work (use the shell module if you need these features).”；</li>
<li><a href="http://docs.ansible.com/shell_module.html" target="_blank" rel="external">shell 模块</a>，用法其本和command一样，不过的是其是通过/bin/sh进行执行，所以shell 模块可以执行任何命令，就像在本机执行一样，“ It is almost exactly like the command module but runs the command through a shell (/bin/sh) on the remote node.”；</li>
<li><a href="http://docs.ansible.com/raw_module.html" target="_blank" rel="external">raw模块</a>，用法和shell 模块一样 ，其也可以执行任意命令，就像在本机执行一样，“Executes a low-down and dirty SSH command, not going through the module subsystem. There is no change handler support for this module. This module does not require python on the remote system”</li>
<li><a href="http://docs.ansible.com/script_module.html" target="_blank" rel="external">script模块</a>，其是将管理端的shell 在被管理主机上执行，其原理是先将shell 复制到远程主机，再在远程主机上执行，原理类似于raw模块，“This module does not require python on the remote system, much like the raw module.” 。</li>
</ul>
<p>注：raw模块和comand、shell 模块不同的是其没有chdir、creates、removes参数，chdir参数的作用就是先切到chdir指定的目录后，再执行后面的命令，这在后面很多模块里都会有该参数 。</p>
<p>command模块包含如下选项： </p>
<ul>
<li>creates：一个文件名，当该文件存在，则该命令不执行 </li>
<li>free_form：要执行的linux指令 </li>
<li>chdir：在执行指令之前，先切换到该指定的目录 </li>
<li>removes：一个文件名，当该文件不存在，则该选项不执行</li>
<li>executable：切换shell来执行指令，该执行路径必须是一个绝对路径</li>
</ul>
<p><strong>command模块、raw模块、shell模块示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -m command -a &apos;ps auxf|grep snmp&apos;</div><div class="line">10.212.52.252 | FAILED | rc=1 &gt;&gt;</div><div class="line">ERROR: Unsupported option (BSD syntax)</div><div class="line">********* simple selection *********  ********* selection by list *********</div><div class="line">-A all processes                      -C by command name</div><div class="line">-N negate selection                   -G by real group ID (supports names)</div><div class="line">-a all w/ tty except session leaders  -U by real user ID (supports names)</div><div class="line">-d all except session leaders         -g by session OR by effective group name</div><div class="line">-e all processes                      -p by process ID</div><div class="line">T  all processes on this terminal     -s processes in the sessions given</div><div class="line">a  all w/ tty, including other users  -t by tty</div><div class="line">g  OBSOLETE -- DO NOT USE             -u by effective user ID (supports names)</div><div class="line">r  only running processes             U  processes for specified users</div><div class="line">x  processes w/o controlling ttys     t  by tty</div><div class="line">*********** output format **********  *********** long options ***********</div><div class="line">-o,o user-defined  -f full            --Group --User --pid --cols --ppid</div><div class="line">-j,j job control   s  signal          --group --user --sid --rows --info</div><div class="line">-O,O preloaded -o  v  virtual memory  --cumulative --format --deselect</div><div class="line">-l,l long          u  user-oriented   --sort --tty --forest --version</div><div class="line">-F   extra full    X  registers       --heading --no-heading --context</div><div class="line">                    ********* misc options *********</div><div class="line">-V,V  show version      L  list format codes  f  ASCII art forest</div><div class="line">-m,m,-L,-T,H  threads   S  children in sum    -y change -l format</div><div class="line">-M,Z  security data     c  true command name  -c scheduling class</div><div class="line">-w,w  wide output       n  numeric WCHAN,UID  -H process hierarchy</div><div class="line">[root@361way ~]# ansible 10.212.52.252 -m raw -a &apos;ps auxf|grep snmp&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line">root      5580 25.0  0.0  12876  1792 pts/2    Ss+  12:36   0:00      \_ bash -c ps auxf|grep snmp</div><div class="line">root      5607  0.0  0.0   5720   832 pts/2    S+   12:36   0:00          \_ grep snmp</div><div class="line">root     24364  0.0  0.0  70416  6696 ?        SNl  May15   0:22 /usr/sbin/snmpd -r -A -LF i /var/log/net-snmpd.log -p /var/run/snmpd.pid</div><div class="line">[root@361way ~]# ansible 10.212.52.252 -m shell -a &apos;ps auxf|grep snmp&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line">root      5803  0.0  0.0  11308  1308 pts/2    S+   12:36   0:00              \_ /bin/sh -c ps auxf|grep snmp</div><div class="line">root      5805  0.0  0.0   4260   572 pts/2    S+   12:36   0:00                  \_ grep snmp</div><div class="line">root     24364  0.0  0.0  70416  6696 ?        SNl  May15   0:22 /usr/sbin/snmpd -r -A -LF i /var/log/net-snmpd.log -p /var/run/snmpd.pid</div></pre></td></tr></table></figure>
<p>上面的执行结果可以看到，我这里加了管道，command模块执行时出错，而使用raw模块和shell 模块都正常。</p>
<p><strong>使用chdir的示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -m command -a &apos;chdir=/tmp/361way touch test.file&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line">[root@361way ~]# ansible 10.212.52.252 -m shell -a &apos;chdir=/tmp/361way touch test2.file&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line">[root@361way ~]# ansible 10.212.52.252 -m raw -a &apos;chdir=/tmp/361way touch test3.file&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div></pre></td></tr></table></figure>
<p>从上面执行结果来看，三个命令都执行成功了。不过通过在远程主机上查看，前两个文件被成功创建：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">linux-wdh1:/tmp/361way # ls /tmp/361way</div><div class="line">test.file  test2.file</div></pre></td></tr></table></figure>
<p>使用raw模块的执行的结果文件也被正常创建了，不过不是在chdir 指定的目录，而是在当前执行用户的家目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">linux-wdh1:~ # ls ~/test3.file</div><div class="line">/root/test3.file</div></pre></td></tr></table></figure>
<p><strong>creates与removes示例：</strong></p>
<p>这里我在测试主机上创建/tmp/361way/server.txt文件，执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -a &apos;creates=/tmp/361way/server.txt uptime&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line">skipped, since /tmp/361way/server.txt exists</div><div class="line">[root@361way ~]# ansible 10.212.52.252 -a &apos;removes=/tmp/361way/server.txt uptime&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line"> 15:11pm  up 28 days  0:34,  2 users,  load average: 0.75, 0.46, 0.39</div></pre></td></tr></table></figure>
<p><strong>script模块示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# cat script.sh</div><div class="line">#!/bin/bash</div><div class="line">df -hl</div><div class="line">ifconfig</div><div class="line">ps auxf|grep snmp</div><div class="line">[root@361way ~]# ansible 10.212.52.252 -m script -a &apos;scrip.sh&apos;</div><div class="line">10.212.52.252 | FAILED =&gt; file or module does not exist: /root/scrip.sh</div><div class="line">[root@361way ~]# ansible 10.212.52.252 -m script -a &apos;script.sh&apos;</div><div class="line">10.212.52.252 | success &gt;&gt; &#123;</div><div class="line">    &quot;changed&quot;: true,</div><div class="line">    &quot;rc&quot;: 0,</div><div class="line">    &quot;stderr&quot;: &quot;OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013\ndebug1: Reading configuration data /etc/ssh/ssh_config\r\ndebug1: Applying options for *\r\ndebug1: auto-mux: Trying existing master\r\nControl socket connect(/root/.ansible/cp/ansible-ssh-10.212.52.252-22-root): Connection refused\r\ndebug1: Connecting to 10.212.52.252 [10.212.52.252] port 22.\r\ndebug1: fd 3 clearing O_NONBLOCK\r\ndebug1: Connection established.\r\ndebug1: permanently_set_uid: 0/0\r\ndebug1: identity file /root/.ssh/identity type -1\r\ndebug1: identity file /root/.ssh/identity-cert type -1\r\ndebug1: identity file /root/.ssh/id_rsa type -1\r\ndebug1: identity file /root/.ssh/id_rsa-cert type -1\r\ndebug1: identity file /root/.ssh/id_dsa type -1\r\ndebug1: identity file /root/.ssh/id_dsa-cert type -1\r\ndebug1: identity file /root/.ssh/id_ecdsa type -1\r\ndebug1: identity file /root/.ssh/id_ecdsa-cert type -1\r\ndebug1: Remote protocol version 2.0, remote software version OpenSSH_6.2\r\ndebug1: match: OpenSSH_6.2 pat OpenSSH*\r\ndebug1: Enabling compatibility mode for protocol 2.0\r\ndebug1: Local version string SSH-2.0-OpenSSH_5.3\r\ndebug1: SSH2_MSG_KEXINIT sent\r\ndebug1: SSH2_MSG_KEXINIT received\r\ndebug1: kex: server-&gt;client aes128-ctr hmac-md5 zlib@openssh.com\r\ndebug1: kex: client-&gt;server aes128-ctr hmac-md5 zlib@openssh.com\r\ndebug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent\r\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP\r\ndebug1: SSH2_MSG_KEX_DH_GEX_INIT sent\r\ndebug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY\r\ndebug1: Host &apos;10.212.52.252&apos; is known and matches the RSA host key.\r\ndebug1: Found key in /root/.ssh/known_hosts:1\r\ndebug1: ssh_rsa_verify: signature correct\r\ndebug1: SSH2_MSG_NEWKEYS sent\r\ndebug1: expecting SSH2_MSG_NEWKEYS\r\ndebug1: SSH2_MSG_NEWKEYS received\r\ndebug1: SSH2_MSG_SERVICE_REQUEST sent\r\ndebug1: SSH2_MSG_SERVICE_ACCEPT received\r\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\r\ndebug1: Next authentication method: keyboard-interactive\r\ndebug1: Enabling compression at level 6.\r\ndebug1: Authentication succeeded (keyboard-interactive).\r\ndebug1: setting up multiplex master socket\r\nControlSocket /root/.ansible/cp/ansible-ssh-10.212.52.252-22-root already exists, disabling multiplexing\r\ndebug1: channel 0: new [client-session]\r\ndebug1: Requesting no-more-sessions@openssh.com\r\ndebug1: Entering interactive session.\r\ndebug1: Sending environment.\r\ndebug1: Sending env LANG = en_US.UTF-8\r\ndebug1: Sending command: LANG=C LC_CTYPE=C /root/.ansible/tmp/ansible-tmp-1431924855.88-242473611260231/script.sh \r\ndebug1: client_input_channel_req: channel 0 rtype exit-status reply 0\r\ndebug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0\r\ndebug1: channel 0: free: client-session, nchannels 1\r\ndebug1: fd 1 clearing O_NONBLOCK\r\ndebug1: fd 2 clearing O_NONBLOCK\r\nConnection to 10.212.52.252 closed.\r\nTransferred: sent 1928, received 3920 bytes, in 0.1 seconds\r\nBytes per second: sent 37017.0, received 75262.7\r\ndebug1: Exit status 0\r\ndebug1: compress outgoing: raw data 537, compressed 375, factor 0.70\r\ndebug1: compress incoming: raw data 1837, compressed 1019, factor 0.55\r\n&quot;,</div><div class="line">    &quot;stdout&quot;: &quot;Filesystem      Size  Used Avail Use% Mounted on\r\n/dev/sda2       9.9G  872M  8.5G  10% /\r\nudev            3.9G  128K  3.9G   1% /dev\r\ntmpfs           3.9G   76K  3.9G   1% /dev/shm\r\n/dev/sda3       5.0G  219M  4.5G   5% /boot\r\n/dev/sda8        40G   15G   23G  40% /home\r\n/dev/sda9       9.9G  5.2G  4.3G  55% /opt\r\n/dev/sda6       5.0G  2.7G  2.1G  57% /tmp\r\n/dev/sda5       9.9G  3.4G  6.0G  36% /usr\r\n/dev/sda7       9.9G  823M  8.6G   9% /var\r\neth0      Link encap:Ethernet  HWaddr 00:50:56:A8:65:7E  \r\n          inet addr:10.212.52.252  Bcast:10.212.52.255  Mask:255.255.255.0\r\n          inet6 addr: fe80::250:56ff:fea8:657e/64 Scope:Link\r\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\r\n          RX packets:24112135 errors:0 dropped:792372 overruns:0 frame:0\r\n          TX packets:10697339 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:1000 \r\n          RX bytes:17137233328 (16343.3 Mb)  TX bytes:13390377826 (12770.0 Mb)\r\n\r\nlo        Link encap:Local Loopback  \r\n          inet addr:127.0.0.1  Mask:255.0.0.0\r\n          inet6 addr: ::1/128 Scope:Host\r\n          UP LOOPBACK RUNNING  MTU:16436  Metric:1\r\n          RX packets:3407332 errors:0 dropped:0 overruns:0 frame:0\r\n          TX packets:3407332 errors:0 dropped:0 overruns:0 carrier:0\r\n          collisions:0 txqueuelen:0 \r\n          RX bytes:262675450 (250.5 Mb)  TX bytes:262675450 (250.5 Mb)\r\n\r\nroot     25332  0.0  0.0   4260   568 pts/2    S+   12:54   0:00          \\_ grep snmp\r\nroot     24364  0.0  0.0  70416  6696 ?        SNl  May15   0:22 /usr/sbin/snmpd -r -A -LF i /var/log/net-snmpd.log -p /var/run/snmpd.pid\r\n&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果很多，看起来也很乱，不过查下stdout部分，这个部分是实际上执行后的结果。这里可以配合管道一起使用，可以如下使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@361way ~]# ansible 10.212.52.252 -m script -a &apos;script.sh&apos; |egrep &apos;&gt;&gt;|stdout&apos;</div></pre></td></tr></table></figure>
<p>篇幅所限，本来想把常用模块都放在该篇来写，感觉太冗长，后面再单独分开相应的篇幅做模块的介绍。</p>
]]></content>
    
    <summary type="html">
    
      Ad-Hoc 是指ansible下临时执行的一条命令，并且不需要保存的命令，对于复杂的命令后面会说playbook。讲到Ad-hoc 就要提到模块，所有的命令执行都要依赖于事先写好的模块，默认安装好的ansible 里面已经自带了很多模块，如：command、raw、shell、file、cron等，具体可以通过ansible-doc -l 进行查看 。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（五）Dynamic Inventory</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_05/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_05/</id>
    <published>2016-10-22T02:32:16.000Z</published>
    <updated>2017-01-11T01:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible Inventory实际上是包含静态Inventory和动态Inventory两部分，静态Inventory指的是在文件/etc/ansible/hosts中指定的主机和组，Dynamic Inventory指通过外部脚本获取主机列表，并按照ansible 所要求的格式返回给ansilbe命令的。这部分一般会结合CMDB资管系统、zabbix 监控系统、crobble安装系统、云计算平台等获取主机信息。由于主机资源一般会动态的进行增减，而这些系统一般会智能更新。我们可以通过这些工具提供的API 或者接入库查询等方式返回主机列表。</p>
<h3 id="一、最简单示例"><a href="#一、最简单示例" class="headerlink" title="一、最简单示例"></a>一、最简单示例</h3><p>由于Ansible在接受脚本动态获取主机信息时支持的是json格式，这里我也不从其他系统中取了，向通过一段代码打印一个段json格式的主机信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding=utf-8</div><div class="line">import json</div><div class="line">host1ip = [&apos;10.212.52.252&apos;,&apos;10.212.52.14&apos;]</div><div class="line">host2ip = [&apos;10.212.52.16&apos;]</div><div class="line">group = &apos;test1&apos;</div><div class="line">group2 = &apos;test2&apos;</div><div class="line">hostdata = &#123;group:&#123;&quot;hosts&quot;:host1ip&#125;,group2:&#123;&quot;hosts&quot;:host2ip&#125;&#125;</div><div class="line">print json.dumps(hostdata,indent=4)</div></pre></td></tr></table></figure>
<p>注：</p>
<p>1、主机部分必须是列表格式的；</p>
<p>2、hostdata行，其中的”hosts” 部分可以省略，但如果使用时，必须是”hosts” ，不能是其他如‘‘hostlist’’ 等字符串。</p>
<p>省略后可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hostdata = &#123;group:host1ip,group2:host2ip&#125;</div></pre></td></tr></table></figure>
<p>直接执行该段代码结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# python twogroup.py</div><div class="line">&#123;</div><div class="line">    &quot;test1&quot;: &#123;</div><div class="line">        &quot;hosts&quot;: [</div><div class="line">            &quot;10.212.52.252&quot;,</div><div class="line">            &quot;10.212.52.14&quot;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;test2&quot;: &#123;</div><div class="line">        &quot;hosts&quot;: [</div><div class="line">            &quot;10.212.52.16&quot;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面定义了两个主机组，test1组内包含主机10.212.52.252、10.212.52.14，test2组内包含主机10.212.52.16 。ansible可以通过如下方法调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# ansible -i twogroup.py test1 -m command -a &apos;uptime&apos; -k</div><div class="line">SSH password:</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line"> 23:01pm  up 24 days  8:24,  2 users,  load average: 0.21, 0.35, 0.39</div><div class="line">10.212.52.14 | success | rc=0 &gt;&gt;</div><div class="line"> 23:08pm  up 332 days  5:23,  2 users,  load average: 0.00, 0.01, 0.05</div><div class="line">[root@361way.com ~]# ansible -i twogroup.py test2 -m command -a &apos;uptime&apos; -k</div><div class="line">SSH password:</div><div class="line">10.212.52.16 | success | rc=0 &gt;&gt;</div><div class="line"> 23:09pm  up 332 days  6:00,  2 users,  load average: 0.08, 0.06, 0.05</div></pre></td></tr></table></figure>
<h3 id="二、复杂示例"><a href="#二、复杂示例" class="headerlink" title="二、复杂示例"></a>二、复杂示例</h3><p>在静态主机配置文件示例中，会有组变量（vars），组之间的包含，如下图（点击图片看大图）：</p>
<p><a href="http://www.361way.com/wp-content/uploads/2015/05/ansible-host-static.jpg" target="_blank" rel="external"><img src="http://www.361way.com/wp-content/uploads/2015/05/ansible-host-static-188x300.jpg" alt="ansible-host-static"></a></p>
<p>如果以上部分想要，通过脚本获取实现，实现后返回的json格式应该如下图：</p>
<p><a href="http://www.361way.com/wp-content/uploads/2015/05/ansible-hosts-json.jpg" target="_blank" rel="external"><img src="http://www.361way.com/wp-content/uploads/2015/05/ansible-hosts-json-1024x574.jpg" alt="ansible-hosts-json"></a></p>
<p>像上面这种复杂的返回格式，一般不会用在ad-hoc环境中，多数会用在ansible-playbook 中，应为playbook文件中有时假会涉及到vars 参数的传参。</p>
<h3 id="三、从第三方平台获取主机示例"><a href="#三、从第三方平台获取主机示例" class="headerlink" title="三、从第三方平台获取主机示例"></a>三、从第三方平台获取主机示例</h3><p>这个在本篇一开头就提到了，我们从如cobbler、cmdb等平台上获取的示例。由于ansible 的发起者（作者）同时又是cobbler软件的创建者，所以官方文档给了我们cobbler的示例，同时给出了一个从AWS 去上获取主机信息的示例 。如下：</p>
<p><a href="https://raw.githubusercontent.com/ansible/ansible/devel/plugins/inventory/cobbler.py" target="_blank" rel="external">cobbler 上获取主机信息代码</a></p>
<p><a href="https://raw.githubusercontent.com/ansible/ansible/devel/plugins/inventory/ec2.py" target="_blank" rel="external">aws 云上获取主机信息代码</a></p>
<p>关于如何从aws上获取主机信息并入库，这个我之前也写过相关的篇章，具体也可以参看我之前的博文－－－－<a href="http://www.361way.com/python-boto-aws-inventory/3672.html" target="_blank" rel="external">AWS主机资产管理 </a> （该篇也是纯python实现的）。</p>
<p>通过zabbix api 获取主机信息，我也写过一篇<a href="http://www.361way.com/zabbix-api/3577.html" target="_blank" rel="external">zabbix小结（八）Zabbix api</a> ，想要通过zabbix平台上获取主机列表信息也可以参考下。</p>
<h3 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h3><p><strong>1、ansible -i 参数后调用的脚本并非一定是py文件</strong>，也可以是其他脚本输出的结果，这里做了个简单的测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">[root@361way.com yaml]# ansible -i group.sh test1 -m command -a &apos;uptime&apos; -k</div><div class="line">SSH password:</div><div class="line">10.212.52.16 | success | rc=0 &gt;&gt;</div><div class="line"> 00:18am  up 332 days  7:10,  2 users,  load average: 0.00, 0.01, 0.05</div><div class="line">10.212.52.14 | success | rc=0 &gt;&gt;</div><div class="line"> 00:17am  up 332 days  6:32,  2 users,  load average: 0.01, 0.03, 0.05</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line"> 00:11am  up 24 days  9:33,  2 users,  load average: 0.49, 0.42, 0.41</div><div class="line">[root@localhost yaml]# cat group.sh</div><div class="line">#!/bin/bash</div><div class="line">groups=&apos;&apos;&apos;</div><div class="line">&#123;</div><div class="line">    &quot;test1&quot;: &#123;</div><div class="line">        &quot;hosts&quot;: [</div><div class="line">            &quot;10.212.52.252&quot;,</div><div class="line">            &quot;10.212.52.14&quot;,</div><div class="line">            &quot;10.212.52.16&quot;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&apos;&apos;&apos;</div><div class="line">echo $groups</div></pre></td></tr></table></figure>
<p><strong>2、-i 参数指定的脚本需要有可执行权限</strong> ，不然会报错，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@361way.com yaml]# ansible -i hostjson.py  AA  -a &apos;uptime&apos;</div><div class="line">ERROR: The file hostjson.py looks like it should be an executable inventory script, but is not marked executable. Perhaps you want to correct this with `chmod +x hostjson.py`?</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Ansible Inventory实际上是包含静态Inventory和动态Inventory两部分，静态Inventory指的是在文件/etc/ansible/hosts中指定的主机和组，Dynamic Inventory指通过外部脚本获取主机列表，并按照ansible 所要求的格式返回给ansilbe命令的。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（四）ansible.cfg与默认配置</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_04/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_04/</id>
    <published>2016-10-22T02:30:16.000Z</published>
    <updated>2017-01-10T10:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ansible默认安装好后有一个配置文件/etc/ansible/ansible.cfg，该配置文件中定义了ansible的主机的默认配置部分，如默认是否需要输入密码、是否开启sudo认证、action_plugins插件的位置、hosts主机组的位置、是否开启log功能、默认端口、key文件位置等等。</p>
<p>具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[defaults]</div><div class="line"># some basic default values...</div><div class="line">hostfile       = /etc/ansible/hosts   \\指定默认hosts配置的位置</div><div class="line"># library_path = /usr/share/my_modules/</div><div class="line">remote_tmp     = $HOME/.ansible/tmp</div><div class="line">pattern        = *</div><div class="line">forks          = 5</div><div class="line">poll_interval  = 15</div><div class="line">sudo_user      = root  \\远程sudo用户</div><div class="line">#ask_sudo_pass = True  \\每次执行ansible命令是否询问ssh密码</div><div class="line">#ask_pass      = True  \\每次执行ansible命令时是否询问sudo密码</div><div class="line">transport      = smart</div><div class="line">remote_port    = 22</div><div class="line">module_lang    = C</div><div class="line">gathering = implicit</div><div class="line">host_key_checking = False    \\关闭第一次使用ansible连接客户端是输入命令提示</div><div class="line">log_path    = /var/log/ansible.log \\需要时可以自行添加。chown -R root:root ansible.log</div><div class="line">system_warnings = False    \\关闭运行ansible时系统的提示信息，一般为提示升级</div><div class="line"># set plugin path directories here, separate with colons</div><div class="line">action_plugins     = /usr/share/ansible_plugins/action_plugins</div><div class="line">callback_plugins   = /usr/share/ansible_plugins/callback_plugins</div><div class="line">connection_plugins = /usr/share/ansible_plugins/connection_plugins</div><div class="line">lookup_plugins     = /usr/share/ansible_plugins/lookup_plugins</div><div class="line">vars_plugins       = /usr/share/ansible_plugins/vars_plugins</div><div class="line">filter_plugins     = /usr/share/ansible_plugins/filter_plugins</div><div class="line">fact_caching = memory</div><div class="line">[accelerate]</div><div class="line">accelerate_port = 5099</div><div class="line">accelerate_timeout = 30</div><div class="line">accelerate_connect_timeout = 5.0</div><div class="line"># The daemon timeout is measured in minutes. This time is measured</div><div class="line"># from the last activity to the accelerate daemon.</div><div class="line">accelerate_daemon_timeout = 30</div></pre></td></tr></table></figure>
<p>本篇就结合一个示例对其进行下了解。我在对之前未连接的主机进行连结时报错如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# ansible test -a &apos;uptime&apos;</div><div class="line">10.212.52.14 | FAILED =&gt; Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host&apos;s fingerprint to your known_hosts file to manage this host.</div><div class="line">10.212.52.16 | FAILED =&gt; Using a SSH password instead of a key is not possible because Host Key checking is enabled and sshpass does not support this.  Please add this host&apos;s fingerprint to your known_hosts file to manage this host.</div></pre></td></tr></table></figure>
<p>从上面的输出提示上基本可以了解到由于在本机的~/.ssh/known_hosts文件中并有fingerprint key串，ssh第一次连接的时候一般会提示输入yes 进行确认为将key字符串加入到  ~/.ssh/known_hosts 文件中。</p>
<h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><p>了解到问题原因为，我们了解到进行ssh连接时，可以使用-o参数将StrictHostKeyChecking设置为no，使用ssh连接时避免首次连接时让输入yes/no部分的提示。通过查看ansible.cfg配置文件，发现如下行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[ssh_connection]</div><div class="line"># ssh arguments to use</div><div class="line"># Leaving off ControlPersist will result in poor performance, so use</div><div class="line"># paramiko on older platforms rather than removing it</div><div class="line">#ssh_args = -o ControlMaster=auto -o ControlPersist=60s</div></pre></td></tr></table></figure>
<p>所以这里我们可以启用ssh_args 部分，使用下面的配置，避免上面出现的错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking＝no</div></pre></td></tr></table></figure>
<h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4><p>在ansible.cfg配置文件中，也会找到如下部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># uncomment this to disable SSH key host checking</div><div class="line">host_key_checking = False</div></pre></td></tr></table></figure>
<p>默认host_key_checking部分是注释的，通过找开该行的注释，同样也可以实现跳过 ssh 首次连接提示验证部分。由于配置文件中直接有该选项，所以推荐用方法2 。</p>
<h4 id="其他部分"><a href="#其他部分" class="headerlink" title="其他部分"></a>其他部分</h4><p>由于官方给的说明比较详细，同时ansible.cfg 文件本身默认也有注释提示部分，所以不做过多说明，这里再举个例子，默认ansible 执行的时候，并不会输出日志到文件，不过在ansible.cfg 配置文件中有如下行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># logging is off by default unless this path is defined</div><div class="line"># if so defined, consider logrotate</div><div class="line">log_path = /var/log/ansible.log</div></pre></td></tr></table></figure>
<p>同样，默认log_path这行是注释的，打开该行的注释，所有的命令执行后，都会将日志输出到/var/log/ansible.log 文件，便于了解在何时执行了何操作及其结果，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ansible]# cat /var/log/ansible.log</div><div class="line">2015-05-04 01:57:19,758 p=4667 u=root |</div><div class="line">2015-05-04 01:57:19,759 p=4667 u=root |  /usr/bin/ansible test -a uptime</div><div class="line">2015-05-04 01:57:19,759 p=4667 u=root |</div><div class="line">2015-05-04 01:57:20,563 p=4667 u=root |  10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line"> 01:57am  up 23 days 11:20,  2 users,  load average: 0.38, 0.38, 0.40</div><div class="line">2015-05-04 01:57:20,831 p=4667 u=root |  10.212.52.14 | success | rc=0 &gt;&gt;</div><div class="line"> 02:03am  up 331 days  8:19,  2 users,  load average: 0.08, 0.05, 0.05</div><div class="line">2015-05-04 01:57:20,909 p=4667 u=root |  10.212.52.16 | success | rc=0 &gt;&gt;</div><div class="line"> 02:05am  up 331 days  8:56,  2 users,  load average: 0.00, 0.01, 0.05</div></pre></td></tr></table></figure>
<p>更多部分可以<a href="http://docs.ansible.com/intro_configuration.html" target="_blank" rel="external">参看官方文档</a>。</p>
]]></content>
    
    <summary type="html">
    
      ansible.cfg 配置小结
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（三）Inventory与Patterns</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_03/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_03/</id>
    <published>2016-10-22T02:20:16.000Z</published>
    <updated>2017-01-11T01:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Hosts-and-Groups（主机与组）"><a href="#一、Hosts-and-Groups（主机与组）" class="headerlink" title="一、Hosts and Groups（主机与组）"></a>一、Hosts and Groups（主机与组）</h3><p>对于/etc/ansible/hosts最简单的定义格式像下面：</p>
<h4 id="1、简单的主机和组"><a href="#1、简单的主机和组" class="headerlink" title="1、简单的主机和组"></a>1、简单的主机和组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mail.361way.com</div><div class="line">[webservers]</div><div class="line">web1.361way.com</div><div class="line">web2.361way.com </div><div class="line">[dbservers]</div><div class="line">db1.361way.com</div><div class="line">db2.361way.com</div></pre></td></tr></table></figure>
<p>a、中括号中的名字代表组名，你可以根据你自己的需求将庞大的主机分成具有标识的组，如上面我分了两个组webservers和dbservers组；</p>
<p>b、主机(hosts)部分可以使用域名、主机名、IP地址表示；当然使用前两者时，也需要主机能反解析到相应的IP地址，一般此类配置中多使用IP地址；</p>
<h4 id="2、端口与别名"><a href="#2、端口与别名" class="headerlink" title="2、端口与别名"></a>2、端口与别名</h4><p>如果某些主机的SSH运行在自定义的端口上，ansible使用Paramiko进行ssh连接时，不会使用你SSH配置文件中列出的端口，但是如果修改ansible使用openssh进行ssh连接时将会使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.0.10:5309</div></pre></td></tr></table></figure>
<p>假如你想要为某些静态IP设置一些别名，类似于SaltStack中minion配置文件中id的参数配置。你可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jumper ansible_ssh_port = 5555 ansible_ssh_host = 192.168.1.50</div></pre></td></tr></table></figure>
<p>上面的 jumper 别名就指代了IP为192.168.1.50，ssh连接端口为5555的主机。</p>
<h4 id="3、指定主机范围"><a href="#3、指定主机范围" class="headerlink" title="3、指定主机范围"></a>3、指定主机范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[webservers]</div><div class="line">www[01:50].361way.com</div><div class="line">[databases]</div><div class="line">db-[a:f].91it.org</div></pre></td></tr></table></figure>
<p>上面指定了从web1到web50，webservers组共计50台主机；databases组有db-a到db-f共6台主机。</p>
<h4 id="4、使用主机变量"><a href="#4、使用主机变量" class="headerlink" title="4、使用主机变量"></a>4、使用主机变量</h4><p>以下是Hosts部分中经常用到的变量部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ansible_ssh_host # 要连接的主机名</div><div class="line">ansible_ssh_port # 端口号默认是22</div><div class="line">ansible_ssh_user # ssh连接时默认使用的用户名</div><div class="line">ansible_ssh_pass # ssh连接时的密码</div><div class="line">ansible_sudo_pass # 使用sudo连接用户是的密码</div><div class="line">ansible_ssh_private_key_file # 秘钥文件如果不想使用ssh-agent管理时可以使用此选项</div><div class="line">ansible_shell_type # shell的类型默认sh</div><div class="line">ansible_connection # SSH 连接的类型： local , ssh , paramiko在 ansible 1.2 之前默认是 paramiko ，后来智能选择，优先使用基于 ControlPersist 的 ssh （支持的前提）</div><div class="line">ansible_python _ interpreter #用来指定 python 解释器的路径，同样可以指定ruby 、perl 的路径</div></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[test]</div><div class="line">10.212.52.252 ansible_ssh_user=root ansible_ssh_pass=&apos;361way.com&apos;</div><div class="line">10.212.52.14 ansible_ssh_user=test1 ansible_ssh_pass=&apos;91it.org&apos;</div><div class="line">10.212.52.16 ansible_ssh_user=test2 ansible_ssh_port=7788 ansible_ssh_pass=&apos;123456&apos;</div></pre></td></tr></table></figure>
<p>上面的示例中指定了三台主机，三台主机的用密码分别是361way.com、91it.org、123456，指定的ssh连接的用户名分别为root、test1、test2，ssh 端口分别为22、22、7788 ，这样在ansible命令执行的时候就不用再指令用户和密码等了，执行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# ansible test -a &apos;uptime&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line">01:34am  up 23 days 10:57,  2 users,  load average: 0.42, 0.39, 0.41</div><div class="line">10.212.52.16 | success | rc=0 &gt;&gt;</div><div class="line">01:41am  up 331 days  8:33,  2 users,  load average: 0.00, 0.01, 0.05</div><div class="line">10.212.52.14 | success | rc=0 &gt;&gt;</div><div class="line">01:40am  up 331 days  7:55,  2 users,  load average: 0.09, 0.03, 0.05</div></pre></td></tr></table></figure>
<h4 id="5、组内变量"><a href="#5、组内变量" class="headerlink" title="5、组内变量"></a>5、组内变量</h4><p>变量也可以通过组名，应用到组内的所有成员：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[test]</div><div class="line">host1</div><div class="line">host2</div><div class="line">[test:vars]</div><div class="line">ntp_server=ntp.361way.com</div><div class="line">proxy=proxy.361way.com</div></pre></td></tr></table></figure>
<p>上面test组中包含两台主机，通过对test组指定vars变更，相应的host1和host2相当于相应的指定了ntp_server和proxy变量参数值 。</p>
<h4 id="6、组的包含与组内变量"><a href="#6、组的包含与组内变量" class="headerlink" title="6、组的包含与组内变量"></a>6、组的包含与组内变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[hangzhou]</div><div class="line">host1</div><div class="line">host2</div><div class="line">[jiaxing]</div><div class="line">host2</div><div class="line">host3</div><div class="line">[zhejiang:children]</div><div class="line">hangzhou</div><div class="line">jiaxing</div><div class="line">[zhejiang:vars]</div><div class="line">some_server=foo.southeast.example.com</div><div class="line">halon_system_timeout=30</div><div class="line">self_destruct_countdown=60</div><div class="line">escape_pods=2</div><div class="line">[china:children]</div><div class="line">zhejiang</div><div class="line">henan</div><div class="line">shandong</div><div class="line">hebei</div></pre></td></tr></table></figure>
<p>如上面的示例中，我指定了杭州组我有host1、hosts2；嘉兴组我有host3、host4主机；我又指定了一个组浙江组，同时包含杭州和嘉兴；同时为该组内的所有主机指定了四个vars变量。后面我又设定了一个组中国组，包含浙江、河南、山东、河北。</p>
<p>注：由于vars变量在ansible ad-hoc部分中基本用不到，主要用在ansible-playbook中，后面的章节部分也会提到。</p>
<p>以上部分基本上是完全按照<a href="http://docs.ansible.com/intro_inventory.html" target="_blank" rel="external">官方Inventory 文档</a>部分进行了翻译和微小的变化。英文感觉还可以的可以直接查看官方页面。</p>
<h3 id="二、Patterns（主机与组正则匹配部分）"><a href="#二、Patterns（主机与组正则匹配部分）" class="headerlink" title="二、Patterns（主机与组正则匹配部分）"></a>二、Patterns（主机与组正则匹配部分）</h3><p>把Patterns 直接理解为正则实际是不完全准确的，正常的理解为patterns意味着在ansible中管理哪些主机，也可以理解为，要与哪台主机进行通信。在探讨这个问题之前我们先看下ansible的用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible &lt;pattern_goes_here&gt; -m &lt;module_name&gt; -a &lt;arguments&gt;</div></pre></td></tr></table></figure>
<p>直接上一个示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible webservers -m service -a &quot;name=httpd state=restarted&quot;</div></pre></td></tr></table></figure>
<p>这里是对webservers 组或主机重启httpd服务 ，其中webservers 就是Pattern部分。而之所以上面我说Pattern（模式）可以理解为正则，主要针对下面经常用到的用法而言的。</p>
<h4 id="1、表示所有的主机可以使用all-或"><a href="#1、表示所有的主机可以使用all-或" class="headerlink" title="1、表示所有的主机可以使用all 或 *"></a>1、表示所有的主机可以使用all 或 *</h4><h4 id="2、通配符与逻辑或"><a href="#2、通配符与逻辑或" class="headerlink" title="2、通配符与逻辑或"></a>2、通配符与逻辑或</h4><p>利用通配符还可以指定一组具有规则特征的主机或主机名，冒号表示or－－－逻辑或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">one.361way.com</div><div class="line">one.361way:two.361way.com</div><div class="line">192.168.1.50</div><div class="line">192.168.1.*</div></pre></td></tr></table></figure>
<p>当然，这里的*通配符也可以用在前面，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*.361way.com</div><div class="line">*.com</div></pre></td></tr></table></figure>
<p>上面的用法，在多个组之间同样适用 ，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">webservers</div><div class="line">webservers:dbservers  //表示两个组中所有的主机</div></pre></td></tr></table></figure>
<h4 id="3、逻辑非与逻辑and"><a href="#3、逻辑非与逻辑and" class="headerlink" title="3、逻辑非与逻辑and"></a>3、逻辑非与逻辑and</h4><p>当然你可以做出非的表达式，例如，目标主机必须在组webservers但不在phoenix组中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webserver:!phoenix</div></pre></td></tr></table></figure>
<p>你还可以做出交集的表达式，例如，目标主机必须即在组webservers中又在组staging中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webservers:&amp;staging</div></pre></td></tr></table></figure>
<p>一个更复杂的示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webserver:dbservers:&amp;staging:!phoenix</div></pre></td></tr></table></figure>
<p>上面这个复杂的表达式最后表示的目标主机必须满足：在webservers或者dbservers组中，必须还存在于staging组中，但是不在phoenix组中。这些可以看作是SaltStack中Compound matchers 。</p>
<h4 id="4、混合高级用法"><a href="#4、混合高级用法" class="headerlink" title="4、混合高级用法"></a>4、混合高级用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*.361way.com:*.org</div></pre></td></tr></table></figure>
<p>还可以在开头的地方使用”~”，用来表示这是一个正则表达式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~(web|db).*\.91it\.org</div></pre></td></tr></table></figure>
<p>到这里估计你应该用能明白为什么前面我会提到Patterns 可以理解为正则的原因了。最后部分给两个ansible-playbook中具体可能用的用法：</p>
<p>a、在ansible-palybook命令中，你也可以使用变量来组成这样的表达式，但是你必须使用“-e”的选项来指定这个表达式（通常我们不这样用）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-palybook -e webservers:!&#123;&#123;excluded&#125;&#125;:&amp;&#123;&#123;required&#125;&#125;</div></pre></td></tr></table></figure>
<p>b、在ansible和ansible-playbook中，还可以通过一个参数”–limit”来明确指定排除某些主机或组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook site.yml --limit datacenter2</div></pre></td></tr></table></figure>
<p>以上部分主要按照<a href="http://docs.ansible.com/intro_patterns.html" target="_blank" rel="external">官方Pattern部分</a>进行翻译和尝试。</p>
]]></content>
    
    <summary type="html">
    
      Ansible的Inventory文件，可以理解为saltstack中的salt-key中的所有minion的列表以及用户自定义的nodegroup的概念，默认情况下这个文件是/etc/ansible/hosts ，后面还会讲到Dynamic Inventory，本节主要讲静态主机群部分。Patterns（模式）部分我们可以理解为正则表达式，通过Patterns我们可以匹配Inventory分组中的部分主机。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（二）ansible架构</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_02/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_02/</id>
    <published>2016-10-22T02:10:16.000Z</published>
    <updated>2017-01-11T01:38:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Ansible基本架构"><a href="#一、Ansible基本架构" class="headerlink" title="一、Ansible基本架构"></a>一、Ansible基本架构</h3><p><a href="http://www.361way.com/wp-content/uploads/2015/05/ansible-framework.png" target="_blank" rel="external"><img src="http://www.361way.com/wp-content/uploads/2015/05/ansible-framework.png" alt="ansible-framework"></a></p>
<p>上图为ansible的基本架构，从上图可以了解到其由以下部分组成：</p>
<ul>
<li>核心：ansible</li>
<li>核心模块（Core Modules）：这些都是ansible自带的模块 </li>
<li>扩展模块（Custom Modules）：如果核心模块不足以完成某种功能，可以添加扩展模块</li>
<li>插件（Plugins）：完成模块功能的补充</li>
<li>剧本（Playbooks）：ansible的任务配置文件，将多个任务定义在剧本中，由ansible自动执行</li>
<li>连接插件（Connectior Plugins）：ansible基于连接插件连接到各个主机上，虽然ansible是使用ssh连接到各个主机的，但是它还支持其他的连接方法，所以需要有连接插件</li>
<li>主机群（Host Inventory）：定义ansible管理的主机</li>
</ul>
<h3 id="二、ansible工作原理"><a href="#二、ansible工作原理" class="headerlink" title="二、ansible工作原理"></a>二、ansible工作原理</h3><p><a href="http://www.361way.com/wp-content/uploads/2015/05/ansible-principle.png" target="_blank" rel="external"><img src="http://www.361way.com/wp-content/uploads/2015/05/ansible-principle.png" alt="ansible-principle"></a></p>
<p><a href="http://www.361way.com/wp-content/uploads/2015/05/ansible-principle2.png" target="_blank" rel="external"><img src="http://www.361way.com/wp-content/uploads/2015/05/ansible-principle2.png" alt="ansible-principle2"></a></p>
<p>以上是从网上找到的两张ansible工作原理图，两张图基本都是在架构图的基本上进行的拓展。从上面的图上可以了解到：</p>
<p>1、管理端支持local 、ssh、zeromq 三种方式连接被管理端，默认使用基于ssh的连接－－－这部分对应基本架构图中的连接模块；</p>
<p>2、可以按应用类型等方式进行Host Inventory（主机群）分类，管理节点通过各类模块实现相应的操作－－－单个模块，单条命令的批量执行，我们可以称之为ad-hoc；</p>
<p>3、管理节点可以通过playbooks 实现多个task的集合实现一类功能，如web服务的安装部署、数据库服务器的批量备份等。playbooks我们可以简单的理解为，系统通过组合多条ad-hoc操作的配置文件 。</p>
<h3 id="三、ansible的七个命令"><a href="#三、ansible的七个命令" class="headerlink" title="三、ansible的七个命令"></a>三、ansible的七个命令</h3><p>安装完ansible后，发现ansible一共为我们提供了七个指令：ansible、ansible-doc、ansible-galaxy、ansible-lint、ansible-playbook、ansible-pull、ansible-vault 。这里我们只查看usage部分，详细部分可以通过 “指令 -h”  的方式获取。</p>
<h4 id="1、ansible"><a href="#1、ansible" class="headerlink" title="1、ansible"></a>1、ansible</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ansible -h</div><div class="line">Usage: ansible &lt;host-pattern&gt; [options]</div></pre></td></tr></table></figure>
<p>ansible是指令核心部分，其主要用于执行ad-hoc命令，即单条命令。默认后面需要跟主机和选项部分，默认不指定模块时，使用的是command模块。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# ansible 192.168.0.102 -a &apos;date&apos;</div><div class="line">192.168.0.102 | success | rc=0 &gt;&gt;</div><div class="line">Tue May 12 22:57:24 CST 2015</div></pre></td></tr></table></figure>
<p>不过默认使用的模块是可以在ansible.cfg 中进行修改的。ansible命令下的参数部分解释如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">参数：</div><div class="line">  -a &apos;Arguments&apos;, --args=&apos;Arguments&apos; 命令行参数</div><div class="line">  -m NAME, --module-name=NAME 执行模块的名字，默认使用 command 模块，所以如果是只执行单一命令可以不用 -m参数</div><div class="line">  -i PATH, --inventory=PATH 指定库存主机文件的路径,默认为/etc/ansible/hosts.</div><div class="line">  -u Username， --user=Username 执行用户，使用这个远程用户名而不是当前用户</div><div class="line">  -U --sud-user=SUDO_User  sudo到哪个用户，默认为 root</div><div class="line">  -k --ask-pass  登录密码，提示输入SSH密码而不是假设基于密钥的验证</div><div class="line">  -K --ask-sudo-pass 提示密码使用sudo</div><div class="line">  -s --sudo sudo运行</div><div class="line">  -S --su 用 su 命令</div><div class="line">  -l  --list 显示所支持的所有模块</div><div class="line">  -s --snippet 指定模块显示剧本片段</div><div class="line">  -f  --forks=NUM 并行任务数。NUM被指定为一个整数,默认是5。 #ansible testhosts -a &quot;/sbin/reboot&quot; -f 10 重启testhosts组的所有机器，每次重启10台</div><div class="line">  --private-key=PRIVATE_KEY_FILE 私钥路径，使用这个文件来验证连接</div><div class="line">  -v --verbose 详细信息</div><div class="line">  all  针对hosts 定义的所有主机执行</div><div class="line">  -M MODULE_PATH, --module-path=MODULE_PATH 要执行的模块的路径，默认为/usr/share/ansible/</div><div class="line">  --list-hosts 只打印有哪些主机会执行这个 playbook 文件，不是实际执行该 playbook 文件</div><div class="line">  -o --one-line 压缩输出，摘要输出.尝试一切都在一行上输出。</div><div class="line">  -t Directory, --tree=Directory 将内容保存在该输出目录,结果保存在一个文件中在每台主机上。</div><div class="line">  -B 后台运行超时时间</div><div class="line">  -P 调查后台程序时间</div><div class="line">  -T Seconds, --timeout=Seconds 时间，单位秒s</div><div class="line">  -P NUM, --poll=NUM 调查背景工作每隔数秒。需要- b</div><div class="line">  -c Connection, --connection=Connection  连接类型使用。可能的选项是paramiko(SSH),SSH和地方。当地主要是用于crontab或启动。</div><div class="line">  --tags=TAGS 只执行指定标签的任务    例子:ansible-playbook test.yml --tags=copy  只执行标签为copy的那个任务</div><div class="line">  --list-hosts 只打印有哪些主机会执行这个 playbook 文件，不是实际执行该 playbook 文件</div><div class="line">  --list-tasks 列出所有将被执行的任务</div><div class="line">  -C, --check 只是测试一下会改变什么内容，不会真正去执行;相反,试图预测一些可能发生的变化</div><div class="line">  --syntax-check 执行语法检查的剧本,但不执行它</div><div class="line">  -l SUBSET, --limit=SUBSET 进一步限制所选主机/组模式  --limit=192.168.0.15 只对这个ip执行</div><div class="line">  --skip-tags=SKIP_TAGS 只运行戏剧和任务不匹配这些值的标签  --skip-tags=copy_start</div><div class="line">  -e EXTRA_VARS, --extra-vars=EXTRA_VARS  额外的变量设置为键=值或YAML / JSON</div><div class="line">        #cat update.yml</div><div class="line">        ---</div><div class="line">        - hosts: &#123;&#123; hosts &#125;&#125;</div><div class="line">          remote_user: &#123;&#123; user &#125;&#125;</div><div class="line">        ..............</div><div class="line">        #ansible-playbook update.yml --extra-vars &quot;hosts=vipers user=admin&quot;   传递&#123;&#123;hosts&#125;&#125;、&#123;&#123;user&#125;&#125;变量,hosts可以是 ip或组名</div><div class="line">  -l,--limit 对指定的 主机/组 执行任务  --limit=192.168.0.10，192.168.0.11 或 -l 192.168.0.10，192.168.0.11 只对这个2个ip执行任务</div></pre></td></tr></table></figure>
<h4 id="2、ansible-doc"><a href="#2、ansible-doc" class="headerlink" title="2、ansible-doc"></a>2、ansible-doc</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ansible-doc -h</div><div class="line">Usage: ansible-doc [options] [module...]</div></pre></td></tr></table></figure>
<p>该指令用于查看模块信息，常用参数有两个-l 和 -s ，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//列出所有已安装的模块</div><div class="line"># ansible-doc  -l</div><div class="line">//查看具体某模块的用法，这里如查看command模块</div><div class="line"># ansible-doc  -s command</div></pre></td></tr></table></figure>
<h4 id="3、ansible-galaxy"><a href="#3、ansible-galaxy" class="headerlink" title="3、ansible-galaxy"></a>3、ansible-galaxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ansible-galaxy -h</div><div class="line">Usage: ansible-galaxy [init|info|install|list|remove] [--help] [options] ...</div></pre></td></tr></table></figure>
<p>ansible-galaxy 指令用于方便的从<a href="https://galaxy.ansible.com/" target="_blank" rel="external">https://galaxy.ansible.com/</a> 站点下载第三方扩展模块，我们可以形象的理解其类似于centos下的yum、python下的pip或easy_install 。如下示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ansible-galaxy install aeriscloud.docker</div><div class="line">- downloading role &apos;docker&apos;, owned by aeriscloud</div><div class="line">- downloading role from https://github.com/AerisCloud/ansible-docker/archive/v1.0.0.tar.gz</div><div class="line">- extracting aeriscloud.docker to /etc/ansible/roles/aeriscloud.docker</div><div class="line">- aeriscloud.docker was installed successfully</div></pre></td></tr></table></figure>
<p>这个安装了一个aeriscloud.docker组件，前面aeriscloud是galaxy上创建该模块的用户名，后面对应的是其模块。在实际应用中也可以指定txt或yml 文件进行多个组件的下载安装。这部分可以参看<a href="http://docs.ansible.com/galaxy.html" target="_blank" rel="external">官方文档</a>。</p>
<h4 id="4、ansible-lint"><a href="#4、ansible-lint" class="headerlink" title="4、ansible-lint"></a>4、ansible-lint</h4><p>ansible-lint是对playbook的语法进行检查的一个工具。用法是ansible-lint playbook.yml 。</p>
<h4 id="5、ansible-playbook"><a href="#5、ansible-playbook" class="headerlink" title="5、ansible-playbook"></a>5、ansible-playbook</h4><p>该指令是使用最多的指令，其通过读取playbook 文件后，执行相应的动作，这个后面会做为一个重点来讲。</p>
<h4 id="6、ansible-pull"><a href="#6、ansible-pull" class="headerlink" title="6、ansible-pull"></a>6、ansible-pull</h4><p>该指令使用需要谈到ansible的另一种模式－－－pull 模式，这和我们平常经常用的push模式刚好相反，其适用于以下场景：你有数量巨大的机器需要配置，即使使用非常高的线程还是要花费很多时间；你要在一个没有网络连接的机器上运行Anisble，比如在启动之后安装。这部分也会单独做一节来讲。</p>
<h4 id="7、ansible-vault"><a href="#7、ansible-vault" class="headerlink" title="7、ansible-vault"></a>7、ansible-vault</h4><p>ansible-vault主要应用于配置文件中含有敏感信息，又不希望他能被人看到，vault可以帮你加密/解密这个配置文件，属高级用法。主要对于playbooks里比如涉及到配置密码或其他变量时，可以通过该指令加密，这样我们通过cat看到的会是一个密码串类的文件，编辑的时候需要输入事先设定的密码才能打开。这种playbook文件在执行时，需要加上 –ask-vault-pass参数，同样需要输入密码后才能正常执行。具体该部分可以参查<a href="http://www.ansible.com/blog/2014/02/19/ansible-vault" target="_blank" rel="external">官方博客</a>。</p>
<p>注：上面七个指令，用的最多的只有两个ansible 和ansible-playbook ，这两个一定要掌握，其他五个属于拓展或高级部分。</p>
]]></content>
    
    <summary type="html">
    
      Ansible 是一个模型驱动的配置管理器，支持多节点发布、远程任务执行。默认使用 SSH 进行远程连接。无需在被管理节点上安装附加软件，可使用各种编程语言进行扩展。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（一）ansible的安装</title>
    <link href="https://plpcm.github.io/blog/2016/10/22/ansible_01/"/>
    <id>https://plpcm.github.io/blog/2016/10/22/ansible_01/</id>
    <published>2016-10-22T01:10:16.000Z</published>
    <updated>2017-01-11T01:38:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Ansible 是一个配置管理和应用部署工具，功能类似于目前业界的配置管理工具 Chef,Puppet,Saltstack。Ansible 是通过 Python 语言开发。Ansible 平台由 Michael DeHaan 创建，他同时也是知名软件 Cobbler 与 Func 的作者。Ansible 的第一个版本发布于 2012 年 2 月。Ansible 默认通过 SSH 协议管理机器，所以 Ansible 不需要安装客户端程序在服务器上。您只需要将 Ansible 安装在一台服务器，在 Ansible 安装完后，您就可以去管理控制其它服务器。不需要为它配置数据库，Ansible 不会以 daemons 方式来启动或保持运行状态。Ansible 可以实现以下目标：</p>
<ul>
<li>自动化部署应用</li>
<li>自动化管理配置</li>
<li>自动化的持续交付</li>
<li>自动化的（AWS）云服务管理。</li>
</ul>
<p>根据 Ansible 官方提供的信息，当前使用 Ansible 的用户有：evernote、rackspace、NASA、Atlassian、twitter 等。</p>
<p>注：以上简介来自于ibm developerworks 中国的介绍。</p>
<h3 id="二、Ansible的安装"><a href="#二、Ansible的安装" class="headerlink" title="二、Ansible的安装"></a>二、Ansible的安装</h3><h4 id="1、yum源安装"><a href="#1、yum源安装" class="headerlink" title="1、yum源安装"></a>1、yum源安装</h4><p>以centos为例，默认在源里没有ansible，不过在<a href="http://fedoraproject.org/wiki/EPEL" target="_blank" rel="external">fedora epel源</a>里有ansible，配置完epel 源后，可以直接通过yum 进行安装。这里以centos6.8为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># yum install http://mirrors.sohu.com/fedora-epel/6/x86_64/epel-release-6-8.noarch.rpm</div><div class="line"># yum install ansible</div></pre></td></tr></table></figure>
<h4 id="2、apt-get安装"><a href="#2、apt-get安装" class="headerlink" title="2、apt-get安装"></a>2、apt-get安装</h4><p>在ubuntu及其衍生版中，可以通过增加ppa源进行apt-get安装，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install software-properties-common</div><div class="line">$ sudo apt-add-repository ppa:ansible/ansible</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install ansible</div></pre></td></tr></table></figure>
<h4 id="3、源码安装"><a href="#3、源码安装" class="headerlink" title="3、源码安装"></a>3、源码安装</h4><p>源码安装需要python2.6以上版本，其依赖模块paramiko、PyYAML、Jinja2、httplib2、simplejson、pycrypto模块，以上模块可以通过pip或easy_install 进行安装，不过本部分既然提到的是源码安装，主要针对的无法上外网的情况下，可以通过<a href="https://pypi.python.org/" target="_blank" rel="external">pypi 站点</a>搜索以上包，下载后通过python setup.py install 进行安装。</p>
<p>最后通过<a href="https://github.com/ansible/ansible" target="_blank" rel="external">github</a>或<a href="https://pypi.python.org/pypi/ansible/1.9.1" target="_blank" rel="external">pypi上</a>下载ansible源码包，通过python setup.py install 安装即可。由于安装过程相对简单，这里略过，主要介绍安装后，可能遇到的问题。</p>
<p>a、安装PyYAML时，报错如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># python setup.py install</div><div class="line">libyaml is not found or a compiler error: forcing --without-libyaml(if libyaml is installed correctly, you may need to specify the option --include-dirs or uncomment and modify the parameter include_dirs in setup.cfg)</div><div class="line">running install_lib</div><div class="line">running install_egg_info</div><div class="line">Removing /usr/lib64/python2.6/site-packages/PyYAML-3.11-py2.6.egg-info</div><div class="line">Writing /usr/lib64/python2.6/site-packages/PyYAML-3.11-py2.6.egg-info</div></pre></td></tr></table></figure>
<p>在centos6.8系统中，可以通过yum -y install libyaml 包解决，或者从ISO文件中提供该包，通过rpm -ivh进行安装。</p>
<p>b、安装完ansible是，报错如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ansible-1.9.1]# ansible -h</div><div class="line">Traceback (most recent call last):</div><div class="line">File &quot;/usr/local/src/ansible-devel/bin/ansible&quot;, line 36, in &lt;module&gt;    </div><div class="line">from ansible.runner import Runner</div><div class="line">File &quot;/usr/local/src/ansible-devel/lib/ansible/runner/__init__.py&quot;, line 62, in &lt;module&gt;</div><div class="line">from Crypto.Random import atfork</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Random/__init__.py&quot;, line 29, in &lt;module&gt;</div><div class="line">from Crypto.Random import _UserFriendlyRNG</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py&quot;, line 38, in &lt;module&gt;</div><div class="line">from Crypto.Random.Fortuna import FortunaAccumulator</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py&quot;, line 39, in &lt;module&gt;</div><div class="line">import FortunaGenerator</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py&quot;, line 34, in &lt;module&gt; </div><div class="line">from Crypto.Util.number import ceil_shift, exact_log2, exact_div</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Util/number.py&quot;, line 56, in &lt;module&gt;</div><div class="line">if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:</div><div class="line">AttributeError: &apos;module&apos; object has no attribute &apos;HAVE_DECL_MPZ_POWM_SEC&apos;</div></pre></td></tr></table></figure>
<p>import paramiko包时，报错如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import paramiko</div><div class="line">Traceback (most recent call last):</div><div class="line">File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;  File &quot;/usr/lib/python2.6/site-packages/paramiko/__init__.py&quot;, line 69, in &lt;module&gt;</div><div class="line">from transport import randpool, SecurityOptions, Transport</div><div class="line">File &quot;/usr/lib/python2.6/site-packages/paramiko/transport.py&quot;, line 32, in &lt;module&gt;</div><div class="line">from paramiko import util</div><div class="line">File &quot;/usr/lib/python2.6/site-packages/paramiko/util.py&quot;, line 32, in &lt;module&gt;</div><div class="line">from paramiko.common import *</div><div class="line">File &quot;/usr/lib/python2.6/site-packages/paramiko/common.py&quot;, line 98, in &lt;module&gt;</div><div class="line">from rng import StrongLockingRandomPool</div><div class="line">File &quot;/usr/lib/python2.6/site-packages/paramiko/rng.py&quot;, line 22, in &lt;module&gt;</div><div class="line">from Crypto.Util.randpool import RandomPool as _RandomPool</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Util/randpool.py&quot;, line 30, in &lt;module&gt;</div><div class="line">import Crypto.Random</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Random/__init__.py&quot;, line 29, in &lt;module&gt;</div><div class="line">from Crypto.Random import _UserFriendlyRNG</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Random/_UserFriendlyRNG.py&quot;, line 38, in &lt;module&gt;</div><div class="line">from Crypto.Random.Fortuna import FortunaAccumulator</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaAccumulator.py&quot;, line 39, in &lt;module&gt;</div><div class="line">import FortunaGenerator</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Random/Fortuna/FortunaGenerator.py&quot;, line 34, in &lt;module&gt; </div><div class="line">from Crypto.Util.number import ceil_shift, exact_log2, exact_div</div><div class="line">File &quot;/usr/lib64/python2.6/site-packages/Crypto/Util/number.py&quot;, line 56, in &lt;module&gt;</div><div class="line">if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:</div><div class="line">AttributeError: &apos;module&apos; object has no attribute &apos;HAVE_DECL_MPZ_POWM_SEC&apos;</div></pre></td></tr></table></figure>
<p>经网上查找，确认为pycrypto包安装时依赖的GMP版本不对的问题，具体可以通过以下步骤验证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@361way.com pycrypto-2.6.1]# python setup.py build</div><div class="line">running build</div><div class="line">running build_py</div><div class="line">running build_ext</div><div class="line">running build_configure</div><div class="line">warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath.</div></pre></td></tr></table></figure>
<p><strong>解决方法：</strong></p>
<p>打开 /usr/lib64/python2.6/site-packages/Crypto/Util/number.py 文件，可以 看到 56 行上的注释说明，要求 libgmp 为 v5 以上版本。而系统现有版本为 4.1.4，把以下两行暂时注释掉，Ansible 执行正常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if _fastmath is not None and not _fastmath.HAVE_DECL_MPZ_POWM_SEC:     </div><div class="line">_warn(&quot;Not using mpz_powm_sec.  You should rebuild using libgmp &gt;= 5 to avoid timing attack vulnerability.&quot;, PowmInsecureWarning)</div></pre></td></tr></table></figure>
<p>不过，此方法只是临时加以解决，更好的方式是去将 libgmp 升级到符合要求的版本。</p>
<p>c、执行时报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@361way.com src]# ansible test -m raw -a &apos;uptime&apos;</div><div class="line">10.212.52.14 | FAILED =&gt; to use the &apos;ssh&apos; connection type with passwords, you must install the sshpass program</div><div class="line">10.212.52.16 | FAILED =&gt; to use the &apos;ssh&apos; connection type with passwords, you must install the sshpass program</div></pre></td></tr></table></figure>
<p>安装<a href="http://mirrors.sohu.com/fedora-epel/6/x86_64/sshpass-1.05-1.el6.x86_64.rpm" target="_blank" rel="external">sshpass程序</a>。默认源里没有，我这里选择直接从sohu源里下载安装。</p>
<h3 id="三、Ansible的配置与验证"><a href="#三、Ansible的配置与验证" class="headerlink" title="三、Ansible的配置与验证"></a>三、Ansible的配置与验证</h3><p>这里以pypi上下载的源码内有一个examles包，可以将使用该示例文件做为默认配置，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ansible-1.9.1]# mkdir -p /etc/ansible</div><div class="line">[root@361way.com ansible-1.9.1]# cp -rp examples/*  /etc/ansible/</div><div class="line">[root@361way.com ansible-1.9.1]# cd /etc/ansible/</div></pre></td></tr></table></figure>
<p>使用默认示例配置文件后，编辑/etc/ansible/hosts文件，通过以下方式验证ansible是否可用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# cat /etc/ansible/hosts</div><div class="line">[test]</div><div class="line">10.212.52.252 ansible_ssh_user=root ansible_ssh_pass=361way.com</div><div class="line">10.212.52.14 ansible_ssh_user=root ansible_ssh_pass=abc123</div><div class="line">10.212.52.16 ansible_ssh_user=root ansible_ssh_pass=91it.org</div></pre></td></tr></table></figure>
<p>以上的配置中，我配置了一个test组，该组下有三台主机，三台都使用root验证，三台的密码分别是361way.com、abc123、91it.org 。</p>
<p>注：后面的用户和密码项是非必须的，在配置key认证的情况下，不使用密码也可以直接操作 。未使用key的，也可以在ansible通过 -k参数在操作前询问手动输入密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@361way.com ~]# ansible test -a &apos;uptime&apos;</div><div class="line">10.212.52.252 | success | rc=0 &gt;&gt;</div><div class="line"> 18:01pm  up 21 days  3:24,  3 users,  load average: 0.39, 0.38, 0.35</div><div class="line">10.212.52.16 | success | rc=0 &gt;&gt;</div><div class="line"> 18:09pm  up 329 days  1:01,  2 users,  load average: 0.08, 0.03, 0.05</div><div class="line">10.212.52.14 | success | rc=0 &gt;&gt;</div><div class="line"> 18:08pm  up 329 days  0:23,  2 users,  load average: 0.06, 0.06, 0.05</div></pre></td></tr></table></figure>
<p>执行以上指令后，有结果输出，证明安装成功。</p>
]]></content>
    
    <summary type="html">
    
      Ansible 是一个配置管理和应用部署工具，功能类似于目前业界的配置管理工具 Chef,Puppet,Saltstack。Ansible 是通过 Python 语言开发。Ansible 平台由 Michael DeHaan 创建，他同时也是知名软件 Cobbler 与 Func 的作者。Ansible 的第一个版本发布于 2012 年 2 月。Ansible 默认通过 SSH 协议管理机器，所以 Ansible 不需要安装客户端程序在服务器上。您只需要将 Ansible 安装在一台服务器，在 Ansible 安装完后，您就可以去管理控制其它服务器。不需要为它配置数据库，Ansible 不会以 daemons 方式来启动或保持运行状态。Ansible 可以实现以下目标：
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible 使用主机IP批量修改机器名</title>
    <link href="https://plpcm.github.io/blog/2016/10/12/ansible_rename_hostname/"/>
    <id>https://plpcm.github.io/blog/2016/10/12/ansible_rename_hostname/</id>
    <published>2016-10-12T02:30:16.000Z</published>
    <updated>2017-01-10T10:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>首先看看我的hosts配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@jastme:/etc/ansible/playbooks# more ../hosts </div><div class="line">[test]</div><div class="line">192.168.32.131 ansible_connection=local </div><div class="line">[test1]</div><div class="line">192.168.32.133 ansible_ssh_pass=123</div><div class="line">[test2]</div><div class="line">192.168.32.132 ansible_ssh_pass=123</div><div class="line">[testall]</div><div class="line">192.168.32.132 ansible_ssh_pass=123</div><div class="line">192.168.32.133 ansible_ssh_pass=123</div></pre></td></tr></table></figure>
<ol>
<li>看看2台主机的原始机器名</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">主机1</div><div class="line">[root@ZooKeeper-01 ~]# hostname </div><div class="line">ZooKeeper-01</div><div class="line">[root@ZooKeeper-01 ~]# ifconfig eth2</div><div class="line">eth2      Link encap:Ethernet  HWaddr 00:0C:29:58:95:55  </div><div class="line">          inet addr:192.168.32.132  Bcast:192.168.32.255  Mask:255.255.255.0</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:39614 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:18265 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000 </div><div class="line">          RX bytes:5279094 (5.0 MiB)  TX bytes:1110521 (1.0 MiB)</div><div class="line">          </div><div class="line">主机2</div><div class="line">[root@ZooKeeper-02 ~]# hostname </div><div class="line">ZooKeeper-02</div><div class="line">[root@ZooKeeper-02 ~]# ifconfig eth2</div><div class="line">eth2      Link encap:Ethernet  HWaddr 00:0C:29:C8:7F:48  </div><div class="line">          inet addr:192.168.32.133  Bcast:192.168.32.255  Mask:255.255.255.0</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:41538 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:20085 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000 </div><div class="line">          RX bytes:6164131 (5.8 MiB)  TX bytes:1729825 (1.6 MiB)</div></pre></td></tr></table></figure>
<ol>
<li>目标</li>
</ol>
<p>我们需要需要改这两台机器的主机名，按照他们自己的IP修改   类似  web132  web133</p>
<ol>
<li>playbook</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@jastme:/etc/ansible/playbooks# more changehostname.yml </div><div class="line">- hosts : testall</div><div class="line">  remote_user : root</div><div class="line">  tasks :</div><div class="line">  - name : show hostname</div><div class="line">    shell : hostname</div><div class="line">  - name : show ip</div><div class="line">    command : ip a</div><div class="line">  - hostname : name=web&#123;&#123; ansible_default_ipv4.address.split(&apos;.&apos;)[-1] &#125;&#125;                         #直接调用res字典，引用成变量</div></pre></td></tr></table></figure>
<ol>
<li>执行一下，看看结果</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">root@jastme:/etc/ansible/playbooks# ansible-playbook changehostname.yml             </div><div class="line"></div><div class="line">PLAY [testall] **************************************************************** </div><div class="line"></div><div class="line">GATHERING FACTS *************************************************************** </div><div class="line">ok: [192.168.32.133]                                                                                               #IP</div><div class="line">&#123;&apos;module_name&apos;: &apos;setup&apos;, &apos;module_complex_args&apos;: &#123;&#125;, &apos;module_args&apos;: &apos;&apos;&#125;</div><div class="line">ok: [192.168.32.132]</div><div class="line">&#123;&apos;module_name&apos;: &apos;setup&apos;, &apos;module_complex_args&apos;: &#123;&#125;, &apos;module_args&apos;: &apos;&apos;&#125;</div><div class="line"></div><div class="line">TASK: [show hostname] ********************************************************* </div><div class="line">changed: [192.168.32.133]</div><div class="line">ZooKeeper-02                                                                                                        #主机名</div><div class="line">&#123;&apos;module_name&apos;: u&apos;shell&apos;, &apos;module_complex_args&apos;: &#123;&#125;, &apos;module_args&apos;: u&apos;hostname&apos;&#125;</div><div class="line">changed: [192.168.32.132]</div><div class="line">ZooKeeper-01</div><div class="line">&#123;&apos;module_name&apos;: u&apos;shell&apos;, &apos;module_complex_args&apos;: &#123;&#125;, &apos;module_args&apos;: u&apos;hostname&apos;&#125;</div><div class="line"></div><div class="line">TASK: [show ip] *************************************************************** </div><div class="line">changed: [192.168.32.133]</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue </div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">2: eth0: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond0 qlen 1000</div><div class="line">    link/ether 00:0c:29:c8:7f:34 brd ff:ff:ff:ff:ff:ff</div><div class="line">3: eth1: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond1 qlen 1000</div><div class="line">    link/ether 00:0c:29:c8:7f:3e brd ff:ff:ff:ff:ff:ff</div><div class="line">4: eth2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000</div><div class="line">    link/ether 00:0c:29:c8:7f:48 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 192.168.32.133/24 brd 192.168.32.255 scope global eth2</div><div class="line">5: eth3: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond0 qlen 1000</div><div class="line">    link/ether 00:0c:29:c8:7f:34 brd ff:ff:ff:ff:ff:ff</div><div class="line">6: eth4: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond1 qlen 1000</div><div class="line">    link/ether 00:0c:29:c8:7f:3e brd ff:ff:ff:ff:ff:ff</div><div class="line">7: bond0: &lt;BROADCAST,MULTICAST,MASTER,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue </div><div class="line">    link/ether 00:0c:29:c8:7f:34 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 144.148.64.230/24 brd 144.148.64.255 scope global bond0</div><div class="line">    inet 144.148.64.231/32 brd 144.148.64.231 scope global bond0:0</div><div class="line">8: bond1: &lt;BROADCAST,MULTICAST,MASTER,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue </div><div class="line">    link/ether 00:0c:29:c8:7f:3e brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 10.25.17.82/24 brd 10.25.17.255 scope global bond1</div><div class="line">    inet 10.25.17.83/32 brd 10.25.17.83 scope global bond1:0</div><div class="line">&#123;&apos;module_name&apos;: u&apos;command&apos;, &apos;module_complex_args&apos;: &#123;&#125;, &apos;module_args&apos;: u&apos;ip a&apos;&#125;</div><div class="line">changed: [192.168.32.132]</div><div class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue </div><div class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</div><div class="line">    inet 127.0.0.1/8 scope host lo</div><div class="line">2: eth0: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond0 qlen 1000</div><div class="line">    link/ether 00:0c:29:58:95:41 brd ff:ff:ff:ff:ff:ff</div><div class="line">3: eth1: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond1 qlen 1000</div><div class="line">    link/ether 00:0c:29:58:95:4b brd ff:ff:ff:ff:ff:ff</div><div class="line">4: eth2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000</div><div class="line">    link/ether 00:0c:29:58:95:55 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 192.168.32.132/24 brd 192.168.32.255 scope global eth2</div><div class="line">5: eth3: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond0 qlen 1000</div><div class="line">    link/ether 00:0c:29:58:95:41 brd ff:ff:ff:ff:ff:ff</div><div class="line">6: eth4: &lt;BROADCAST,MULTICAST,SLAVE,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast master bond1 qlen 1000</div><div class="line">    link/ether 00:0c:29:58:95:4b brd ff:ff:ff:ff:ff:ff</div><div class="line">7: bond0: &lt;BROADCAST,MULTICAST,MASTER,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue </div><div class="line">    link/ether 00:0c:29:58:95:41 brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 144.148.64.229/24 brd 144.148.64.255 scope global bond0</div><div class="line">8: bond1: &lt;BROADCAST,MULTICAST,MASTER,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue </div><div class="line">    link/ether 00:0c:29:58:95:4b brd ff:ff:ff:ff:ff:ff</div><div class="line">    inet 10.25.17.81/24 brd 10.25.17.255 scope global bond1</div><div class="line">&#123;&apos;module_name&apos;: u&apos;command&apos;, &apos;module_complex_args&apos;: &#123;&#125;, &apos;module_args&apos;: u&apos;ip a&apos;&#125;</div><div class="line"></div><div class="line">TASK: [hostname name=web&#123;&#123; ansible_default_ipv4.address.split(&apos;.&apos;)[-1] &#125;&#125;] **** </div><div class="line">changed: [192.168.32.133]</div><div class="line">&#123;&apos;module_name&apos;: u&apos;hostname&apos;, &apos;module_complex_args&apos;: &#123;&#125;, &apos;module_args&apos;: u&apos;name=web133&apos;&#125;                                      #这里就是我们需要的操作  可以看见主机名已经被修改成功</div><div class="line">changed: [192.168.32.132]</div><div class="line">&#123;&apos;module_name&apos;: u&apos;hostname&apos;, &apos;module_complex_args&apos;: &#123;&#125;, &apos;module_args&apos;: u&apos;name=web132&apos;&#125;</div><div class="line"></div><div class="line">PLAY RECAP ******************************************************************** </div><div class="line">192.168.32.132             : ok=4    changed=3    unreachable=0    failed=0   </div><div class="line">192.168.32.133             : ok=4    changed=3    unreachable=0    failed=0</div></pre></td></tr></table></figure>
<ol>
<li>验证</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@ZooKeeper-01 ~]# hostname </div><div class="line">web132</div><div class="line"></div><div class="line">[root@ZooKeeper-02 ~]# hostname </div><div class="line">web133</div></pre></td></tr></table></figure>
<p>验证修改成功。。。</p>
]]></content>
    
    <summary type="html">
    
      ansible 使用主机IP批量修改机器名
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>ansible小结（九）playbook进阶</title>
    <link href="https://plpcm.github.io/blog/2016/10/08/ansible_09/"/>
    <id>https://plpcm.github.io/blog/2016/10/08/ansible_09/</id>
    <published>2016-10-08T02:39:16.000Z</published>
    <updated>2017-01-11T01:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>到目前为止,我们只是简单的运行了几个模块.其实ansible运行更多控制去执行playbook.使用这些技术,你能够执行更加复杂的部署.</p>
<h2 id="并发运行"><a href="#并发运行" class="headerlink" title="并发运行"></a>并发运行</h2><p>ansible默认只会创建5个进程,所以一次任务只能同时控制5台机器执行.那如果你有大量的机器需要控制,或者你希望减少进程数,那你可以采取异步执行.ansible的模块可以把task放进后台,然后轮询它.这使得在一定进程数下能让大量需要的机器同时运作起来.</p>
<p>使用async和poll这两个关键字便可以并行运行一个任务. async这个关键字触发ansible并行运作任务,而async的值是ansible等待运行这个任务的最大超时值,而poll就是ansible检查这个任务是否完成的频率时间.</p>
<p>如果你希望在整个集群里面平行的执行一下updatedb这个命令.使用下面的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- hosts: all</div><div class="line">    tasks:</div><div class="line">      - name: Install mlocate</div><div class="line">        yum: name=mlocate state=installed</div><div class="line"></div><div class="line">      - name: Run updatedb</div><div class="line">        command: /usr/bin/updatedb</div><div class="line">        async: 300</div><div class="line">        poll: 10</div></pre></td></tr></table></figure>
<p>你会发现当你使用上面的例子控制超过5台机器的时候,command.在上面yum模块会先在5台机器上跑,完成后再继续下面的机器.而上面command模块的任务会一次性在所有机器上都执行了,然后监听它的回调结果</p>
<p>如果你的command是控制机器开启一个进程放到后台,那就不需要检查这个任务是否完成了.你只需要继续其他的动作,最后再使用wait_for这个模块去检查之前的进程是否按预期中开启了便可.只需要把poll这个值设置为0,便可以按上面的要求配置ansible不等待job的完成.</p>
<p>最后,或者你还有一种需求是有一个task它是需要运行很长的时间,那你需要设置一直等待这个job完成.这个时候你把async的值设成0便可.</p>
<p>总结来说,大概有以下的一些场景你是需要使用到ansible的polling特性的</p>
<ol>
<li>你有一个task需要运行很长的时间,这个task很可能会达到timeout.</li>
<li>你有一个任务需要在大量的机器上面运行</li>
<li>你有一个任务是不需要等待它完成的</li>
</ol>
<p>当然也有一些场景是不适合使用polling特性的</p>
<ol>
<li>你的这个任务是需要运行完后才能继续另外的任务的</li>
<li>你的这个任务能很快的完成</li>
</ol>
<h2 id="Looping"><a href="#Looping" class="headerlink" title="Looping"></a>Looping</h2><p>在ansible你能够通过不同的输入去重复的执行同一个模块,举个例子,你需要管理几个具有相同权限的文件.你能够用一个for循环迭代一个facts或者variables去减少你的重复劳动.</p>
<p>使用with_items这个关键字就可以完成迭代一个列表.列表里面的每个变量都叫做item.有一些模块譬如yum,它就支持使用with_items去安装一列表的包,而不需要写好多个yum的task</p>
<p>下面来一个with_items的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">  - name: Secure config files</div><div class="line">    file: path=/etc/&#123;&#123; item &#125;&#125; mode=0600 owner=root group=root</div><div class="line">    with_items:</div><div class="line">     - my.cnf</div><div class="line">     - shadow</div><div class="line">     - fstab</div></pre></td></tr></table></figure>
<p>除了使用items轮训,ansible还有一种方式是lookup插件.这些插件可以让ansible从外部取得数据,例如,你或许希望可以通过一种特定模式去上传你的文件.</p>
<p>在这个例子里面,我们会上传所有的public keys到一个目录,然后聚合它们到一个authorized_keys文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">tasks:     #1</div><div class="line">    - name: Make key directory     #2</div><div class="line">      file: path=/root/.sshkeys ensure=directory mode=0700</div><div class="line">      owner=root group=root     #3</div><div class="line">    - name: Upload public keys     #4</div><div class="line">      copy: src=&#123;&#123;item&#125;&#125; dest=/root/.sshkeys mode=0600</div><div class="line">      owner=root group=root     #5</div><div class="line">      with_fileglob:     #6</div><div class="line">       - keys/*.pub     #7</div><div class="line">    - name: Assemble keys into authorized_keys file     #8</div><div class="line">      assemble: src=/root/.sshkeys dest=/root/.ssh/authorized_keys</div><div class="line">      mode=0600 owner=root group=root     #9</div></pre></td></tr></table></figure>
<p>loop模块一般在下面的场景中使用</p>
<ol>
<li>类似的配置模块重复了多遍</li>
<li>fact是一个列表</li>
<li>创建多个文件,然后使用assemble聚合成一个大文件</li>
<li>使用with_fileglob匹配特定的文件管理</li>
</ol>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><p>有一些模块,例如copy这个模块有一些机制能跳过本次模块的运行.其实我们也可以使用自己的条件语句去配置跳过模块,这样方便你服务能够选择使用不同的包管理(apt,yum)和不同的文件系统.并且你还可以使用set_fact这个模块做成更多的差异配置</p>
<p>你能够使用when这个关键字去达到跳过本次模块运行的效果,when关键字后面跟着的是python的表达式,在表达式中你能够使用任何的变量或者fact,当表达式的结果返回的是false,便会跳过本次的模块</p>
<p>下面一段配置就说明了如何在debian和redhat系统中选择apt还是yum包管理,并且如果不是以上两个系统,会用debug模块把系统打印出来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Install VIM</div><div class="line">  hosts: all</div><div class="line">  tasks:    </div><div class="line">    - name: Install VIM via yum   </div><div class="line">      yum: name=vim-enhanced state=installed </div><div class="line">      when: ansible_os_family == &quot;RedHat&quot;</div><div class="line">    - name: Install VIM via apt</div><div class="line">      apt: name=vim state=installed </div><div class="line">      when: ansible_os_family == &quot;Debian&quot;</div><div class="line">    - name: Unexpected OS family</div><div class="line">      debug: msg=&quot;OS Family &#123;&#123; ansible_os_family &#125;&#125; is not supported&quot; fail=yes </div><div class="line">      when: not ansible_os_family == &quot;RedHat&quot; or ansible_os_family == &quot;Debian&quot;</div></pre></td></tr></table></figure>
<p>条件语句还有一种用法,它还可以让你当达到一定的条件的时候暂停下来,等待你的输入确认.一般情况下,当ansible遭遇到error时,它会直接结束运行.那其实你可以当遭遇到不是预期的情况的时候给使用pause模块,这样可以让用户自己决定是否继续运行任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name: pause for unexpected conditions</div><div class="line">pause: prompt=&quot;Unexpected OS&quot;</div><div class="line">when: ansible_os_family != &quot;RedHat&quot;</div></pre></td></tr></table></figure>
<p>下面一些情景建议你使用条件语句做跳过动作</p>
<ol>
<li>job里面有不同操作系统的机器</li>
<li>提示用户,然后再执行操作请求</li>
<li>提高性能,避免运行一个需要执行一段时间模块,而且你知道这个模块不会返回changed</li>
</ol>
<h2 id="task委托"><a href="#task委托" class="headerlink" title="task委托"></a>task委托</h2><p>默认ansible的所有task是在我们的配置的管理机器上面运行的,当在一个独立的群集里面配置,那是适用的.而有一些情况是,某些任务运行的状态是需要传递给其他机器的,在同一个任务你需要在其他机器上执行,这时候你就许多要用task委托</p>
<p>使用delegate_to关键字便可以配置任务在其他机器上执行.其他模块还是在所有配置的管理机器上运行的,当到了这个关键字的任务就是使用委托的机器上运行.而facts还是适用于当前的host,下面我们演示一个例子,使用get_url模块去下载一个web集群的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">  - name: Fetch configuration from all webservers</div><div class="line">￼￼￼￼hosts: webservers</div><div class="line">    tasks:</div><div class="line">      - name: Get config</div><div class="line">        get_url: dest=configs/&#123;&#123; ansible_hostname &#125;&#125; force=yes url=http://&#123;&#123; ansible_hostname &#125;&#125;/diagnostic/config</div><div class="line">        delegate_to: localhost</div></pre></td></tr></table></figure>
<p>如果需要委托loaclhost执行任务,这里提供一个快捷的方式,只要使用local_action作为task的key便行.我们尝试使用这种方式来配置上面的例子,会更加简洁.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---    #1</div><div class="line">   - name: Fetch configuration from all webservers     #2</div><div class="line">     hosts: webservers     #3</div><div class="line">     tasks:     #4</div><div class="line">￼       - name: Get config</div><div class="line">          local_action: get_url dest=configs/&#123;&#123; ansible_hostname &#125;&#125;.cfg url=http://&#123;&#123; ansible_hostname &#125;&#125;/diagnostic/config</div></pre></td></tr></table></figure>
<p>委托不限于localhost,可以在你的inventory里面的任何host.下列一些场景适用使用委托</p>
<ol>
<li>部署之前你希望从负载均衡里面把host移除</li>
<li>更改你的server时候更改dns的指向</li>
<li>创建一个iSCSI卷存储设备</li>
<li>使用一个外部服务器去检测一下服务</li>
</ol>
<h2 id="额外的变量"><a href="#额外的变量" class="headerlink" title="额外的变量"></a>额外的变量</h2><p>大家应该在之前的章节的例子里面有看到group_names这个变量.这个是ansible提供的一个很神奇变量.直至写本书的时候,有7个这样的变量,我会在下面的章节介绍</p>
<h3 id="a-hostvars变量"><a href="#a-hostvars变量" class="headerlink" title="a.hostvars变量"></a>a.hostvars变量</h3><p>hostvars允许你在当前的任务中应用所有host的变量.当setup模块没有运行的时候,只有这些变量将是可用.例如你配置 ${hostvars.hostname.fact}可以访问其他复杂的变量.例如你可以配置${hostvars.ns1.ansible_ distribution}得到ns1这个server的linux发型版本.</p>
<p>下面的例子设置了一个dns_master变量,这是ns1 server的ip.然后这个变量能够在所有机器上调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Setup DNS Servers</div><div class="line">   hosts: allnameservers</div><div class="line">   tasks:</div><div class="line">     - name: Install BIND</div><div class="line">       yum: name=named state=installed</div><div class="line"></div><div class="line">- name: Setup Slaves     #7</div><div class="line">  hosts: slavenamesservers     #8</div><div class="line">  tasks:     #9</div><div class="line">    - name: Get the masters IP</div><div class="line">      set_fact: dns_master=&quot;&#123;&#123; hostvars.ns1.ansible_default_ipv4.address &#125;&#125;&quot;</div><div class="line">    - name: Configure BIND</div><div class="line">      template: dest=/etc/named.conf src/templates/named.conf.j2</div></pre></td></tr></table></figure>
<h3 id="b-groups变量"><a href="#b-groups变量" class="headerlink" title="b.groups变量"></a>b.groups变量</h3><p>groups变量是inventory里面的group分组列表.这个是一个非常强大的工具,能够让你迭代你配置的所有的hosts.看下面的例子.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Configure the database</div><div class="line">  hosts: dbservers</div><div class="line">  user: root</div><div class="line">  tasks:</div><div class="line">    - name: Install mysql</div><div class="line">      yum: name=&#123;&#123; item &#125;&#125; state=installed</div><div class="line">￼￼    with_items:</div><div class="line">        - mysql-server</div><div class="line">        - MySQL-python</div><div class="line">    - name: Start mysql</div><div class="line">      service: name=mysqld state=started enabled=true</div><div class="line"></div><div class="line">    - name: Create a user for all app servers</div><div class="line">      with_items: groups.appservers</div><div class="line">      mysql_user: name=kate password=test host=&#123;&#123; hostvars[item].ansible_eth0.ipv4.address &#125;&#125; state=present</div></pre></td></tr></table></figure>
<p>groups变量实际不是你的hosts变量的列表.它只是你hosts的name的列表.如果你需要调用host里面的变量还需要配合hostvars使用</p>
<p>下面的例子配置创建known_hosts文件</p>
<p>playbook配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">   hosts: all</div><div class="line">   tasks:</div><div class="line">   - name: Setup known hosts</div><div class="line">     hosts: all</div><div class="line">     tasks:</div><div class="line">       - name: Create known_hosts</div><div class="line">         template: src=templates/known_hosts.j2 dest=/etc/ssh/ssh_known_hosts owner=root group=root mode=0644</div></pre></td></tr></table></figure>
<p>template模板</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% for host in groups[&apos;all&apos;] %&#125;</div><div class="line">&#123;&#123; hostvars[host][&apos;ansible_hostname&apos;] &#125;&#125;</div><div class="line">&#123;&#123; hostvars[host][&apos;ansible_ssh_host_key_rsa_public&apos;] &#125;&#125;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure>
<h3 id="c-group-names变量"><a href="#c-group-names变量" class="headerlink" title="c.group_names变量"></a>c.group_names变量</h3><p>group_names是当前host所属的组的列表.这可以用于在条件语句中调用成员的group关系,或者用于debugging.通常来说这变量大部分用于跳过一些task或者在模板中用于条件语句的变量.在下面的例子中,如果你有两套sshd的配置文件,一套用于安全性更加严谨的,一个安全性普通的.然后我们根据group名来配分host到哪个sshd配置下.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Setup SSH</div><div class="line">  hosts: sshservers</div><div class="line">  tasks:</div><div class="line">    - name: For secure machines</div><div class="line">      set_fact: sshconfig=files/ssh/sshd_config_secure</div><div class="line">      when: &quot;&apos;secure&apos; in group_names&quot;</div><div class="line">    - name: For non-secure machines</div><div class="line">      set_fact: sshconfig=files/ssh/sshd_config_default</div><div class="line">      when: &quot;&apos;secure&apos; not in group_names&quot;</div><div class="line">    - name: Copy over the config</div><div class="line">      copy: src=&#123;&#123; sshconfig &#125;&#125; dest=/tmp/sshd_config</div></pre></td></tr></table></figure>
<h3 id="d-inventory-hostname变量"><a href="#d-inventory-hostname变量" class="headerlink" title="d.inventory_hostname变量"></a>d.inventory_hostname变量</h3><p>inventory_hostname是机器的hostname,当你没有使用setup模块,或者由于各种原因导致setup的变量是错误的,你可以选择使用这个变量.此变量可以帮助你初始化你的机器和改变hostname</p>
<h3 id="e-inventory-hostname-short"><a href="#e-inventory-hostname-short" class="headerlink" title="e.inventory_hostname_short"></a>e.inventory_hostname_short</h3><p>inventory_hostname_short类似与上面的inventory_hostname变量,只是它是截取第一个句点的前面的字符,例如hostname是host.example.com,就会只截取到host</p>
<h3 id="f-inventory-dir"><a href="#f-inventory-dir" class="headerlink" title="f.inventory_dir"></a>f.inventory_dir</h3><p>此变量是inventory文件的路径,包括目录与文件名</p>
<h3 id="g-inventory-file"><a href="#g-inventory-file" class="headerlink" title="g.inventory_file"></a>g.inventory_file</h3><p>类似上面的变量,只是它只有文件名</p>
<h2 id="使用变量来查找文件"><a href="#使用变量来查找文件" class="headerlink" title="使用变量来查找文件"></a>使用变量来查找文件</h2><p>所有的模块都可以把变量作为参数的一部分,通过使用””符号扩起来.譬如变量test就是””.这样你就可以通过变量加载特定的文件.例如,你希望根据不同的机器architecture选择不同的NRPE(nagios的客户端)配置文件,那可以像这样的配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Configure NRPE for the right architecture</div><div class="line"> hosts: ansibletest</div><div class="line"> user: root</div><div class="line"> tasks:</div><div class="line">   - name: Copy in the correct NRPE config file</div><div class="line">     copy: src=files/nrpe.&#123;&#123; ansible_architecture &#125;&#125;.conf dest=/etc/nagios/nrpe.cfg</div></pre></td></tr></table></figure>
<p>在copy和tempalate模块里面,你能够使用ansible去查找一组的文件.然后默认使用第一个文件.这能够让你达到效果是,当第一个文件不存在时,会查找第二个文件,如此类推知道最后一个文件还不存在就报fail.使用first_available_file这个关键字便可以到上述效果.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Install an Apache config file</div><div class="line">  hosts: ansibletest</div><div class="line">  user: root</div><div class="line">  tasks:</div><div class="line">   - name: Get the best match for the machine</div><div class="line">     copy: dest=/etc/apache.conf src=&#123;&#123; item &#125;&#125;</div><div class="line">     first_available_file:</div><div class="line">      - files/apache/&#123;&#123; ansible_os_family &#125;&#125;-&#123;&#123; ansible_architecture &#125;&#125;.cfg</div><div class="line">      - files/apache/default-&#123;&#123; ansible_architecture &#125;&#125;.cfg</div><div class="line">      - files/apache/default.cfg</div></pre></td></tr></table></figure>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>unix命令经常需要依赖环境变量,例如C makefiles,installers,和aws cli工具.很幸运,ansible很容易实现,譬如你现在需要控制远程的机器一个文件到s3,那你许多要配置aws的access key.下面我们的例子演示,安装pip,用pip安装aws cli,并且通过cli上传文件到s3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Upload a remote file via S3</div><div class="line">  hosts: ansibletest</div><div class="line">  user: root</div><div class="line">  tasks:</div><div class="line">   - name: Setup EPEL</div><div class="line">     command: rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm creates=/etc/yum.repos.d/epel.repo</div><div class="line">   - name: Install pip</div><div class="line">     yum: name=python-pip state=installed</div><div class="line">   - name: Install the AWS tools</div><div class="line">     pip: name=awscli state=present</div><div class="line">   - name: Upload the file</div><div class="line">     shell: aws s3 put-object --bucket=my-test-bucket --key=&#123;&#123; ansible_hostname &#125;&#125;/fstab --body=/etc/fstab --region=eu-west-1</div><div class="line">  environment:</div><div class="line">    AWS_ACCESS_KEY_ID: XXXXXXXXXXXXXXXXXXX</div><div class="line">    AWS_SECRET_ACCESS_KEY: XXXXXXXXXXXXXXXXXXXXX</div></pre></td></tr></table></figure>
<p>一些模块例如get_url,yum,和apt是需要使用环境变量配置proxy的.下面一些场景也是需要配置环境变量的</p>
<ol>
<li>运行application installers</li>
<li>当运行shell的时候需要添加一些额外的的变量在path里</li>
<li>需要load的一些库不在系统的library路径中</li>
<li>在运行模块时使用LD_PRELOAD hack</li>
</ol>
<h2 id="External-data-lookups"><a href="#External-data-lookups" class="headerlink" title="External data lookups"></a>External data lookups</h2><p>ansible在0.9版本开始引进了lookup插件,这些插件运行ansible在外围获取数据.ansible已经提供了几个插件,但它还是支持自己编写插件.这真的让你使用ansible配置更加伸缩自如</p>
<p>lookup是在master机器运行的python程序.下面一个例子是使用lookup插件获取环境变量里面的http_proxy,然后配置在远端机器,确保远端机器使用相同的proxy下载文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">---     #1</div><div class="line">- name: Downloads a file using the same proxy as the controlling machine</div><div class="line">  hosts: all</div><div class="line">  tasks:</div><div class="line">    - name: Download file</div><div class="line">      get_url: dest=/var/tmp/file.tar.gz url=http://server/file.tar.gz</div><div class="line">      environment:</div><div class="line">       http_proxy: &quot;&#123;&#123; lookup(&apos;env&apos;, &apos;http_proxy&apos;) &#125;&#125;&quot;</div></pre></td></tr></table></figure>
<p>使用with_*能够使用lookup插件迭代出特别的东西.您可以使用任何这样的插件,但最好是返回一个列表.下面的例子让你自动注册webapp,使用下面的例子会创建出虚拟机并配置它</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Registers the app server farm</div><div class="line">  hosts: localhost</div><div class="line">  connection: local</div><div class="line">  vars:</div><div class="line">    hostcount: 5</div><div class="line">  tasks:</div><div class="line">    - name: Register the webapp farm</div><div class="line">      local_action: add_host name=&#123;&#123; item &#125;&#125; groupname=webapp</div><div class="line">      with_sequence: start=1 end=&#123;&#123; hostcount &#125;&#125; format=webapp%02x</div></pre></td></tr></table></figure>
<p>在下面的场景,lookup非常有用</p>
<ol>
<li>复制整个目录的apache配置到conf.d</li>
<li>使用环境变量调整playbook的运行</li>
<li>从DNS TXT记录中获取配置</li>
<li>获取一个命令的输出到一个变量中</li>
</ol>
<h2 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h2><p>几乎所有的模块都是会outputs一些东西,甚至debug模块也会.大多数我们会使用的结果变量是changed.这个changed变量决定了是否要直接handlers和输出的颜色是什么.然而,结果变量还有其他的用途,譬如我需要保存我的结果变量,然后咋我的playbook的其他地方给使用.在下面的例子我们创建了一个/tmp目录,然后在后面我们创建一个/tmp/subtmp使用和前面目录一样的权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Using register</div><div class="line">  hosts: ansibletest</div><div class="line">  user: root</div><div class="line">  tasks:</div><div class="line">   - name: Get /tmp info</div><div class="line">     file: dest=/tmp state=directory</div><div class="line">     register: tmp</div><div class="line">   - name: Set mode on /var/tmp</div><div class="line">     file: dest=/tmp/subtmp mode=&#123;&#123; tmp.mode &#125;&#125; state=directory</div></pre></td></tr></table></figure>
<p>一些模块,例如上面的file模块,是能够获取到一些简单的信息.结合register这个功能,可以让你在playbook里面检查你的环境和计算如何进行</p>
<p>register对于数多场景是很有用的</p>
<ol>
<li>在一台远端的服务器获取一个目录下的一列表的文件,然后下载这些文件</li>
<li>在handler执行之前,发现前面一个task发生了changed,然后执行一个指定的task</li>
<li>获取远端服务器的ssh key的内容,构建出known_hosts文件</li>
</ol>
<h2 id="debugging-playbook"><a href="#debugging-playbook" class="headerlink" title="debugging playbook"></a>debugging playbook</h2><p>有好几种方法去debug我们的playbook.ansible有verbose模式和debug模式,也可以使用例如fetch和get_url模块来协助debug.当你想学习怎样使用一些模块时,这些debugging技术能够帮助你.</p>
<h3 id="a-debug模块"><a href="#a-debug模块" class="headerlink" title="a.debug模块"></a>a.debug模块</h3><p>debug模块使用很简单.它具有两个参数,msg和fail.msg就是打印出来的信息,而当fail参数设置为yes时,会发送失败通知给ansible,然后ansible会停止运行任务.</p>
<p>在下面的例子,配置了使用debug模块去显示远端机器所有的network interface.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">- name: Demonstrate the debug module</div><div class="line">  hosts: ansibletest</div><div class="line">  user: root</div><div class="line">  vars:</div><div class="line">    hostcount: 5</div><div class="line">  tasks:</div><div class="line">    - name: Print interface</div><div class="line">      debug: msg=&quot;&#123;&#123; item &#125;&#125;&quot;</div><div class="line">      with_items: ansible_interfaces</div></pre></td></tr></table></figure>
<p>运行上面的配置会出现这样的输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PLAY [Demonstrate the debug module] *********************************</div><div class="line">GATHERING FACTS *****************************************************</div><div class="line">ok: [ansibletest]</div><div class="line">TASK: [Print IP address] ********************************************</div><div class="line">ok: [ansibletest] =&gt; (item=lo) =&gt; &#123;&quot;item&quot;: &quot;lo&quot;, &quot;msg&quot;: &quot;lo&quot;&#125;</div><div class="line">ok: [ansibletest] =&gt; (item=eth0) =&gt; &#123;&quot;item&quot;: &quot;eth0&quot;, &quot;msg&quot;: &quot;eth0&quot;&#125;</div><div class="line">PLAY RECAP **********************************************************</div><div class="line">ansibletest                : ok=2    changed=0    unreachable=0 failed=0</div></pre></td></tr></table></figure>
<p>如你说见,debug模块可以让你很容易看到在playbook运行期间一些变量</p>
<h3 id="b-verbose模式"><a href="#b-verbose模式" class="headerlink" title="b.verbose模式"></a>b.verbose模式</h3><p>另外的debug选择是verbose模式.当运行verbose模式时,会打印出所有模块运行后的变量.这对于你要使用register功能时候很重要.只需要在执行playbook命令时加上参数–verbose便可以.ansible-playbook –verbose playbook.yml</p>
<h3 id="c-check模式"><a href="#c-check模式" class="headerlink" title="c.check模式"></a>c.check模式</h3><p>除了verbose模式外,ansible还提供了check模式和diff模式.只需要执行playbook时添加参数–check和–diff.check模式运行时,ansible不会真正控制远程机器发生变更.这能够让你获得这次playbook任务中,将会发生changed事件的列表.</p>
<p>很重要的一点是check模式不是完美的.有一些模块是会跳过check模式的.尤其明显的限制是在运行command和shell模块</p>
<p>在diff模式下,当文件发现更变,会打印出变更文件的变更部分.配合check模式使用效果更好</p>
<h3 id="d-pause模块"><a href="#d-pause模块" class="headerlink" title="d.pause模块"></a>d.pause模块</h3><p>另外一个debug技巧是使用pause模块,它可以让你需要在某个地方需要检查远程机器的配置的时候暂停playbook的执行.这样可以让先观察一下运行到这里为止的效果,再判断是否继续运行下去.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这个章节我们更加深入探索了编写playbook的一些细节.现在你应该可以使用一些ansible的特性.例如delegation,looping,conditionals,和fact,registration等等,让你能够更容易的编写和维护你的playbook.我们也看到了如何获取其他host的信息,如何配置环境变量,如何从外围获取到数据.最后我们展示了一些debug技巧,让playbook能按你的预期来执行.</p>
<p>下一章节,我们会学习如何在大规模环境中使用ansible,也会讲到一些方法让你在一些需要运行很久的任务中提高你的性能.我们也会介绍一些特性让你的playbook如何更加可维护,更加解藕,让它们按目的分配到不同的地方.</p>
]]></content>
    
    <summary type="html">
    
      ansbile playbook 的一些高级功能
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>集群运维ansible的playbook配置及template模板的使用</title>
    <link href="https://plpcm.github.io/blog/2016/10/08/ansible_playbook/"/>
    <id>https://plpcm.github.io/blog/2016/10/08/ansible_playbook/</id>
    <published>2016-10-08T01:30:16.000Z</published>
    <updated>2017-01-10T03:42:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>原文</em>  <a href="http://rfyiamcool.blog.51cto.com/1030776/1413031?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://rfyiamcool.blog.51cto.com/1030776/1413031</a></p>
<p>前言：</p>
<p>   学习下ansible的playbook的状态配置管理，说来puppet saltstack都有类似的叫法，只是ansible的叫法更犀利，我当时一看playbook还以为是花花公子的playboy。要使用ansible就要深入学习playbook配置及模板。</p>
<p>先把官网的简单几个语法给说明下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#这个是你选择的主机</div><div class="line">- hosts: webservers</div><div class="line">#这个是变量</div><div class="line">  vars:</div><div class="line">    http_port: 80</div><div class="line">    max_clients: 200</div><div class="line">#远端的执行权限</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">#利用yum模块来操作</div><div class="line">  - name: ensure apache is at the latest version</div><div class="line">    yum: pkg=httpd state=latest</div><div class="line">  - name: write the apache config file</div><div class="line">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</div><div class="line">#触发重启服务器</div><div class="line">    notify:</div><div class="line">    - restart apache</div><div class="line">  - name: ensure apache is running</div><div class="line">    service: name=httpd state=started</div><div class="line">#这里的restart apache 和上面的触发是配对的。这就是handlers的作用。相当于tag</div><div class="line">  handlers:</div><div class="line">    - name: restart apache</div><div class="line">      service: name=httpd state=restarted</div></pre></td></tr></table></figure>
<p>如果有些系统做了相关的sudo限制，需要在playbook里面开启sodu，或者直接偷懒，权限直接为root ！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- hosts: web</div><div class="line">  remote_user: xiaorui</div><div class="line">  tasks:</div><div class="line">    - service: name=nginx state=started</div><div class="line">      sudo: yes</div></pre></td></tr></table></figure>
<p>原文：<a href="http://rfyiamcool.blog.51cto.com/1030776/1413031" target="_blank" rel="external">http://rfyiamcool.blog.51cto.com/1030776/1413031</a></p>
<p>官网的基本完事了，这里就直接实战吧。先说一个简单的ansible playbook的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- name: create user</div><div class="line">  hosts: web</div><div class="line">  user: root</div><div class="line">  gather_facts: false</div><div class="line">  vars:</div><div class="line">  - user: &quot;xiaorui&quot;</div><div class="line">  tasks:</div><div class="line">  - name: create &#123;&#123; user &#125;&#125;</div><div class="line">    user: name=&quot;&#123;&#123; user &#125;&#125;&quot;</div></pre></td></tr></table></figure>
<p>然后我们执行一下，Playbook 采用 YAML 语法结构，因此它们一般比较易于阅读并加以配置。 上面的意思已经很简单明了了，就是创建一个xiaorui的用户，里面引用了一个user的变量，用jinja2模板给赋值进去了。</p>
<p><img src="http://img0.tuicool.com/JnQjaa.jpg!web" alt="wKioL1N3fsaSHalzAAHTC0rzDIA835.jpg"></p>
<p>下面的还用我说么？ 多了一个service的调用，nginx的状态保持为启动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- name: create user</div><div class="line">  hosts: web</div><div class="line">  user: root</div><div class="line">  gather_facts: false</div><div class="line">  vars:</div><div class="line">  - user: &quot;xiaorui&quot;</div><div class="line">  tasks:</div><div class="line">  - name: create &#123;&#123; user &#125;&#125;</div><div class="line">    user: name=&quot;&#123;&#123; user &#125;&#125;&quot;</div><div class="line">  tasks:</div><div class="line">  - service: name=nginx state=started</div></pre></td></tr></table></figure>
<p><img src="http://img2.tuicool.com/rm6NBj.jpg!web" alt="wKioL1N3gIKy6A3FAALVbped54k491.jpg"></p>
<p>使用copy传送文件的时候，经常出些问题，是ansible需要python-selinux包而已.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@67 ~]# ansible-playbook user.yaml</div><div class="line">PLAY [create user] ************************************************************</div><div class="line">TASK: [Copy file to client] ***************************************************</div><div class="line">failed: [10.10.10.66] =&gt; &#123;&quot;failed&quot;: true, &quot;md5sum&quot;: &quot;1f18348f32c9a4694f16426798937ae2&quot;&#125;</div><div class="line">msg: Aborting, target uses selinux but python bindings (libselinux-python) aren&apos;t installed!</div><div class="line">FATAL: all hosts have already failed -- aborting</div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">           to retry, use: --limit @/root/user.yaml.retry</div><div class="line">10.10.10.66                : ok=0    changed=0    unreachable=0    failed=1</div></pre></td></tr></table></figure>
<p>yum install -y libselinux-python 就可以行了</p>
<p>copy是传送文件用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- name: create user</div><div class="line">  hosts: web</div><div class="line">  user: root</div><div class="line">  gather_facts: false</div><div class="line">  remote_user: root</div><div class="line">  vars:</div><div class="line">  - user: &quot;xiaorui&quot;</div><div class="line">  tasks:</div><div class="line">  - name: create &#123;&#123; user &#125;&#125;</div><div class="line">    user: name=&quot;&#123;&#123; user &#125;&#125;&quot;</div><div class="line">  tasks:</div><div class="line">  - service: name=nginx state=started</div><div class="line">  tasks:</div><div class="line">  - name: Copy file to client</div><div class="line">    copy: src=/root/rs.sh dest=/root/ccc</div></pre></td></tr></table></figure>
<p><img src="http://img2.tuicool.com/BVra6b.jpg!web" alt="wKiom1N3hCzzIyC3AAFLhl8AHvo882.jpg"></p>
<p>根据一些特殊的情况，可以做更多的模板，比如这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">vars:</div><div class="line">  - user: &quot;xiaorui&quot;</div><div class="line">  - say: &quot;xiaorui&quot;</div><div class="line">  tasks:</div><div class="line">  - name: create &#123;&#123; user &#125;&#125;</div><div class="line">    user: name=&quot;&#123;&#123; user &#125;&#125;&quot;</div><div class="line">  tasks:</div><div class="line">  - service: name=nginx state=started</div><div class="line">  tasks:</div><div class="line">  - name: Copy file to client</div><div class="line">#    copy: src=/root/rs.sh dest=/root/ccc</div><div class="line">    template: src=/root/testfile dest=/root/&#123;&#123; say &#125;&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img1.tuicool.com/R3iMJ3.jpg!web" alt="wKioL1N3hTagsbsoAAJYvkUANGw451.jpg"></p>
<p>不只是这样，我可以把刚才那个say变量传到文件里面。 爽吧?   其实和saltstack一样。。。。</p>
<p><img src="http://img1.tuicool.com/iYVVRf.jpg!web" alt="wKiom1N3jQDiuj_bAAM_9w42TAg068.jpg"></p>
<p>再来一个和puppet exec一样执行外部命令的模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">- name: &quot;cmd&quot;</div><div class="line">  action: command touch /root/1111</div></pre></td></tr></table></figure>
<p>还有一种shell模块的使用方法 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">- name: run this command and ignore the result</div><div class="line">  shell: /usr/bin/somecommand || /bin/true</div></pre></td></tr></table></figure>
<p>ansible在多任务下，推荐使用多进程模式的。其实就是用multiprocess做的多进程池 ！  -f 10  就是limit 10个任务并发。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook user.yml -f 10</div></pre></td></tr></table></figure>
<p>顺便讲解下，在ansible下，类似puppet的facter，saltstack grains的自定义变量。  -m setup 模块</p>
<p>咱们可以在模板文件中，引用这些setup系统变量的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#xiaorui.cc</div><div class="line">&#123;&#123; ansible_devices.sda.model &#125;&#125;</div><div class="line">&#123;&#123; ansible_hostname &#125;&#125;</div><div class="line">&#123;&#123; ansible_machine &#125;&#125;</div></pre></td></tr></table></figure>
<p>看看我测试机的setup是啥样子的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line">[root@67 ~]# ansible web   -m setup</div><div class="line">10.10.10.66 | success &gt;&gt; &#123;</div><div class="line">	&quot;ansible_facts&quot;: &#123;</div><div class="line">		&quot;ansible_all_ipv4_addresses&quot;: [</div><div class="line">			&quot;10.10.10.66&quot;</div><div class="line">		],</div><div class="line">		&quot;ansible_all_ipv6_addresses&quot;: [</div><div class="line">			&quot;fe80::20c:29ff:fe06:f2dc&quot;</div><div class="line">		],</div><div class="line">		&quot;ansible_architecture&quot;: &quot;i386&quot;,</div><div class="line">		&quot;ansible_bios_date&quot;: &quot;06/02/2011&quot;,</div><div class="line">		&quot;ansible_bios_version&quot;: &quot;6.00&quot;,</div><div class="line">		&quot;ansible_cmdline&quot;: &#123;</div><div class="line">			&quot;KEYBOARDTYPE&quot;: &quot;pc&quot;,</div><div class="line">			&quot;KEYTABLE&quot;: &quot;us&quot;,</div><div class="line">			&quot;LANG&quot;: &quot;zh_CN.UTF-8&quot;,</div><div class="line">			&quot;quiet&quot;: true,</div><div class="line">			&quot;rd_LVM_LV&quot;: &quot;vg_65/lv_swap&quot;,</div><div class="line">			&quot;rd_NO_DM&quot;: true,</div><div class="line">			&quot;rd_NO_LUKS&quot;: true,</div><div class="line">			&quot;rd_NO_MD&quot;: true,</div><div class="line">			&quot;rhgb&quot;: true,</div><div class="line">			&quot;ro&quot;: true,</div><div class="line">			&quot;root&quot;: &quot;/dev/mapper/vg_65-lv_root&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;ansible_date_time&quot;: &#123;</div><div class="line">			&quot;date&quot;: &quot;2014-05-18&quot;,</div><div class="line">			&quot;day&quot;: &quot;18&quot;,</div><div class="line">			&quot;epoch&quot;: &quot;1400373954&quot;,</div><div class="line">			&quot;hour&quot;: &quot;08&quot;,</div><div class="line">			&quot;iso8601&quot;: &quot;2014-05-18T00:45:54Z&quot;,</div><div class="line">			&quot;iso8601_micro&quot;: &quot;2014-05-18T00:45:54.840220Z&quot;,</div><div class="line">			&quot;minute&quot;: &quot;45&quot;,</div><div class="line">			&quot;month&quot;: &quot;05&quot;,</div><div class="line">			&quot;second&quot;: &quot;54&quot;,</div><div class="line">			&quot;time&quot;: &quot;08:45:54&quot;,</div><div class="line">			&quot;tz&quot;: &quot;CST&quot;,</div><div class="line">			&quot;tz_offset&quot;: &quot;+0800&quot;,</div><div class="line">			&quot;year&quot;: &quot;2014&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;ansible_default_ipv4&quot;: &#123;</div><div class="line">			&quot;address&quot;: &quot;10.10.10.66&quot;,</div><div class="line">			&quot;alias&quot;: &quot;eth0&quot;,</div><div class="line">			&quot;gateway&quot;: &quot;10.10.10.1&quot;,</div><div class="line">			&quot;interface&quot;: &quot;eth0&quot;,</div><div class="line">			&quot;macaddress&quot;: &quot;00:0c:29:06:f2:dc&quot;,</div><div class="line">			&quot;mtu&quot;: 1500,</div><div class="line">			&quot;netmask&quot;: &quot;255.255.255.0&quot;,</div><div class="line">			&quot;network&quot;: &quot;10.10.10.0&quot;,</div><div class="line">			&quot;type&quot;: &quot;ether&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;ansible_default_ipv6&quot;: &#123;&#125;,</div><div class="line">		&quot;ansible_devices&quot;: &#123;</div><div class="line">			&quot;sda&quot;: &#123;</div><div class="line">				&quot;holders&quot;: [],</div><div class="line">				&quot;host&quot;: &quot;SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)&quot;,</div><div class="line">				&quot;model&quot;: &quot;VMware Virtual S&quot;,</div><div class="line">				&quot;partitions&quot;: &#123;</div><div class="line">					&quot;sda1&quot;: &#123;</div><div class="line">						&quot;sectors&quot;: &quot;1024000&quot;,</div><div class="line">						&quot;sectorsize&quot;: 512,</div><div class="line">						&quot;size&quot;: &quot;500.00 MB&quot;,</div><div class="line">						&quot;start&quot;: &quot;2048&quot;</div><div class="line">					&#125;,</div><div class="line">					&quot;sda2&quot;: &#123;</div><div class="line">						&quot;sectors&quot;: &quot;418404352&quot;,</div><div class="line">						&quot;sectorsize&quot;: 512,</div><div class="line">						&quot;size&quot;: &quot;199.51 GB&quot;,</div><div class="line">						&quot;start&quot;: &quot;1026048&quot;</div><div class="line">					&#125;</div><div class="line">				&#125;,</div><div class="line">				&quot;removable&quot;: &quot;0&quot;,</div><div class="line">				&quot;rotational&quot;: &quot;1&quot;,</div><div class="line">				&quot;scheduler_mode&quot;: &quot;cfq&quot;,</div><div class="line">				&quot;sectors&quot;: &quot;419430400&quot;,</div><div class="line">				&quot;sectorsize&quot;: &quot;512&quot;,</div><div class="line">				&quot;size&quot;: &quot;200.00 GB&quot;,</div><div class="line">				&quot;support_discard&quot;: &quot;0&quot;,</div><div class="line">				&quot;vendor&quot;: &quot;VMware,&quot;</div><div class="line">			&#125;,</div><div class="line">			&quot;sr0&quot;: &#123;</div><div class="line">				&quot;holders&quot;: [],</div><div class="line">				&quot;host&quot;: &quot;IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)&quot;,</div><div class="line">				&quot;model&quot;: &quot;VMware IDE CDR10&quot;,</div><div class="line">				&quot;partitions&quot;: &#123;&#125;,</div><div class="line">				&quot;removable&quot;: &quot;1&quot;,</div><div class="line">				&quot;rotational&quot;: &quot;1&quot;,</div><div class="line">				&quot;scheduler_mode&quot;: &quot;cfq&quot;,</div><div class="line">				&quot;sectors&quot;: &quot;2097151&quot;,</div><div class="line">				&quot;sectorsize&quot;: &quot;512&quot;,</div><div class="line">				&quot;size&quot;: &quot;1024.00 MB&quot;,</div><div class="line">				&quot;support_discard&quot;: &quot;0&quot;,</div><div class="line">				&quot;vendor&quot;: &quot;NECVMWar&quot;</div><div class="line">			&#125;</div><div class="line">		&#125;,</div><div class="line">		&quot;ansible_distribution&quot;: &quot;CentOS&quot;,</div><div class="line">		&quot;ansible_distribution_release&quot;: &quot;Final&quot;,</div><div class="line">		&quot;ansible_distribution_version&quot;: &quot;6.4&quot;,</div><div class="line">		&quot;ansible_domain&quot;: &quot;ruifengyun.com&quot;,</div><div class="line">		&quot;ansible_env&quot;: &#123;</div><div class="line">			&quot;CVS_RSH&quot;: &quot;ssh&quot;,</div><div class="line">			&quot;G_BROKEN_FILENAMES&quot;: &quot;1&quot;,</div><div class="line">			&quot;HOME&quot;: &quot;/root&quot;,</div><div class="line">			&quot;LANG&quot;: &quot;C&quot;,</div><div class="line">			&quot;LESSOPEN&quot;: &quot;|/usr/bin/lesspipe.sh %s&quot;,</div><div class="line">			&quot;LOGNAME&quot;: &quot;root&quot;,</div><div class="line">			&quot;MAIL&quot;: &quot;/var/mail/root&quot;,</div><div class="line">			&quot;PATH&quot;: &quot;/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin&quot;,</div><div class="line">			&quot;PWD&quot;: &quot;/root&quot;,</div><div class="line">			&quot;SELINUX_LEVEL_REQUESTED&quot;: &quot;&quot;,</div><div class="line">			&quot;SELINUX_ROLE_REQUESTED&quot;: &quot;&quot;,</div><div class="line">			&quot;SELINUX_USE_CURRENT_RANGE&quot;: &quot;&quot;,</div><div class="line">			&quot;SHELL&quot;: &quot;/bin/bash&quot;,</div><div class="line">			&quot;SHLVL&quot;: &quot;2&quot;,</div><div class="line">			&quot;SSH_CLIENT&quot;: &quot;10.10.10.67 50278 22&quot;,</div><div class="line">			&quot;SSH_CONNECTION&quot;: &quot;10.10.10.67 50278 10.10.10.66 22&quot;,</div><div class="line">			&quot;USER&quot;: &quot;root&quot;,</div><div class="line">			&quot;_&quot;: &quot;/usr/bin/python&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;ansible_eth0&quot;: &#123;</div><div class="line">			&quot;active&quot;: true,</div><div class="line">			&quot;device&quot;: &quot;eth0&quot;,</div><div class="line">			&quot;ipv4&quot;: &#123;</div><div class="line">				&quot;address&quot;: &quot;10.10.10.66&quot;,</div><div class="line">				&quot;netmask&quot;: &quot;255.255.255.0&quot;,</div><div class="line">				&quot;network&quot;: &quot;10.10.10.0&quot;</div><div class="line">			&#125;,</div><div class="line">			&quot;ipv6&quot;: [</div><div class="line">				&#123;</div><div class="line">					&quot;address&quot;: &quot;fe80::20c:29ff:fe06:f2dc&quot;,</div><div class="line">					&quot;prefix&quot;: &quot;64&quot;,</div><div class="line">					&quot;scope&quot;: &quot;link&quot;</div><div class="line">				&#125;</div><div class="line">			],</div><div class="line">			&quot;macaddress&quot;: &quot;00:0c:29:06:f2:dc&quot;,</div><div class="line">			&quot;module&quot;: &quot;pcnet32&quot;,</div><div class="line">			&quot;mtu&quot;: 1500,</div><div class="line">			&quot;promisc&quot;: false,</div><div class="line">			&quot;type&quot;: &quot;ether&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;ansible_form_factor&quot;: &quot;Other&quot;,</div><div class="line">		&quot;ansible_fqdn&quot;: &quot;66.ruifengyun.com&quot;,</div><div class="line">		&quot;ansible_hostname&quot;: &quot;66&quot;,</div><div class="line">		&quot;ansible_interfaces&quot;: [</div><div class="line">			&quot;lo&quot;,</div><div class="line">			&quot;eth0&quot;</div><div class="line">		],</div><div class="line">		&quot;ansible_kernel&quot;: &quot;2.6.32-358.el6.i686&quot;,</div><div class="line">		&quot;ansible_lo&quot;: &#123;</div><div class="line">			&quot;active&quot;: true,</div><div class="line">			&quot;device&quot;: &quot;lo&quot;,</div><div class="line">			&quot;ipv4&quot;: &#123;</div><div class="line">				&quot;address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">				&quot;netmask&quot;: &quot;255.0.0.0&quot;,</div><div class="line">				&quot;network&quot;: &quot;127.0.0.0&quot;</div><div class="line">			&#125;,</div><div class="line">			&quot;ipv6&quot;: [</div><div class="line">				&#123;</div><div class="line">					&quot;address&quot;: &quot;::1&quot;,</div><div class="line">					&quot;prefix&quot;: &quot;128&quot;,</div><div class="line">					&quot;scope&quot;: &quot;host&quot;</div><div class="line">				&#125;</div><div class="line">			],</div><div class="line">			&quot;mtu&quot;: 16436,</div><div class="line">			&quot;promisc&quot;: false,</div><div class="line">			&quot;type&quot;: &quot;loopback&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;ansible_machine&quot;: &quot;i686&quot;,</div><div class="line">		&quot;ansible_memfree_mb&quot;: 694,</div><div class="line">		&quot;ansible_memtotal_mb&quot;: 1006,</div><div class="line">		&quot;ansible_mounts&quot;: [</div><div class="line">			&#123;</div><div class="line">				&quot;device&quot;: &quot;/dev/mapper/vg_65-lv_root&quot;,</div><div class="line">				&quot;fstype&quot;: &quot;ext4&quot;,</div><div class="line">				&quot;mount&quot;: &quot;/&quot;,</div><div class="line">				&quot;options&quot;: &quot;rw&quot;,</div><div class="line">				&quot;size_available&quot;: 47512358912,</div><div class="line">				&quot;size_total&quot;: 52844687360</div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				&quot;device&quot;: &quot;/dev/sda1&quot;,</div><div class="line">				&quot;fstype&quot;: &quot;ext4&quot;,</div><div class="line">				&quot;mount&quot;: &quot;/boot&quot;,</div><div class="line">				&quot;options&quot;: &quot;rw&quot;,</div><div class="line">				&quot;size_available&quot;: 449800192,</div><div class="line">				&quot;size_total&quot;: 507744256</div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				&quot;device&quot;: &quot;/dev/mapper/vg_65-lv_home&quot;,</div><div class="line">				&quot;fstype&quot;: &quot;ext4&quot;,</div><div class="line">				&quot;mount&quot;: &quot;/home&quot;,</div><div class="line">				&quot;options&quot;: &quot;rw&quot;,</div><div class="line">				&quot;size_available&quot;: 145807802368,</div><div class="line">				&quot;size_total&quot;: 153817976832</div><div class="line">			&#125;</div><div class="line">		],</div><div class="line">		&quot;ansible_os_family&quot;: &quot;RedHat&quot;,</div><div class="line">		&quot;ansible_pkg_mgr&quot;: &quot;yum&quot;,</div><div class="line">		&quot;ansible_processor&quot;: [</div><div class="line">			&quot;Intel(R) Core(TM) i5-2430M CPU @ 2.40GHz&quot;</div><div class="line">		],</div><div class="line">		&quot;ansible_processor_cores&quot;: 1,</div><div class="line">		&quot;ansible_processor_count&quot;: 1,</div><div class="line">		&quot;ansible_processor_threads_per_core&quot;: 1,</div><div class="line">		&quot;ansible_processor_vcpus&quot;: 1,</div><div class="line">		&quot;ansible_product_name&quot;: &quot;VMware Virtual Platform&quot;,</div><div class="line">		&quot;ansible_product_serial&quot;: &quot;VMware-56 4d bf 2f b7 6c f2 9d-bb f1 a6 0b 1a 06 f2 dc&quot;,</div><div class="line">		&quot;ansible_product_uuid&quot;: &quot;564DBF2F-B76C-F29D-BBF1-A60B1A06F2DC&quot;,</div><div class="line">		&quot;ansible_product_version&quot;: &quot;None&quot;,</div><div class="line">		&quot;ansible_python_version&quot;: &quot;2.6.6&quot;,</div><div class="line">		&quot;ansible_selinux&quot;: &#123;</div><div class="line">			&quot;config_mode&quot;: &quot;enforcing&quot;,</div><div class="line">			&quot;mode&quot;: &quot;permissive&quot;,</div><div class="line">			&quot;policyvers&quot;: 24,</div><div class="line">			&quot;status&quot;: &quot;enabled&quot;,</div><div class="line">			&quot;type&quot;: &quot;targeted&quot;</div><div class="line">		&#125;,</div><div class="line">		&quot;ansible_ssh_host_key_dsa_public&quot;: &quot;AAAAB3NzaC1kc3MAAACBAOjq8+laDLF6/ly/BezPQONwHrIhRmAwYIDysQEIWvvZ4eq/2MJO6GNleSqHd/e6VH1T3SWO4wbPcgTXVRqoQLlT46RQ3hxCCIQ1Q3vThB+QPstMslYFVrtupzSqrRDbtwakEsdp1VlW5RSyBJ7JgzlQn8yQgQwmuS7IXSl2yX5LAAAAFQD+tvRyt+h7lJngeQc0AXWnN/Ij4QAAAIEAtD9SU4ZGmRSX5Ms8W8oqaTED5b/0VqLgT7ear6NkH0zHi0pRGs2kgf0KLqRjuBKqwlYdBj309Oc+Rip23cqb725BWHlrI4mEvVl2FLSOnTi8zd4esYeRga5od26g9VDjIbE0MGB/hUukH5od4dXjnK1zowADyz7jJkrkT+dFpkcAAACAH/0s0vagsSWR4EsXyR0lQsc/lBT1xSCiRFZbPtqMXxmq/3cqM1bbmyK7puQiJDy3ay/vrV/fmLk5RlgbFJB7n/ZVJnEoGfwXSoHJLRC+7tBJIKUm2jskZ1rl3o3ZxWQsSHPGy3sBDE9R1czKf8p1T8gM/EQrHDtTOqmDgrc287M=&quot;,</div><div class="line">		&quot;ansible_ssh_host_key_rsa_public&quot;: &quot;AAAAB3NzaC1yc2EAAAABIwAAAQEAltE2aPOjHIF9Jh79LAm5Dc31VylZk15CqXwnwlQTOqAmFRoPwqnMn+F1oKOTVZ52BAQvitMF4XvNyE0sveSb5hFQkKBsJpEfBPNkQjty1Hgk03HpwHgspu9sk7HmwoPht+qTTm2764YYXiIbDJXva458eWBZsMTPX8frIeNzz1XbwveGbQt+jTYPdqzywp1UEJ4+EwGx9l3zR1WFDqA4Kz3clJJgtoGWasMmNXybr3tHn/csYllWdG0+03fxBM6d4QuR0WmgR7kIxxXnQcvWk0ZNUC3x9dVMeuGPsIvUh2bQOIv1rGWfB24mzIZIjV17RgNXrM8qy2FBZ96Mrvkd3w==&quot;,</div><div class="line">		&quot;ansible_swapfree_mb&quot;: 4063,</div><div class="line">		&quot;ansible_swaptotal_mb&quot;: 4063,</div><div class="line">		&quot;ansible_system&quot;: &quot;Linux&quot;,</div><div class="line">		&quot;ansible_system_vendor&quot;: &quot;VMware, Inc.&quot;,</div><div class="line">		&quot;ansible_user_id&quot;: &quot;root&quot;,</div><div class="line">		&quot;ansible_userspace_architecture&quot;: &quot;i386&quot;,</div><div class="line">		&quot;ansible_userspace_bits&quot;: &quot;32&quot;,</div><div class="line">		&quot;ansible_virtualization_role&quot;: &quot;guest&quot;,</div><div class="line">		&quot;ansible_virtualization_type&quot;: &quot;VMware&quot;</div><div class="line">	&#125;,</div><div class="line">	&quot;changed&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果觉得信息太多，有些乱，可以用filter过滤下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[root@67 ~]# ansible web   -m setup -a &quot;filter=ansible_mounts&quot;</div><div class="line">10.10.10.66 | success &gt;&gt; &#123;</div><div class="line">	&quot;ansible_facts&quot;: &#123;</div><div class="line">		&quot;ansible_mounts&quot;: [</div><div class="line">			&#123;</div><div class="line">				&quot;device&quot;: &quot;/dev/mapper/vg_65-lv_root&quot;,</div><div class="line">				&quot;fstype&quot;: &quot;ext4&quot;,</div><div class="line">				&quot;mount&quot;: &quot;/&quot;,</div><div class="line">				&quot;options&quot;: &quot;rw&quot;,</div><div class="line">				&quot;size_available&quot;: 47511494656,</div><div class="line">				&quot;size_total&quot;: 52844687360</div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				&quot;device&quot;: &quot;/dev/sda1&quot;,</div><div class="line">				&quot;fstype&quot;: &quot;ext4&quot;,</div><div class="line">				&quot;mount&quot;: &quot;/boot&quot;,</div><div class="line">				&quot;options&quot;: &quot;rw&quot;,</div><div class="line">				&quot;size_available&quot;: 449800192,</div><div class="line">				&quot;size_total&quot;: 507744256</div><div class="line">			&#125;,</div><div class="line">			&#123;</div><div class="line">				&quot;device&quot;: &quot;/dev/mapper/vg_65-lv_home&quot;,</div><div class="line">				&quot;fstype&quot;: &quot;ext4&quot;,</div><div class="line">				&quot;mount&quot;: &quot;/home&quot;,</div><div class="line">				&quot;options&quot;: &quot;rw&quot;,</div><div class="line">				&quot;size_available&quot;: 145807802368,</div><div class="line">				&quot;size_total&quot;: 153817976832</div><div class="line">			&#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	&quot;changed&quot;: false</div><div class="line">&#125;</div><div class="line">[root@67 ~]#</div></pre></td></tr></table></figure>
<p>如果想把这些 facts加入到template模板中，中途可能会遇到几处让人困扰的地方。</p>
<p>这边需要开启facts变量功能， gather_facts: no 或者是false是关闭，gather_facts:yes 或者是true都是开启。 当时没注意，找到了官方的实例，直接就干，结果sx了。咋都不行，总是提示define为定义。。。 原来facts没有开。。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% for v in hostvars.iteritems() %&#125;</div><div class="line"> &#123;&#123; v[&apos;ansible_hostname&apos;] &#125;&#125;</div><div class="line">&#123;% endfor %&#125;</div></pre></td></tr></table></figure>
<p><img src="http://img1.tuicool.com/veMrma.jpg!web" alt="wKioL1N3oJaz76H_AAGIIBeF-IU319.jpg"></p>
<p>咱们在看看对端服务器的文件渲染情况。</p>
<p><img src="http://img1.tuicool.com/vyAbIj.jpg!web" alt="wKiom1N3oTLCOVDzAApi8BbXKhQ529.jpg"></p>
<p>用过puppet saltstack的朋友，知道Variables最后可以扩展什么东西，可以高度的定义每个配置文件。  可以根据ip地址，推送配置文件所需要的绑定的ip地址，根据内存大小，定义nginx缓存的内容大小，根据你的cpu核数，做nginx cpu的绑定，根据你的系统，我需要文件路径的判断等等。。。。。</p>
<p>虽然这些fact够多了，貌似很全，但是如果还不够你用，还不足以让你标识定位一台服务器，咋办？ 赞一个 ansible不愧是比saltstack在国外更受欢迎的集群配置工具（据说。。。。 看了youtube的视频，几个老外说，他们热衷于去各种系统框架大会，ansible要比saltstack用的多点，其实我在有一篇文章说过，ansible为啥多？ 有兴趣翻翻看看）。 说回来，saltstack的框架确实相当的优秀，但由于更新太频繁，自己不幸又是那是yum epel的人，结果中枪了。。。。</p>
<p>nima，扯远了，继续聊刚才自定义fact变量，官方说的很明白， 在控制机创建一个文件就行了。。。</p>
<p><img src="http://img1.tuicool.com/mamAJj.jpg!web" alt="wKioL1N3p5KAA_rMAAJeeiqIkag935.jpg"></p>
<p>看懂了吧。 我刚才测试的时候，方法有些土，直接创建的，你可以参照一个例子，copy文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- hosts: web</div><div class="line">  tasks:</div><div class="line">    - name: create directory for ansible custom facts</div><div class="line">      file: state=directory recurse=yes path=/etc/ansible/facts.d</div><div class="line">    - name: install custom impi fact</div><div class="line">      copy: src=ipmi.fact dest=/etc/ansible/facts.d</div><div class="line">    - name: re-read facts after adding custom fact</div><div class="line">      setup: filter=ansible_local</div></pre></td></tr></table></figure>
<p>ansbile还有一个有意思的功能，可以判断上个tasks的值，根据这个值在做判断。 </p>
<p>里面的when ， foot_result。。。。 懂了吧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tasks:</div><div class="line">   - shell: /usr/bin/foo</div><div class="line">     register: foo_result</div><div class="line">     ignore_errors: True</div><div class="line">   - name: &quot;cmd&quot;</div><div class="line">     action: command touch /root/kkkkk</div><div class="line">     when: foo_result.rc == 127</div></pre></td></tr></table></figure>
<p>这个是测试的过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">#http://xiaorui.cc</div><div class="line">[root@67 facts.d]# ansible web -m shell -a &quot;ls /root/&quot;</div><div class="line">10.10.10.66 | success | rc=0 &gt;&gt;</div><div class="line">anaconda-ks.cfg</div><div class="line">date</div><div class="line">install.log</div><div class="line">install.log.syslog</div><div class="line">l.py</div><div class="line">nnn</div><div class="line">qpid-python-0.20</div><div class="line">qpid-python-0.20.tar.gz</div><div class="line">testfile</div><div class="line">urllib-post.py</div><div class="line">[root@67 facts.d]# ansible-playbook  cmd.yaml</div><div class="line">PLAY [web] ********************************************************************</div><div class="line">GATHERING FACTS ***************************************************************</div><div class="line">ok: [10.10.10.66]</div><div class="line">TASK: [shell /usr/bin/foo] ****************************************************</div><div class="line">failed: [10.10.10.66] =&gt; &#123;&quot;changed&quot;: true, &quot;cmd&quot;: &quot;/usr/bin/foo &quot;, &quot;delta&quot;: &quot;0:00:00.002429&quot;, &quot;end&quot;: &quot;2014-05-18 10:25:12.544151&quot;, &quot;rc&quot;: 127, &quot;start&quot;: &quot;2014-05-18 10:25:12.541722&quot;&#125;</div><div class="line">stderr: /bin/sh: /usr/bin/foo: No such file or directory</div><div class="line">...ignoring</div><div class="line">TASK: [cmd] *******************************************************************</div><div class="line">changed: [10.10.10.66]</div><div class="line">PLAY RECAP ********************************************************************</div><div class="line">10.10.10.66                : ok=3    changed=2    unreachable=0    failed=0</div><div class="line">[root@67 facts.d]# ansible web -m shell -a &quot;ls /root/&quot;</div><div class="line">10.10.10.66 | success | rc=0 &gt;&gt;</div><div class="line">anaconda-ks.cfg</div><div class="line">date</div><div class="line">install.log</div><div class="line">install.log.syslog</div><div class="line">kkkkk</div><div class="line">l.py</div><div class="line">nnn</div><div class="line">qpid-python-0.20</div><div class="line">qpid-python-0.20.tar.gz</div><div class="line">testfile</div><div class="line">urllib-post.py</div><div class="line">[root@67 facts.d]#</div></pre></td></tr></table></figure>
<p>好了，先这么着吧。。。。 这两天再讲解下 用ansible如何多元配置nginx、lvs keepalived的环境。</p>
<p>本文出自 “峰云，就她了。” 博客</p>
]]></content>
    
    <summary type="html">
    
      学习下ansible的playbook的状态配置管理，说来puppet saltstack都有类似的叫法，只是ansible的叫法更犀利，我当时一看playbook还以为是花花公子的playboy。要使用ansible就要深入学习playbook配置及模板。
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>自动化工具 ansible中文指南</title>
    <link href="https://plpcm.github.io/blog/2016/10/01/ansible_abc/"/>
    <id>https://plpcm.github.io/blog/2016/10/01/ansible_abc/</id>
    <published>2016-10-01T02:35:16.000Z</published>
    <updated>2017-01-09T07:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是ansible"><a href="#1-什么是ansible" class="headerlink" title="1. 什么是ansible"></a>1. 什么是ansible</h1><p>ansible是个什么东西呢？官方的title是“Ansible is Simple IT Automation”——简单的自动化IT工具。这个工具的目标有这么几项：让我们自动化部署APP；自动化管理配置项；自动化的持续交付；自动化的（AWS）云服务管理。</p>
<p>所有的这几个目标本质上来说都是在一个台或者几台服务器上，执行一系列的命令而已。就像我之前有介绍过的Fabric，以及我们基于Fabric开发的自动化应用部署的工具： <a href="https://github.com/SohuTech/essay" target="_blank" rel="external">Essay</a> 。都是做了这么个事——<strong>批量的在远程服务器上执行命令</strong> 。</p>
<p>那么fabric和ansible有什么差别呢？简单来说fabric像是一个工具箱，提供了很多好用的工具，用来在Remote执行命令，而Ansible则是提供了一套简单的流程，你要按照它的流程来做，就能轻松完成任务。这就像是库和框架的关系一样。</p>
<p>当然，它们之间也是有共同点的——都是基于 <a href="https://github.com/paramiko/paramiko" target="_blank" rel="external">paramiko</a> 开发的。这个paramiko是什么呢？它是一个纯Python实现的ssh协议库。因此fabric和ansible还有一个共同点就是不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的。</p>
<h1 id="2-快速安装"><a href="#2-快速安装" class="headerlink" title="2. 快速安装"></a>2. 快速安装</h1><p>上面简单介绍了下这是个什么东西，怎么安装呢？也很简单，因为ansible是python开发的，因此可以这么安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo esay_install ansible</div><div class="line"># 或者</div><div class="line">sudo pip install ansible</div></pre></td></tr></table></figure>
<p>你也可以从github上clone最新版本，然后安装。</p>
<p>另外需要注意的是，控制服务器（Master）需要安装Python2.6/7，windows上无法使用ansible。被管理的服务器（Managed Node）需要安装Python2.4以上的版本，如果低于2.5，需要安装python-simplejson。</p>
<h1 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h1><p>安装完成之后，先来配置下配置项——.ansible.cfg。ansible执行的时候会按照以下顺序查找配置项:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* ANSIBLE_CONFIG (环境变量)</div><div class="line">* ansible.cfg (当前目录下)</div><div class="line">* .ansible.cfg (用户家目录下)</div><div class="line">* /etc/ansible/ansible.cfg</div></pre></td></tr></table></figure>
<p>还有一个重要的配置是hosts的配置，所有的远程主机需要在hosts中配置，可以分组。当然hosts也可以执行是指定。先来一个简单的例子，在家目录下新建一个hosts文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># hosts</div><div class="line">[local]</div><div class="line">127.0.0.1</div></pre></td></tr></table></figure>
<p>然后在终端执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ansible -i ~/hosts all -a &apos;who&apos;</div><div class="line"></div><div class="line"># 结果如下:</div><div class="line">127.0.0.1 | success | rc=0 &gt;&gt;</div><div class="line">Guest    console  Feb  1 16:29</div><div class="line">the5fire console  Jan 20 19:50</div><div class="line">the5fire ttys018  Feb 22 15:35  (localhost)</div></pre></td></tr></table></figure>
<p>这是一条ad-hoc命令——临时执行命令，ad-hoc是ansible里的一个概念, 在上面命令中就是 -a ，具体稍后再说。命令中的all是值hoss中的所有服务器，当然也可以通过 ansible -i ~/hosts local -a’who’ 这样根据组名指定服务器。</p>
<p>再说到ansible.cfg的配置，默认ansible执行时会从该配置中加载hosts配置，因此可以通过修改.ansible.cfg来指定默认的hosts文件地址:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># .ansible.cfg</div><div class="line">[defaults]</div><div class="line">hostfile=/Users/the5fire/hosts</div></pre></td></tr></table></figure>
<p>这样下次执行，就不需要 -i 参数了。</p>
<h1 id="4-Ad-Hoc"><a href="#4-Ad-Hoc" class="headerlink" title="4. Ad-Hoc"></a>4. Ad-Hoc</h1><p>ad hoc——临时的，在ansible中是指需要快速执行，并且不需要保存的命令。说白了就是执行简单的命令——一条命令。对于复杂的命令后面会说playbook。</p>
<p>那么这个Ad-Hoc命令怎么用呢？上面已经简单的示范了下。在ansible中还有一个Module（模块）的概念，这个模块可以理解为一个库，所有的命令都需要通过模块来执行，比如上面的那个命令: ansible-i ~/hosts all -a ‘who’ ，其实是调用了默认的command模块: ansible -i ~/hosts all -mcommand -a ‘who’ ,除了command模块还有其他很多模块，比如你就想ping下这个服务器是不是还存在可以通过ping模块: ansible -i ~/hosts all -m ping 。</p>
<p>还有几个参数需要记录下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-u username  # 指定ssh连接的用户名</div><div class="line">-f 10        # 指定并发数</div><div class="line">--sudo [-K]    #  如果需要root权限执行的话，-K参数是用来输入root密码的</div></pre></td></tr></table></figure>
<p>你可以通过各种模块来批量完成某个包的安装，或者其他什么需要的操作。 更多模块可以看官网文档: <a href="http://docs.ansible.com/modules.html" target="_blank" rel="external">modules</a></p>
<p>关于Ad-Hoc的更多内容参考这里: <a href="http://docs.ansible.com/intro_adhoc.html" target="_blank" rel="external">intro_adhoc</a></p>
<h1 id="5-简单Playbook"><a href="#5-简单Playbook" class="headerlink" title="5. 简单Playbook"></a>5. 简单Playbook</h1><p>上面的ad hoc是指执行一条临时的不需要保存的命令，那么复杂的命令怎么执行呢？因此也就有了playbook这个命令: ansible-playbook 。</p>
<p>playbook（剧本），顾名思义，就是需要定义一个脚本或者说配置文件，然后定义好做什么。一个简单的playbook是这样的，把当前用户名输出到whoami.rst文件中:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># playbook.yml</div><div class="line">---</div><div class="line">- hosts: local  # hosts中指定</div><div class="line">  remote_user: the5fire  # 如果和当前用户一样，则无需指定</div><div class="line">  tasks:</div><div class="line">    - name: whoami</div><div class="line">      shell: &apos;whoami &gt; whoami.rst&apos;</div></pre></td></tr></table></figure>
<p>执行完这个命令后，你可以在local所代表的服务器的用户目录下发现这么个文件。说道这里，要停一下。这个配置文件是yaml格式的，因此你可能需要去了解下YAML： <a href="http://zh.wikipedia.org/wiki/YAML" target="_blank" rel="external">wiki YAML</a> 。</p>
<p>简单解释下上面的playbook，hosts后面根据local是从hosts中读取的，tasks是是关键词，指明了要执行哪些任务；下面的name是任务的名称，shell是前面提到的module(模块)，单引号中是命令。</p>
<p>除了tasks之外，还有一个handlers的命令，handlers是在执行tasks之后服务器发生变化之后可供调用的handler，使用起来如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># playbook.yml</div><div class="line">---</div><div class="line">- hosts: local  # hosts中指定</div><div class="line">  remote_user: the5fire  # 如果和当前用户一样，则无需指定</div><div class="line">  tasks:</div><div class="line">      - name: whoami</div><div class="line">        copy: src=~/hosts dest=~/hosts.dest  #  本地拷贝到远端</div><div class="line">        notify:  # 如果copy执行完之后~/hosts.dest文件发送了变化，则执行</div><div class="line">            - clear copy  # 调用handler</div><div class="line">  handlers:</div><div class="line">      - name: clear copy</div><div class="line">        shell: &apos;mv ~/hosts.dest hosts.del&apos;  # 假装删除</div></pre></td></tr></table></figure>
<p>上面只是一个演示，再来一个真实的功能——在local服务器上，从git上clone下来我的blog源码，然后创建虚拟环境，创建数据库，最后运行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># deploy-blog-simple.yml</div><div class="line">---</div><div class="line">- hosts: local  # hosts中指定</div><div class="line">remote_user: the5fire  # 如果和当前用户一样，则无需指定</div><div class="line">tasks:</div><div class="line">    - name: check out django_blog</div><div class="line">    git: dest=~/demos/django_selfblog repo=https://github.com/the5fire/django_selfblog</div><div class="line">        update=yes</div><div class="line">    - name: make virtualenv</div><div class="line">    shell: &apos;virtualenv ~/demos&apos;</div><div class="line">    - name: install requirements</div><div class="line">    pip: requirements=~/demos/django_selfblog/requirements.txt</div><div class="line">        virtualenv=~/demos</div><div class="line">    - name: init database</div><div class="line">    shell: . ./bin/activate &amp;&amp; cd django_selfblog/selfblog &amp;&amp; ./init_database.sh chdir=~/demos</div><div class="line">    - name: run manage.py</div><div class="line">    shell: . ./bin/activate &amp;&amp; cd django_selfblog/selfblog &amp;&amp;  ./run.sh chdir=~/demos</div></pre></td></tr></table></figure>
<p>如果你已经配置好ssh账户免密码登录之后，直接执行: ansible-playbookdeploy-blog-simple.yml 就可以在你指定的服务器上部署，并启动blog了。</p>
<p>好了，关于ansible的使用，到这里应该先告一段落了，后面还有一些稍微复杂点的概念：role和include。以后有时间再补充一个续。</p>
<p>在写最后一个playbook的时候，为了最后能正常启动blog程序，花了小半天时间把ansible的代码看了下，下一篇来分享下ansbile里面的一些原理性的东西。</p>
]]></content>
    
    <summary type="html">
    
      这两天花了点时间看了下ansible的文档，也稍稍体验了下，因为是全英文的文档，看起来有些慢，因此想着把常用的东西写篇文章提炼下，这样以后也就方便查阅，同时也方便那些想快速使用ansible的人，能够快速的上手。于是有了这篇文章，命名为“ansible使用指南”。有点标题党，有遗漏的地方欢迎补充^_^
    
    </summary>
    
      <category term="devops" scheme="https://plpcm.github.io/blog/categories/devops/"/>
    
    
      <category term="devops" scheme="https://plpcm.github.io/blog/tags/devops/"/>
    
      <category term="ansible" scheme="https://plpcm.github.io/blog/tags/ansible/"/>
    
  </entry>
  
</feed>
