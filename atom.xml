<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曹淼的“git博客”</title>
  <subtitle>道法自然</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://plpcm.github.io/blog/"/>
  <updated>2016-12-05T09:06:40.000Z</updated>
  <id>https://plpcm.github.io/blog/</id>
  
  <author>
    <name>曹淼</name>
    <email>plp.cm@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>收藏链接</title>
    <link href="https://plpcm.github.io/blog/2016/12/05/hotlink/"/>
    <id>https://plpcm.github.io/blog/2016/12/05/hotlink/</id>
    <published>2016-12-05T09:06:40.000Z</published>
    <updated>2016-12-05T09:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Markdown-语法说明-简体中文版"><a href="#Markdown-语法说明-简体中文版" class="headerlink" title="Markdown 语法说明 (简体中文版)"></a>Markdown 语法说明 (简体中文版)</h4><p><a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></p>
<h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h4 id="zc-buildout-类似virtualenv-使用buildout管理项目"><a href="#zc-buildout-类似virtualenv-使用buildout管理项目" class="headerlink" title="zc.buildout 类似virtualenv 使用buildout管理项目"></a>zc.buildout 类似virtualenv 使用buildout管理项目</h4><p><a href="http://www.infoq.com/cn/presentations/manage-projects-using-buildout?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row2&amp;from=the5fire" target="_blank" rel="external">http://www.infoq.com/cn/presentations/manage-projects-using-buildout?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row2&amp;from=the5fire</a></p>
<a id="more"></a>
<h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><h4 id="powerline-fonts"><a href="#powerline-fonts" class="headerlink" title="powerline fonts"></a>powerline fonts</h4><p><a href="https://github.com/powerline/fonts" target="_blank" rel="external">https://github.com/powerline/fonts</a></p>
<h4 id="一种zsh主题-powerline-shell"><a href="#一种zsh主题-powerline-shell" class="headerlink" title="一种zsh主题 powerline-shell"></a>一种zsh主题 powerline-shell</h4><p><a href="https://github.com/banga/powerline-shell" target="_blank" rel="external">https://github.com/banga/powerline-shell</a></p>
<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h4 id="hexo主题next使用帮助"><a href="#hexo主题next使用帮助" class="headerlink" title="hexo主题next使用帮助"></a>hexo主题next使用帮助</h4><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a></p>
<h4 id="很不错的hexo介绍文章"><a href="#很不错的hexo介绍文章" class="headerlink" title="很不错的hexo介绍文章"></a>很不错的hexo介绍文章</h4><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">http://ibruce.info/2013/11/22/hexo-your-blog/</a></p>
<h4 id="hexo原作者-Hexo-颯爽登場！"><a href="#hexo原作者-Hexo-颯爽登場！" class="headerlink" title="hexo原作者-Hexo 颯爽登場！"></a>hexo原作者-Hexo 颯爽登場！</h4><p><a href="https://zespia.tw/blog/2012/10/11/hexo-debut/" target="_blank" rel="external">https://zespia.tw/blog/2012/10/11/hexo-debut/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Markdown-语法说明-简体中文版&quot;&gt;&lt;a href=&quot;#Markdown-语法说明-简体中文版&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法说明 (简体中文版)&quot;&gt;&lt;/a&gt;Markdown 语法说明 (简体中文版)&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;http://wowubuntu.com/markdown/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; title=&quot;python&quot;&gt;&lt;/a&gt;python&lt;/h3&gt;&lt;h4 id=&quot;zc-buildout-类似virtualenv-使用buildout管理项目&quot;&gt;&lt;a href=&quot;#zc-buildout-类似virtualenv-使用buildout管理项目&quot; class=&quot;headerlink&quot; title=&quot;zc.buildout 类似virtualenv 使用buildout管理项目&quot;&gt;&lt;/a&gt;zc.buildout 类似virtualenv 使用buildout管理项目&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/presentations/manage-projects-using-buildout?utm_source=infoq&amp;amp;utm_medium=videos_homepage&amp;amp;utm_campaign=videos_row2&amp;amp;from=the5fire&quot;&gt;http://www.infoq.com/cn/presentations/manage-projects-using-buildout?utm_source=infoq&amp;amp;utm_medium=videos_homepage&amp;amp;utm_campaign=videos_row2&amp;amp;from=the5fire&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Collection" scheme="https://plpcm.github.io/blog/categories/Collection/"/>
    
    
  </entry>
  
  <entry>
    <title>网站统计中的数据收集原理及实现</title>
    <link href="https://plpcm.github.io/blog/2016/04/04/web-analysis/"/>
    <id>https://plpcm.github.io/blog/2016/04/04/web-analysis/</id>
    <published>2016-04-04T02:30:16.000Z</published>
    <updated>2016-12-06T10:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>网站数据统计分析工具是网站站长和运营人员经常使用的一种工具，比较常用的有<a href="http://www.google.com/analytics/" target="_blank" rel="external">谷歌分析</a>、<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>和<a href="http://ta.qq.com/" target="_blank" rel="external">腾讯分析</a>等等。所有这些统计分析工具的第一步都是网站访问数据的收集。目前主流的数据收集方式基本都是基于javascript的。本文将简要分析这种数据收集的原理，并一步一步实际搭建一个实际的数据收集系统。</p>
<h3 id="数据收集原理分析"><a href="#数据收集原理分析" class="headerlink" title="数据收集原理分析"></a>数据收集原理分析</h3><p>简单来说，网站统计分析工具需要收集到用户浏览目标网站的行为（如打开某网页、点击某按钮、将商品加入购物车等）及行为附加数据（如某下单行为产生的订单金额等）。早期的网站统计往往只收集一种用户行为：页面的打开。而后用户在页面中的行为均无法收集。这种收集策略能满足基本的流量分析、来源分析、内容分析及访客属性等常用分析视角，但是，随着ajax技术的广泛使用及电子商务网站对于电子商务目标的统计分析的需求越来越强烈，这种传统的收集策略已经显得力不能及。</p>
<p>后来，Google在其产品谷歌分析中创新性的引入了可定制的数据收集脚本，用户通过谷歌分析定义好的可扩展接口，只需编写少量的javascript代码就可以实现自定义事件和自定义指标的跟踪和分析。目前百度统计、搜狗分析等产品均照搬了谷歌分析的模式。</p>
<p>其实说起来两种数据收集模式的基本原理和流程是一致的，只是后一种通过javascript收集到了更多的信息。下面看一下现在各种网站统计工具的数据收集基本原理。</p>
<h4 id="流程概览"><a href="#流程概览" class="headerlink" title="流程概览"></a>流程概览</h4><p>首先通过一幅图总体看一下数据收集的基本流程。</p>
<p><img src="http://blog.codinglabs.org/uploads/pictures/how-web-analytics-data-collection-system-work/1.png" alt="img"></p>
<p>图1. 网站统计数据收集基本流程</p>
<p>首先，用户的行为会触发浏览器对被统计页面的一个http请求，这里姑且先认为行为就是打开网页。当网页被打开，页面中的埋点javascript片段会被执行，用过相关工具的朋友应该知道，一般网站统计工具都会要求用户在网页中加入一小段javascript代码，这个代码片段一般会动态创建一个script标签，并将src指向一个单独的js文件，此时这个单独的js文件（图1中绿色节点）会被浏览器请求到并执行，这个js往往就是真正的数据收集脚本。数据收集完成后，js会请求一个后端的数据收集脚本（图1中的backend），这个脚本一般是一个伪装成图片的动态脚本程序，可能由php、python或其它服务端语言编写，js会将收集到的数据通过http参数的方式传递给后端脚本，后端脚本解析参数并按固定格式记录到访问日志，同时可能会在http响应中给客户端种植一些用于追踪的cookie。</p>
<p>上面是一个数据收集的大概流程，下面以谷歌分析为例，对每一个阶段进行一个相对详细的分析。</p>
<h4 id="埋点脚本执行阶段"><a href="#埋点脚本执行阶段" class="headerlink" title="埋点脚本执行阶段"></a>埋点脚本执行阶段</h4><p>若要使用谷歌分析（以下简称GA），需要在页面中插入一段它提供的javascript片段，这个片段往往被称为埋点代码。下面是我的博客中所放置的谷歌分析埋点代码截图：</p>
<p><img src="http://blog.codinglabs.org/uploads/pictures/how-web-analytics-data-collection-system-work/2.png" alt="img"></p>
<p>图2. 谷歌分析埋点代码</p>
<p>其中<code>_gaq</code>是GA的的全局数组，用于放置各种配置，其中每一条配置的格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_gaq.push([&apos;Action&apos;,&apos;param1&apos;,&apos;param2&apos;,...]);</div></pre></td></tr></table></figure>
<p>Action指定配置动作，后面是相关的参数列表。GA给的默认埋点代码会给出两条预置配置，<code>_setAccount</code>用于设置网站标识ID，这个标识ID是在注册GA时分配的。<code>_trackPageview</code>告诉GA跟踪一次页面访问。更多配置请参考：<a href="https://developers.google.com/analytics/devguides/collection/gajs/" target="_blank" rel="external">https://developers.google.com/analytics/devguides/collection/gajs/</a>。实际上，这个<code>_gaq</code>是被当做一个FIFO队列来用的，配置代码不必出现在埋点代码之前，具体请参考上述链接的说明。</p>
<p>就本文来说，<code>_gaq</code>的机制不是重点，重点是后面匿名函数的代码，这才是埋点代码真正要做的。这段代码的主要目的就是引入一个外部的js文件（ga.js），方式是通过document.createElement方法创建一个script并根据协议（http或https）将src指向对应的ga.js，最后将这个element插入页面的dom树上。</p>
<p>注意ga.async = true的意思是异步调用外部js文件，即不阻塞浏览器的解析，待外部js下载完成后异步执行。这个属性是HTML5新引入的。</p>
<h4 id="数据收集脚本执行阶段"><a href="#数据收集脚本执行阶段" class="headerlink" title="数据收集脚本执行阶段"></a>数据收集脚本执行阶段</h4><p>数据收集脚本（ga.js）被请求后会被执行，这个脚本一般要做如下几件事：</p>
<p>1、通过浏览器内置javascript对象收集信息，如页面title（通过document.title）、referrer（上一跳url，通过document.referrer）、用户显示器分辨率（通过windows.screen）、cookie信息（通过document.cookie）等等一些信息。</p>
<p>2、解析<code>_gaq</code>收集配置信息。这里面可能会包括用户自定义的事件跟踪、业务数据（如电子商务网站的商品编号等）等。</p>
<p>3、将上面两步收集的数据按预定义格式解析并拼接。</p>
<p>4、请求一个后端脚本，将信息放在http request参数中携带给后端脚本。</p>
<p>这里唯一的问题是步骤4，javascript请求后端脚本常用的方法是ajax，但是ajax是不能跨域请求的。这里ga.js在被统计网站的域内执行，而后端脚本在另外的域（GA的后端统计脚本是<a href="http://www.google-analytics.com/__utm.gif" target="_blank" rel="external">http://www.google-analytics.com/__utm.gif</a>），ajax行不通。一种通用的方法是js脚本创建一个Image对象，将Image对象的src属性指向后端脚本并携带参数，此时即实现了跨域请求后端。这也是后端脚本为什么通常伪装成gif文件的原因。通过http抓包可以看到ga.js对__utm.gif的请求：</p>
<p><img src="http://blog.codinglabs.org/uploads/pictures/how-web-analytics-data-collection-system-work/3.png" alt="img"></p>
<p>图3. 后端脚本请求的http包</p>
<p>可以看到ga.js在请求__utm.gif时带了很多信息，例如utmsr=1280×1024是屏幕分辨率，utmac=UA-35712773-1是_gaq中解析出的我的GA标识ID等等。</p>
<p>值得注意的是，__utm.gif未必只会在埋点代码执行时被请求，如果用_trackEvent配置了事件跟踪，则在事件发生时也会请求这个脚本。</p>
<p>由于ga.js经过了压缩和混淆，可读性很差，我们就不分析了，具体后面实现阶段我会实现一个功能类似的脚本。</p>
<h4 id="后端脚本执行阶段"><a href="#后端脚本执行阶段" class="headerlink" title="后端脚本执行阶段"></a>后端脚本执行阶段</h4><p>GA的__utm.gif是一个伪装成gif的脚本。这种后端脚本一般要完成以下几件事情：</p>
<p>1、解析http请求参数的到信息。</p>
<p>2、从服务器（WebServer）中获取一些客户端无法获取的信息，如访客ip等。</p>
<p>3、将信息按格式写入log。</p>
<p>5、生成一副1×1的空gif图片作为响应内容并将响应头的Content-type设为image/gif。</p>
<p>5、在响应头中通过Set-cookie设置一些需要的cookie信息。</p>
<p>之所以要设置cookie是因为如果要跟踪唯一访客，通常做法是如果在请求时发现客户端没有指定的跟踪cookie，则根据规则生成一个全局唯一的cookie并种植给用户，否则Set-cookie中放置获取到的跟踪cookie以保持同一用户cookie不变（见图4）。</p>
<p><img src="http://blog.codinglabs.org/uploads/pictures/how-web-analytics-data-collection-system-work/4.png" alt="img"></p>
<p>图4. 通过cookie跟踪唯一用户的原理</p>
<p>这种做法虽然不是完美的（例如用户清掉cookie或更换浏览器会被认为是两个用户），但是是目前被广泛使用的手段。注意，如果没有跨站跟踪同一用户的需求，可以通过js将cookie种植在被统计站点的域下（GA是这么做的），如果要全网统一定位，则通过后端脚本种植在服务端域下（我们待会的实现会这么做）。</p>
<h3 id="系统的设计实现"><a href="#系统的设计实现" class="headerlink" title="系统的设计实现"></a>系统的设计实现</h3><p>根据上述原理，我自己搭建了一个访问日志收集系统。总体来说，搭建这个系统要做如下的事：</p>
<p><img src="http://blog.codinglabs.org/uploads/pictures/how-web-analytics-data-collection-system-work/5.png" alt="img"></p>
<p>图5. 访问数据收集系统工作分解</p>
<p>下面详述每一步的实现。我将这个系统叫做MyAnalytics。</p>
<h4 id="确定收集的信息"><a href="#确定收集的信息" class="headerlink" title="确定收集的信息"></a>确定收集的信息</h4><p>为了简单起见，我不打算实现GA的完整数据收集模型，而是收集以下信息。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:left">途径</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>访问时间</td>
<td style="text-align:left">web server</td>
<td style="text-align:left">Nginx $msec</td>
</tr>
<tr>
<td>IP</td>
<td style="text-align:left">web server</td>
<td style="text-align:left">Nginx $remote_addr</td>
</tr>
<tr>
<td>域名</td>
<td style="text-align:left">javascript</td>
<td style="text-align:left">document.domain</td>
</tr>
<tr>
<td>URL</td>
<td style="text-align:left">javascript</td>
<td style="text-align:left">document.URL</td>
</tr>
<tr>
<td>页面标题</td>
<td style="text-align:left">javascript</td>
<td style="text-align:left">document.title</td>
</tr>
<tr>
<td>分辨率</td>
<td style="text-align:left">javascript</td>
<td style="text-align:left">window.screen.height &amp; width</td>
</tr>
<tr>
<td>颜色深度</td>
<td style="text-align:left">javascript</td>
<td style="text-align:left">window.screen.colorDepth</td>
</tr>
<tr>
<td>Referrer</td>
<td style="text-align:left">javascript</td>
<td style="text-align:left">document.referrer</td>
</tr>
<tr>
<td>浏览客户端</td>
<td style="text-align:left">web server</td>
<td style="text-align:left">Nginx $http_user_agent</td>
</tr>
<tr>
<td>客户端语言</td>
<td style="text-align:left">javascript</td>
<td style="text-align:left">navigator.language</td>
</tr>
<tr>
<td>访客标识</td>
<td style="text-align:left">cookie</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>网站标识</td>
<td style="text-align:left">javascript</td>
<td style="text-align:left">自定义对象</td>
</tr>
</tbody>
</table>
<h4 id="埋点代码"><a href="#埋点代码" class="headerlink" title="埋点代码"></a>埋点代码</h4><p>埋点代码我将借鉴GA的模式，但是目前不会将配置对象作为一个FIFO队列用。一个埋点代码的模板如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">var _maq = _maq || [];</div><div class="line">_maq.push([&apos;_setAccount&apos;, &apos;网站标识&apos;]);</div><div class="line"> </div><div class="line">(function() &#123;</div><div class="line">    var ma = document.createElement(&apos;script&apos;); ma.type =&apos;text/javascript&apos;; ma.async = true;</div><div class="line">    ma.src = (&apos;https:&apos; == document.location.protocol ?&apos;https://analytics&apos; : &apos;http://analytics&apos;) + &apos;.codinglabs.org/ma.js&apos;;</div><div class="line">    var s = document.getElementsByTagName(&apos;script&apos;)[0]; s.parentNode.insertBefore(ma, s);</div><div class="line">&#125;)();</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>这里我启用了二级域名analytics.codinglabs.org，统计脚本的名称为ma.js。当然这里有一点小问题，因为我并没有https的服务器，所以如果一个https站点部署了代码会有问题，不过这里我们先忽略吧。</p>
<h4 id="前端统计脚本"><a href="#前端统计脚本" class="headerlink" title="前端统计脚本"></a>前端统计脚本</h4><p>我写了一个不是很完善但能完成基本工作的统计脚本ma.js：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">(function () &#123;</div><div class="line">    var params = &#123;&#125;;</div><div class="line">    //Document对象数据</div><div class="line">    if(document) &#123;</div><div class="line">        params.domain = document.domain || &apos;&apos;;</div><div class="line">        params.url = document.URL || &apos;&apos;;</div><div class="line">        params.title = document.title || &apos;&apos;;</div><div class="line">        params.referrer = document.referrer || &apos;&apos;;</div><div class="line">    &#125;</div><div class="line">    //Window对象数据</div><div class="line">    if(window &amp;&amp; window.screen) &#123;</div><div class="line">        params.sh = window.screen.height || 0;</div><div class="line">        params.sw = window.screen.width || 0;</div><div class="line">        params.cd = window.screen.colorDepth || 0;</div><div class="line">    &#125;</div><div class="line">    //navigator对象数据</div><div class="line">    if(navigator) &#123;</div><div class="line">        params.lang = navigator.language || &apos;&apos;;</div><div class="line">    &#125;</div><div class="line">    //解析_maq配置</div><div class="line">    if(_maq) &#123;</div><div class="line">        for(var i in _maq) &#123;</div><div class="line">            switch(_maq[i][0]) &#123;</div><div class="line">                case &apos;_setAccount&apos;:</div><div class="line">                    params.account = _maq[i][1];</div><div class="line">                    break;</div><div class="line">                default:</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //拼接参数串</div><div class="line">    var args = &apos;&apos;;</div><div class="line">    for(var i in params) &#123;</div><div class="line">        if(args != &apos;&apos;) &#123;</div><div class="line">            args += &apos;&amp;&apos;;</div><div class="line">        &#125;</div><div class="line">        args += i + &apos;=&apos; + encodeURIComponent(params[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //通过Image对象请求后端脚本</div><div class="line">    var img = new Image(1, 1);</div><div class="line">    img.src = &apos;http://analytics.codinglabs.org/1.gif?&apos; + args;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>整个脚本放在匿名函数里，确保不会污染全局环境。功能在原理一节已经说明，不再赘述。其中1.gif是后端脚本。</p>
<h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><p>日志采用每行一条记录的方式，采用不可见字符^A（ascii码0×01，Linux下可通过ctrl + v ctrl + a输入，下文均用“^A”表示不可见字符0×01），具体格式如下：</p>
<p>时间^AIP^A域名^AURL^A页面标题^AReferrer^A分辨率高^A分辨率宽^A颜色深度^A语言^A客户端信息^A用户标识^A网站标识</p>
<h4 id="后端脚本"><a href="#后端脚本" class="headerlink" title="后端脚本"></a>后端脚本</h4><p>为了简单和效率考虑，我打算直接使用nginx的access_log做日志收集，不过有个问题就是nginx配置本身的逻辑表达能力有限，所以我选用了<a href="http://openresty.org/" target="_blank" rel="external">OpenResty</a>做这个事情。OpenResty是一个基于Nginx扩展出的高性能应用开发平台，内部集成了诸多有用的模块，其中的核心是通过ngx_lua模块集成了Lua，从而在nginx配置文件中可以通过Lua来表述业务。关于这个平台我这里不做过多介绍，感兴趣的同学可以参考其官方网站<a href="http://openresty.org/" target="_blank" rel="external">http://openresty.org/</a>，或者这里有其作者章亦春（agentzh）做的一个非常有爱的介绍OpenResty的slide：<a href="http://agentzh.org/misc/slides/ngx-openresty-ecosystem/" target="_blank" rel="external">http://agentzh.org/misc/slides/ngx-openresty-ecosystem/</a>，关于ngx_lua可以参考：<a href="https://github.com/chaoslawful/lua-nginx-module" target="_blank" rel="external">https://github.com/chaoslawful/lua-nginx-module</a>。</p>
<p>首先，需要在nginx的配置文件中定义日志格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">log_format tick</div><div class="line">&quot;$msec^A$remote_addr^A$u_domain^A$u_url^A$u_title^A$u_referrer^A$u_sh^A$u_sw</div><div class="line">^A$u_cd^A$u_lang^A$http_user_agent^A$u_utrace^A$u_account&quot;;</div></pre></td></tr></table></figure>
<p>注意这里以u_开头的是我们待会会自己定义的变量，其它的是nginx内置变量。</p>
<p>然后是核心的两个location：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">location /1.gif &#123;</div><div class="line"><span class="comment">#伪装成gif文件</span></div><div class="line">    default_type image/gif;</div><div class="line"><span class="comment">#本身关闭access_log，通过subrequest记录log</span></div><div class="line">    access_log off;</div><div class="line"></div><div class="line">    access_by_lua <span class="string">"</span></div><div class="line">        -- 用户跟踪cookie名为__utrace</div><div class="line">        local uid = ngx.var.cookie___utrace</div><div class="line">        if not uid then</div><div class="line">            -- 如果没有则生成一个跟踪cookie，算法为md5(时间戳+IP+客户端信息)</div><div class="line">            uid = ngx.md5(ngx.now() .. ngx.var.remote_addr .. ngx.var.http_user_agent)</div><div class="line">        end</div><div class="line">        ngx.header['Set-Cookie'] = &#123;'__utrace=' .. uid .. '; path=/'&#125;</div><div class="line">        if ngx.var.arg_domain then</div><div class="line">        -- 通过subrequest到/i-log记录日志，将参数和用户跟踪cookie带过去</div><div class="line">            ngx.location.capture('/i-log?' .. ngx.var.args .. '&amp;utrace=' .. uid)</div><div class="line">        end</div><div class="line">    ";</div><div class="line"></div><div class="line">    <span class="comment">#此请求不缓存</span></div><div class="line">    add_header Expires <span class="string">"Fri, 01 Jan 1980 00:00:00 GMT"</span>;</div><div class="line">    add_header Pragma <span class="string">"no-cache"</span>;</div><div class="line">    add_header Cache-Control <span class="string">"no-cache, max-age=0, must-revalidate"</span>;</div><div class="line"></div><div class="line">    <span class="comment">#返回一个1×1的空gif图片</span></div><div class="line">    empty_gif;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /i-log &#123;</div><div class="line">    <span class="comment">#内部location，不允许外部直接访问</span></div><div class="line">    internal;</div><div class="line"></div><div class="line">    <span class="comment">#设置变量，注意需要unescape</span></div><div class="line">    set_unescape_uri <span class="variable">$u_domain</span> <span class="variable">$arg_domain</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_url</span> <span class="variable">$arg_url</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_title</span> <span class="variable">$arg_title</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_referrer</span> <span class="variable">$arg_referrer</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_sh</span> <span class="variable">$arg_sh</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_sw</span> <span class="variable">$arg_sw</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_cd</span> <span class="variable">$arg_cd</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_lang</span> <span class="variable">$arg_lang</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_utrace</span> <span class="variable">$arg_utrace</span>;</div><div class="line">    set_unescape_uri <span class="variable">$u_account</span> <span class="variable">$arg_account</span>;</div><div class="line"></div><div class="line">    <span class="comment">#打开日志</span></div><div class="line">    log_subrequest on;</div><div class="line">    <span class="comment">#记录日志到ma.log，实际应用中最好加buffer，格式为tick</span></div><div class="line">    access_log /path/to/logs/directory/ma.log tick;</div><div class="line"></div><div class="line">    <span class="comment">#输出空字符串</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">''</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要完全解释这段脚本的每一个细节有点超出本文的范围，而且用到了诸多第三方ngxin模块（全都包含在OpenResty中了），重点的地方我都用注释标出来了，可以不用完全理解每一行的意义，只要大约知道这个配置完成了我们在原理一节提到的后端逻辑就可以了。</p>
<h4 id="日志轮转"><a href="#日志轮转" class="headerlink" title="日志轮转"></a>日志轮转</h4><p>真正的日志收集系统访问日志会非常多，时间一长文件变得很大，而且日志放在一个文件不便于管理。所以通常要按时间段将日志切分，例如每天或每小时切分一个日志。我这里为了效果明显，每一小时切分一个日志。我是通过crontab定时调用一个shell脚本实现的，shell脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">_prefix=<span class="string">"/path/to/nginx"</span></div><div class="line">time=`date +%Y%m%d%H`</div><div class="line"> </div><div class="line">mv <span class="variable">$&#123;_prefix&#125;</span>/logs/ma.log <span class="variable">$&#123;_prefix&#125;</span>/logs/ma/ma-<span class="variable">$&#123;time&#125;</span>.log</div><div class="line"><span class="built_in">kill</span> -USR1 `cat <span class="variable">$&#123;_prefix&#125;</span>/logs/nginx.pid`</div><div class="line">&lt;/div&gt;</div><div class="line">这个脚本将ma.log移动到指定文件夹并重命名为ma-&#123;yyyymmddhh&#125;.log，然后向nginx发送USR1信号令其重新打开日志文件。</div><div class="line"></div><div class="line">然后再/etc/crontab里加入一行：</div><div class="line"></div><div class="line">59**** root /path/to/directory/rotatelog.sh</div></pre></td></tr></table></figure>
<p>在每个小时的59分启动这个脚本进行日志轮转操作。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>下面可以测试这个系统是否能正常运行了。我昨天就在我的博客中埋了相关的点，通过http抓包可以看到ma.js和1.gif已经被正确请求：</p>
<p><img src="http://blog.codinglabs.org/uploads/pictures/how-web-analytics-data-collection-system-work/6.png" alt="img"></p>
<p>图6. http包分析ma.js和1.gif的请求</p>
<p>同时可以看一下1.gif的请求参数：</p>
<p><img src="http://blog.codinglabs.org/uploads/pictures/how-web-analytics-data-collection-system-work/7.png" alt="img"></p>
<p>图7. 1.gif的请求参数</p>
<p>相关信息确实也放在了请求参数中。</p>
<p>然后我tail打开日志文件，然后刷新一下页面，因为没有设access log buffer， 我立即得到了一条新日志：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1351060731.360^A0.0.0.0^Awww.codinglabs.org^Ahttp://www.codinglabs.org/^ACodingLabs^A^A1024^A1280^A24^Azh-CN^AMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4^A4d612be64366768d32e623d594e82678^AU-1-1</div></pre></td></tr></table></figure>
<p>注意实际上原日志中的^A是不可见的，这里我用可见的^A替换为方便阅读，另外IP由于涉及隐私我替换为了0.0.0.0。</p>
<p>看一眼日志轮转目录，由于我之前已经埋了点，所以已经生成了很多轮转文件：</p>
<p><img src="http://blog.codinglabs.org/uploads/pictures/how-web-analytics-data-collection-system-work/8.png" alt="轮转日志"></p>
<h4 id="关于分析"><a href="#关于分析" class="headerlink" title="关于分析"></a>关于分析</h4><p>通过上面的分析和开发可以大致理解一个网站统计的日志收集系统是如何工作的。有了这些日志，就可以进行后续的分析了。本文只注重日志收集，所以不会写太多关于分析的东西。</p>
<p>注意，原始日志最好尽量多的保留信息而不要做过多过滤和处理。例如上面的MyAnalytics保留了毫秒级时间戳而不是格式化后的时间，时间的格式化是后面的系统做的事而不是日志收集系统的责任。后面的系统根据原始日志可以分析出很多东西，例如通过IP库可以定位访问者的地域、user agent中可以得到访问者的操作系统、浏览器等信息，再结合复杂的分析模型，就可以做流量、来源、访客、地域、路径等分析了。当然，一般不会直接对原始日志分析，而是会将其清洗格式化后转存到其它地方，如MySQL或HBase中再做分析。</p>
<p>分析部分的工作有很多开源的基础设施可以使用，例如实时分析可以使用<a href="https://github.com/nathanmarz/storm" target="_blank" rel="external">Storm</a>，而离线分析可以使用<a href="http://hadoop.apache.org/" target="_blank" rel="external">Hadoop</a>。当然，在日志比较小的情况下，也可以通过shell命令做一些简单的分析，例如，下面三条命令可以分别得出我的博客在今天上午8点到9点的访问量（PV），访客数（UV）和独立IP数（IP）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">awk -F^A <span class="string">'&#123;print $1&#125;'</span> ma-2012102409.log | wc <span class="_">-l</span></div><div class="line">awk -F^A <span class="string">'&#123;print $12&#125;'</span> ma-2012102409.log | uniq | wc <span class="_">-l</span></div><div class="line">awk -F^A <span class="string">'&#123;print $2&#125;'</span> ma-2012102409.log | uniq | wc <span class="_">-l</span></div></pre></td></tr></table></figure></p>
<p>其它好玩的东西朋友们可以慢慢挖掘。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>GA的开发者文档：<a href="https://developers.google.com/analytics/devguides/collection/gajs/" target="_blank" rel="external">https://developers.google.com/analytics/devguides/collection/gajs/</a><br>一篇关于实现nginx收日志的文章:<br><a href="http://blog.linezing.com/2011/11/%E4%BD%BF%E7%94%A8nginx%E8%AE%B0%E6%97%A5%E5%BF%97" target="_blank" rel="external">http://blog.linezing.com/2011/11/%E4%BD%BF%E7%94%A8nginx%E8%AE%B0%E6%97%A5%E5%BF%97</a><br>关于Nginx可以参考：<a href="http://wiki.nginx.org/Main" target="_blank" rel="external">http://wiki.nginx.org/Main</a><br>OpenResty的官方网站为：<a href="http://openresty.org/" target="_blank" rel="external">http://openresty.org</a><br>ngx_lua模块可参考：<a href="https://github.com/chaoslawful/lua-nginx-module" target="_blank" rel="external">https://github.com/chaoslawful/lua-nginx-module</a><br>本文http抓包使用<a href="http://www.google.com/chrome" target="_blank" rel="external">Chrome</a>浏览器开发者工具，绘制思维导图使用<a href="http://www.xmind.net/" target="_blank" rel="external">Xmind</a>，流程和结构图使用<a href="http://www.texample.net/tikz/" target="_blank" rel="external">Tikz PGF</a></p>
]]></content>
    
    <summary type="html">
    
      网站数据统计分析工具是网站站长和运营人员经常使用的一种工具，比较常用的有谷歌分析、百度统计和腾讯分析等等。所有这些统计分析工具的第一步都是网站访问数据的收集。目前主流的数据收集方式基本都是基于javascript的。本文将简要分析这种数据收集的原理，并一步一步实际搭建一个实际的数据收集系统。 数据...
    
    </summary>
    
      <category term="analysis" scheme="https://plpcm.github.io/blog/categories/analysis/"/>
    
    
      <category term="openresty" scheme="https://plpcm.github.io/blog/tags/openresty/"/>
    
      <category term="analysis" scheme="https://plpcm.github.io/blog/tags/analysis/"/>
    
      <category term="web" scheme="https://plpcm.github.io/blog/tags/web/"/>
    
      <category term="ga" scheme="https://plpcm.github.io/blog/tags/ga/"/>
    
      <category term="nginxlog" scheme="https://plpcm.github.io/blog/tags/nginxlog/"/>
    
  </entry>
  
  <entry>
    <title>Nginx虚拟主机根据不同的域名使用不同的root路径</title>
    <link href="https://plpcm.github.io/blog/2016/03/12/nginx-var-root/"/>
    <id>https://plpcm.github.io/blog/2016/03/12/nginx-var-root/</id>
    <published>2016-03-12T07:33:16.000Z</published>
    <updated>2016-12-02T10:07:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-应用场景描述"><a href="#一-应用场景描述" class="headerlink" title="一 应用场景描述"></a>一 应用场景描述</h2><p>应开发同事需求，需要在开发环境的Nginx能够根据不同的域名使用不同的root路径。<br>例如如果域名是</p>
<p>aa.abc.com,就使用root路径为/data/public/aa</p>
<p>bb.abc.com,就使用root路径为/data/public/bb</p>
<p>cc.abc.com,就是用root路径为/data/public/cc</p>
<h2 id="二-解决方法"><a href="#二-解决方法" class="headerlink" title="二 解决方法"></a>二 解决方法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">        listen      <span class="number">80</span>;</div><div class="line">        server_name *.abc.com;</div><div class="line">        <span class="built_in">set</span> $path_name aa;</div><div class="line">        <span class="keyword">if</span> ($host ~ <span class="string">"bb"</span>)</div><div class="line">        &#123;</div><div class="line">          <span class="built_in">set</span> $path_name bb;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ($host ~ <span class="string">"cc"</span>)</div><div class="line">        &#123;</div><div class="line">          <span class="built_in">set</span> $path_name cc;</div><div class="line">        &#125;</div><div class="line">        root        /data/<span class="keyword">public</span>/$path_name/;</div><div class="line">        location / &#123;</div><div class="line">            <span class="keyword">if</span> (!-e $request_filename)&#123;</div><div class="line">              rewrite /(.*) /index.php last;</div><div class="line">			&#125;</div><div class="line">            index index.php;</div><div class="line">        &#125;</div><div class="line">        location ~ .php$ &#123;</div><div class="line">            fastcgi_pass  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;</div><div class="line">            fastcgi_index  index.php;</div><div class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name;</div><div class="line">            include        fastcgi_params;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里设置变量$path_name,然后在root路径中使用这个变量</p>
<h2 id="三-相关Nginx指令介绍"><a href="#三-相关Nginx指令介绍" class="headerlink" title="三 相关Nginx指令介绍"></a>三 相关Nginx指令介绍</h2><ol>
<li>set指令<br>用于定义一个变量，并为变量赋值<br>作用范围为if,location,server<br>如以上的<br>set $path_name aa;</li>
<li>if指令<br>if(condition) {…}<br>作用范围为<br>如：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if ($host ~ &quot;bb&quot;)</div><div class="line">&#123;</div><div class="line">set $path_name bb;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>if指令用于检查一个条件是否符合，如果条件符合，则执行大括号内的内容。if指令不支持嵌套，不支持多个&amp;&amp;或||<br>可以指定的条件为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1）变量名</div><div class="line">2）变量比较可以使用 =（等于）和!=（不等于）</div><div class="line">3）正则表达式匹配可以使用 ~（区分大小写匹配）和 ~* （不区分大小写匹配）</div><div class="line">  !~ 和 !~* 则表示不匹配</div><div class="line">4）-f和!-f 用来判断文件是否存在</div><div class="line">5) -d和!-d 用来判断目录是否存在</div><div class="line">6) -e和!-e 用来判断文件或目录是否存在</div><div class="line">7）-x和!-x 用来判断文件是否可以执行</div></pre></td></tr></table></figure>
<ol>
<li>Nginx内置变量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$host                            请求的主机名</div><div class="line">$request_filename                    请求的文件名</div></pre></td></tr></table></figure>
<ol>
<li>rewrite指令</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rewrite regex replacement flag;</div></pre></td></tr></table></figure>
<p>用来重定向URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (!-e $request_filename)&#123;</div><div class="line">rewrite /(.*) /index.php last;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>rewrite最后一项为标记位，Nginx支持的标记为有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">last          表示完成rewrite</div><div class="line">permanent      返回301永久重定向，浏览器地址栏会显示跳转后的URL</div><div class="line">break        本条规则匹配完成后，终止其他规则的匹配</div><div class="line">redirect        返回302临时重定向</div></pre></td></tr></table></figure>
<p>last和break完成URL的重定向，浏览器上的地址不会变，但在服务器端上的位置发生了变化。permanent和redirect用来实现URL跳转，浏览器地址栏会显示跳转后的URL。<br>使用alias指令时必须使用last指令，使用proxy_pass指令时必须使用break指令</p>
]]></content>
    
    <summary type="html">
    
      应开发同事需求，需要在开发环境的Nginx能够根据不同的域名使用不同的root路径。例如如果域名是aa.abc.com,就使用root路径为/data/public/aa bb.abc.com,就使用root路径为/data/public/bb cc.abc.com,就是用root路径为/data/public/cc
    
    </summary>
    
      <category term="nginx" scheme="https://plpcm.github.io/blog/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://plpcm.github.io/blog/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>使用OpenResty搭建验证码服务器</title>
    <link href="https://plpcm.github.io/blog/2016/03/05/openresty-luagd-checkcode/"/>
    <id>https://plpcm.github.io/blog/2016/03/05/openresty-luagd-checkcode/</id>
    <published>2016-03-05T02:30:16.000Z</published>
    <updated>2016-12-06T07:52:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用openresty可以很容易的实现生成验证码功能。"><a href="#使用openresty可以很容易的实现生成验证码功能。" class="headerlink" title="使用openresty可以很容易的实现生成验证码功能。"></a>使用openresty可以很容易的实现生成验证码功能。</h2><p><a href="http://www.lua.org/" target="_blank" rel="external">Lua</a>下有个<a href="http://lua-gd.luaforge.net/" target="_blank" rel="external">Lua-GD</a>图形库，通过简单的Lua语句就能控制、生成图片。</p>
<p><strong>环境说明：</strong></p>
<ul>
<li>操作系统：RHEL6.4</li>
<li>RHEL系统默认已安装RPM包的<a href="http://www.lua.org/ftp/lua-5.1.4.tar.gz" target="_blank" rel="external">Lua-5.1.4</a>，但其只具有Lua基本功能，不提供 <code>lua.h</code> 等，但 Lua-GD 编译需要用到 <code>lua.h</code>，故 Lua 需要编译安装。</li>
<li>Lua-GD 版本号格式为<code>X.Y.XrW</code>，其中<code>X.Y.Z</code>代表gd版本，<code>W</code>代表效力版本，所以 lua-gd 版本：<code>lua-gd-2.0.33r2</code> 相对应 gd 版本为：<code>gd-2.0.33</code>，须注意保持一致。</li>
<li>因生成gif的lua脚本中用到md5加密，故需编译安装md5。</li>
<li>因为生成图片需要唯一命名，故依赖 UUID</li>
</ul>
<p><strong>另外：</strong></p>
<p>以下操作均以root用户运行，并且以下脚本的当前目录为<code>/opt</code>，即所有的下载的文件都会保存在<code>/opt</code>目录下。</p>
<p>需要安装的软件如下：</p>
<ul>
<li>OpenResty：WEB应用服务器，部署lua代码，提供URL供用户调用和访问</li>
<li>LuaJIT：LUA代码解释器，使用OpenResty中集成的版本</li>
<li>GD库：C图形库</li>
<li>Lua-GD库：Lua绑定的C图形库，使得lua可调用gd</li>
<li>Lua-Resty-UUID库：用于生成UUID，保证图片命名唯一性</li>
<li>LuaSocket：lua 的 socket 库</li>
</ul>
<h1 id="安装lua"><a href="#安装lua" class="headerlink" title="安装lua"></a>安装lua</h1><p>安装编译所需软件包:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install -y make gcc</div></pre></td></tr></table></figure>
<p>下载并编译安装 lua-5.1：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ yum install -y readline-devel</div><div class="line">$ wget http://www.lua.org/ftp/lua-5.1.4.tar.gz</div><div class="line">$ tar lua-5.1.4.tar.gz</div><div class="line">$ <span class="built_in">cd</span> lua-5.1.4</div><div class="line">$ make linux</div><div class="line">$ make linux install</div></pre></td></tr></table></figure>
<h1 id="安装-gd"><a href="#安装-gd" class="headerlink" title="安装 gd"></a>安装 gd</h1><p>GD版本：gd-2.0.33</p>
<p>下载地址: <a href="http://www.boutell.com/gd/http/gd-2.0.33.tar.gz" target="_blank" rel="external">http://www.boutell.com/gd/http/gd-2.0.33.tar.gz</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ yum install -y libjpeg-devel libpng-devel freetype-devel fontconfig-devel libXpm-devel</div><div class="line"></div><div class="line">$ wget http://www.boutell.com/gd/http/gd-2.0.33.tar.gz</div><div class="line">$ tar zvxf gd-2.0.33.tar.gz</div><div class="line">$ <span class="built_in">cd</span> gd-2.0.33</div><div class="line">$ ./configure</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h1 id="安装-Lua-gd-库"><a href="#安装-Lua-gd-库" class="headerlink" title="安装 Lua-gd 库"></a>安装 Lua-gd 库</h1><p>Lua-GD版本：lua-gd-2.0.33r2</p>
<p>下载地址: <a href="http://jaist.dl.sourceforge.net/project/lua-gd/lua-gd/lua-gd-2.0.33r2%20%28for%20Lua%205.1%29/lua-gd-2.0.33r2.tar.gz" target="_blank" rel="external">http://jaist.dl.sourceforge.net/project/lua-gd/lua-gd/lua-gd-2.0.33r2%20%28for%20Lua%205.1%29/lua-gd-2.0.33r2.tar.gz</a></p>
<p>开发手册可参考: <a href="http://ittner.github.io/lua-gd/manual.html" target="_blank" rel="external">http://ittner.github.io/lua-gd/manual.html</a></p>
<blockquote>
<p>说明：</p>
<p>须先完成gd的安装，且版本号必须为gd-2.0.33 调用Lua-GD库的lua代码须由OpenResty中集成的LuaJIT解释执行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget http://sourceforge.net/projects/lua-gd/files/lua-gd/lua-gd-2.0.33r2%20(<span class="keyword">for</span>%20Lua%205.1)/lua-gd-2.0.33r2.tar.gz/download?use_mirror=jaist</div><div class="line">$ tar zvxf lua-gd-2.0.33r2.tar.gz</div><div class="line">$ <span class="built_in">cd</span> lua-gd-2.0.33r2</div></pre></td></tr></table></figure>
<p>接写来修改Makefile文件：</p>
<ul>
<li>注释第36～42行</li>
<li>打开第48～52行注释，并做如下修改</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">OUTFILE=gd.so</div><div class="line">CFLAGS=-Wall `gdlib-config --cflags` -I/usr/local/include/lua -O3    <span class="comment">//第49行，修改 lua 的 C 库头文件所在路径</span></div><div class="line">GDFEATURES=`gdlib-config --features |sed -e <span class="string">"s/GD_/-DGD_/g"</span>`</div><div class="line">LFLAGS=-shared `gdlib-config --ldflags` `gdlib-config --libs` -llua -lgd  <span class="comment">//第51行，取消lua库版本号51</span></div><div class="line">INSTALL_PATH=/usr/local/lib/lua/<span class="number">5.1</span>    <span class="comment">//第52行，设置 gd.so 的安装路径</span></div><div class="line"></div><div class="line">$(CC) -fPIC -o ...  <span class="comment">//第70行，gcc 编译，添加 -fPIC 参数</span></div></pre></td></tr></table></figure>
<p>然后编译：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h1 id="安装-md5"><a href="#安装-md5" class="headerlink" title="安装 md5"></a>安装 md5</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ yum install unzip</div><div class="line"></div><div class="line">$ wget https://github.com/keplerproject/md5/archive/master.zip -O md5-master.zip</div><div class="line">$ unzip md5-master.zip</div><div class="line">$ <span class="built_in">cd</span> md5-master</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h1 id="安装-Lua-resty-UUID-库"><a href="#安装-Lua-resty-UUID-库" class="headerlink" title="安装 Lua-resty-UUID 库"></a>安装 Lua-resty-UUID 库</h1><p>调用系统的UUID模块生成的由32位16进制（0-f）数组成的的串，本模块进一步压缩为62进制。正如你所想，生成的UUID越长，理论冲突率就越小，请根据业务需要自行斟酌。 基本思想为把系统生成的16字节（128bit）的UUID转换为62进制（a-zA-Z0-9），同时根据业务需要进行截断。</p>
<p>下载地址: <a href="https://github.com/dcshi/lua-resty-UUID/archive/master.zip" target="_blank" rel="external">https://github.com/dcshi/lua-resty-UUID/archive/master.zip</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ yum -y install libuuid-devel</div><div class="line">$ wget https://github.com/dcshi/lua-resty-UUID/archive/master.zip -O lua-resty-UUID-master.zip</div><div class="line">$ unzip lua-resty-UUID-master.zip</div><div class="line">$ <span class="built_in">cd</span> lua-resty-UUID-master/clib</div><div class="line">$ make</div></pre></td></tr></table></figure>
<h1 id="下载nginx-sysguard模块"><a href="#下载nginx-sysguard模块" class="headerlink" title="下载nginx sysguard模块"></a>下载nginx sysguard模块</h1><blockquote>
<p>如果nginx被攻击或者访问量突然变大，nginx会因为负载变高或者内存不够用导致服务器宕机，最终导致站点无法访问。 今天要谈到的解决方法来自淘宝开发的模块nginx-http-sysguard，主要用于当负载和内存达到一定的阀值之时，会执行相应的动作，比如直接返回503,504或者其他的。一直等到内存或者负载回到阀值的范围内，站点恢复可用。简单的说，这几个模块是让nginx有个缓冲时间，缓缓。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/alibaba/nginx-http-sysguard/archive/master.zip -O nginx-http-sysguard-master.zip</div><div class="line">$ unzip nginx-http-sysguard-master.zip</div></pre></td></tr></table></figure>
<h1 id="安装-OpenResty"><a href="#安装-OpenResty" class="headerlink" title="安装 OpenResty"></a>安装 OpenResty</h1><blockquote>
<p>OpenResty（也称为 ngx_openresty）是一个全功能的 Web 应用服务器。它打包了标准的 Nginx 核心，很多的常用的第三方模块，以及它们的大多数依赖项。 OpenResty 中的 LuaJIT 组件默认未激活，需使用 <code>--with-luajit</code> 选项在编译 OpenResty 时激活,使用<code>--add-module</code>，添加上sysguard模块</p>
</blockquote>
<p>安装的版本：1.2.7.6</p>
<p>下载地址：</p>
<ul>
<li><a href="http://openresty.org/#Download" target="_blank" rel="external">http://openresty.org/#Download</a></li>
<li><a href="http://openresty.org/download/ngx_openresty-1.2.7.6.tar.gz" target="_blank" rel="external">http://openresty.org/download/ngx_openresty-1.2.7.6.tar.gz</a></li>
</ul>
<p>先安装依赖软件，然后在编译代码，编译时使用<code>--perfix</code>选项指定 OpenResty 的安装目录，<code>--with-luajit</code> 选项激活 LuaJIT 组件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ yum -y install gcc make gmake openssl-devel pcre-devel readline-devel zlib-devel</div><div class="line"></div><div class="line">$ wget http://openresty.org/download/ngx_openresty-1.2.7.6.tar.gz</div><div class="line">$ tar zvxf ngx_openresty-1.2.7.6.tar.gz</div><div class="line">$ <span class="built_in">cd</span> ngx_openresty-1.2.7.6</div><div class="line">$ ./configure --with-luajit --with-http_stub_status_module --add-module=/opt/nginx-http-sysguard-master/</div><div class="line">$ gmake &amp;&amp; gmake install</div></pre></td></tr></table></figure>
<p>创建软连接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx /usr/sbin/nginx</div></pre></td></tr></table></figure>
<h1 id="安装-Redis-Server"><a href="#安装-Redis-Server" class="headerlink" title="安装 Redis Server"></a>安装 Redis Server</h1><blockquote>
<p>Lua 脚本功能是 Reids 2.6 版本的最大亮点， 通过内嵌对 Lua 环境的支持， Redis 解决了长久以来不能高效地处理 CAS （check-and-set）命令的缺点， 并且可以通过组合使用多个命令， 轻松实现以前很难实现或者不能高效实现的模式。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ wget http://redis.googlecode.com/files/redis-2.6.14.tar.gz</div><div class="line">$ tar zvxf redis-2.6.14.tar.gz</div><div class="line">$ <span class="built_in">cd</span> redis-2.6.14</div><div class="line">$ make &amp;&amp; make install</div><div class="line"></div><div class="line">$ mkdir -p /usr/<span class="built_in">local</span>/redis/conf</div><div class="line">$ cp redis.conf /usr/<span class="built_in">local</span>/redis/conf/</div></pre></td></tr></table></figure>
<h1 id="安装-LuaSocket-库"><a href="#安装-LuaSocket-库" class="headerlink" title="安装 LuaSocket 库"></a>安装 LuaSocket 库</h1><blockquote>
<p>LuaSocket是一个Lua扩展库，它能很方便地提供SMTP、HTTP、FTP等网络议访问操作。</p>
</blockquote>
<p>LuaSocket版本：luasocket-2.0-beta2</p>
<p>下载地址: <a href="http://files.luaforge.net/releases/luasocket/luasocket/luasocket-2.0-beta2/luasocket-2.0-beta2.tar.gz" target="_blank" rel="external">http://files.luaforge.net/releases/luasocket/luasocket/luasocket-2.0-beta2/luasocket-2.0-beta2.tar.gz</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://files.luaforge.net/releases/luasocket/luasocket/luasocket-2.0.2/luasocket-2.0.2.tar.gz</div><div class="line">$ tar zvxf luasocket-2.0.2.tar.gz</div><div class="line">$ <span class="built_in">cd</span> luasocket-2.0.2</div><div class="line">$ make <span class="_">-f</span> makefile.Linux</div></pre></td></tr></table></figure>
<h1 id="安装-redis-lua-库"><a href="#安装-redis-lua-库" class="headerlink" title="安装 redis-lua 库"></a>安装 redis-lua 库</h1><p>Redis-Lua版本：2.0</p>
<p>下载地址: <a href="https://github.com/nrk/redis-lua/archive/version-2.0.zip" target="_blank" rel="external">https://github.com/nrk/redis-lua/archive/version-2.0.zip</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/nrk/redis-lua/archive/version-2.0.zip</div><div class="line">$ unzip redis-lua-version-2.0.zip</div><div class="line">$ <span class="built_in">cd</span> redis-lua-version-2.0</div></pre></td></tr></table></figure>
<p>然后，拷贝redis.lua至所需目录。</p>
<p>lua调用方式如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span>(“redis”)</div></pre></td></tr></table></figure>
<h1 id="安装-zklua"><a href="#安装-zklua" class="headerlink" title="安装 zklua"></a>安装 zklua</h1><blockquote>
<p>zklua 仅依赖 zookeeper c API 实现，一般存在于 <code>zookeeper-X.Y.Z/src/c</code>， 因此你需要首先安装 zookeeper c API。</p>
</blockquote>
<p>zookeeper c API 安装:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget http://mirrors.cnnic.cn/apache/zookeeper/zookeeper-3.4.5/</div><div class="line">$ tar zvxf zookeeper-3.4.5</div><div class="line">$ <span class="built_in">cd</span> zookeeper-3.4.5/src/c</div><div class="line">$ ./configure</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>然后安装zklua：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/forhappy/zklua/archive/master.zip -O zklua-master.zip</div><div class="line">$ unzip zklua-master.zip</div><div class="line">$ <span class="built_in">cd</span> zklua-master</div><div class="line">$ make  &amp;&amp; make install</div></pre></td></tr></table></figure>
<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><h2 id="配置openresty"><a href="#配置openresty" class="headerlink" title="配置openresty"></a>配置openresty</h2><p>openresty安装在<code>/usr/local/openresty</code>目录，在其目录下创建lualib，用于存放上面安装的一些动态连接库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mkdir -p  /usr/<span class="built_in">local</span>/openresty/lualib/captcha</div><div class="line">cp lua-resty-UUID-master/clib/libuuidx.so /usr/<span class="built_in">local</span>/openresty/lualib/captcha/  <span class="comment">#拷贝uuid的库文件</span></div><div class="line">cp -r lua-resty-UUID-master/lib/* /usr/<span class="built_in">local</span>/openresty/lualib/captcha/</div><div class="line"></div><div class="line">cp luasocket-2.0.2/luasocket.so.2.0 /usr/<span class="built_in">local</span>/openresty/lualib/captcha/		<span class="comment">#拷贝luasocket的库文件到/usr/local/openresty/lualib/captcha/</span></div><div class="line">ln <span class="_">-s</span>  /usr/<span class="built_in">local</span>/openresty/lualib/captcha/luasocket.so.2.0 /usr/<span class="built_in">local</span>/openresty/lualib/captcha/socket.so</div><div class="line"></div><div class="line">cp redis-lua-version-2.0/src/redis.lua /usr/<span class="built_in">local</span>/openresty/lualib/captcha/     <span class="comment">#拷贝reis.lua到/usr/local/openresty/lualib/captcha/</span></div><div class="line"></div><div class="line">mkdir -p /usr/<span class="built_in">local</span>/openresty/lualib/zklua										<span class="comment">#拷贝zklua文件到/usr/local/openresty/lualib/captcha/</span></div><div class="line">cp <span class="built_in">cd</span> zklua-master/zklua.so /usr/<span class="built_in">local</span>/openresty/lualib/zklua/</div></pre></td></tr></table></figure>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>创建www用户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd -M <span class="_">-s</span> /sbin/nologin www</div></pre></td></tr></table></figure>
<p>编辑ngnix.conf，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line">    user  www;</div><div class="line">    worker_processes  31;</div><div class="line">    error_log  logs/error.log;</div><div class="line">    pid        logs/nginx.pid;</div><div class="line">    worker_rlimit_nofile 65535;</div><div class="line">    events &#123;</div><div class="line">    	worker_connections 1024;</div><div class="line">    	use epoll;</div><div class="line">	   &#125;</div><div class="line"></div><div class="line">    http &#123;</div><div class="line">	include       	mime.types;</div><div class="line">	default_type 	application/octet-stream;</div><div class="line">	log_format  	main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line">			      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></div><div class="line">	               	      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</div><div class="line">	access_log  	logs/access.log  main;</div><div class="line">	sendfile        on;</div><div class="line">	tcp_nopush      on;</div><div class="line">	tcp_nodelay     on;</div><div class="line">	keepalive_timeout  65;</div><div class="line">	gzip  		on;</div><div class="line">	gzip_min_length 1K;</div><div class="line">	gzip_buffers 4 	8k;</div><div class="line">	gzip_comp_level 2;</div><div class="line">	gzip_types 	text/plain image/gif image/png image/jpg application/x-javascript text/css application/xml text/javascript;</div><div class="line">	gzip_vary 	on;</div><div class="line">	</div><div class="line">	upstream redis-pool&#123;</div><div class="line">	        server 127.0.0.1:10005;</div><div class="line">		keepalive 1024;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        sysguard on;</div><div class="line">        sysguard_load load=90 action=/50x.html;</div><div class="line">        server_tokens off;</div><div class="line">        listen       10002;</div><div class="line">        server_name  localhost;</div><div class="line">        charset utf-8;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">        root   html;</div><div class="line">        index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">	<span class="comment">#-----------------------------------------------------------------------------------------</span></div><div class="line">	</div><div class="line">	<span class="comment"># 验证码生成</span></div><div class="line">	location /captcha &#123;</div><div class="line">		<span class="built_in">set</span> <span class="variable">$percent</span> 0;</div><div class="line">		<span class="built_in">set</span> <span class="variable">$modecount</span> 1;</div><div class="line">		content_by_lua_file /usr/<span class="built_in">local</span>/openresty/nginx/luascripts/luajit/captcha.lua;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">#-----------------------------------------------------------------------------------------</span></div><div class="line">	</div><div class="line">	<span class="comment"># 验证码校验	</span></div><div class="line">	location /captcha-check &#123;</div><div class="line">	        content_by_lua_file /usr/<span class="built_in">local</span>/openresty/nginx/luascripts/luajit/captcha-check.lua;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment"># 验证码删除	</span></div><div class="line">	location /captcha-delete &#123;</div><div class="line">		content_by_lua_file /usr/<span class="built_in">local</span>/openresty/nginx/luascripts/luajit/captcha-delete.lua;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">#-----------------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line">	<span class="comment"># 样式1-静态图片</span></div><div class="line">	location /mode1 &#123;</div><div class="line">		content_by_lua_file /usr/<span class="built_in">local</span>/openresty/nginx/luascripts/luajit/mode/mode1.lua;</div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	<span class="comment">#-----------------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line">	<span class="comment"># redis中添加key-value</span></div><div class="line">	location /redisSetQueue &#123;</div><div class="line">		internal;</div><div class="line">		set_unescape_uri <span class="variable">$key</span> <span class="variable">$arg_key</span>;</div><div class="line">		set_unescape_uri <span class="variable">$val</span> <span class="variable">$arg_val</span>; </div><div class="line">		redis2_query rpush <span class="variable">$key</span> <span class="variable">$val</span>;</div><div class="line">		redis2_pass redis-pool;</div><div class="line">	&#125;</div><div class="line">	<span class="comment"># redis中获取captcha-string</span></div><div class="line">	location /redisGetStr &#123;</div><div class="line">		internal;</div><div class="line">		set_unescape_uri <span class="variable">$key</span> <span class="variable">$arg_key</span>;</div><div class="line">		redis2_query lindex <span class="variable">$key</span> 0;</div><div class="line">		redis2_pass redis-pool;</div><div class="line">	&#125;</div><div class="line">	<span class="comment"># redis中获取captcha-image</span></div><div class="line">	location /redisGetImg &#123;</div><div class="line">		internal;</div><div class="line">		set_unescape_uri <span class="variable">$key</span> <span class="variable">$arg_key</span>;</div><div class="line">		redis2_query lindex <span class="variable">$key</span> 1;</div><div class="line">		redis2_pass redis-pool;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">#-----------------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line">        location ~.*.(gif|jpg|png)$ &#123;</div><div class="line">        expires 10s;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        error_page  404              /404.html;</div><div class="line">        error_page  500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面将 ngnix 的端口修改为10002。</p>
<p>/usr/local/openresty/nginx/luascripts/luajit/captcha.lua 是用于生成验证码，内容如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--中控脚本</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">--部分应用预先生成</span></div><div class="line"><span class="comment">--部分应用实时生成，并且随机选择生成样式</span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line"><span class="comment">----------------------------------------------------------------------------------------------</span></div><div class="line"><span class="built_in">package</span>.path = <span class="string">"/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/captcha/?.lua;"</span></div><div class="line"><span class="built_in">package</span>.cpath = <span class="string">"/usr/local/openresty/lualib/?.so;/usr/local/openresty/lualib/captcha/?.so;"</span></div><div class="line"><span class="comment">----------------------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">--设置随机种子</span></div><div class="line"><span class="keyword">local</span> resty_uuid=<span class="built_in">require</span>(<span class="string">"resty.uuid"</span>)</div><div class="line"><span class="built_in">math</span>.randomseed(<span class="built_in">tonumber</span>(resty_uuid.gennum20()))</div><div class="line"></div><div class="line"><span class="comment">-----------------------------------------------------------------------------------------</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">--[[ 预先生成 ]]</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">math</span>.random(<span class="number">1</span>,<span class="number">99</span>)&lt;<span class="built_in">tonumber</span>(ngx.var.percent) <span class="keyword">then</span></div><div class="line">        </div><div class="line">    <span class="comment">--在redis的预先生成key中随机选择keyid</span></div><div class="line">    <span class="keyword">local</span> kid=<span class="built_in">math</span>.random(<span class="number">1</span>,ngx.var.pregencount)</div><div class="line">        <span class="keyword">local</span> res = ngx.location.capture(<span class="string">'/redisGetImg'</span>,&#123; args = &#123; key = kid &#125; &#125;)</div><div class="line">        </div><div class="line">    <span class="keyword">if</span> res.status==<span class="number">200</span> <span class="keyword">then</span></div><div class="line">            <span class="keyword">local</span> parser=<span class="built_in">require</span>(<span class="string">"redis.parser"</span>)</div><div class="line">                <span class="keyword">local</span> pic=parser.parse_reply(res.body)</div><div class="line">                ngx.header.content_type=<span class="string">"application/octet-stream"</span></div><div class="line">        </div><div class="line">        <span class="comment">--在header中返回用于去redis中查找记录的key</span></div><div class="line">                ngx.header.picgid=kid</div><div class="line">        </div><div class="line">        <span class="comment">--在body中返回captcha</span></div><div class="line">                ngx.say(pic)</div><div class="line"></div><div class="line">                ngx.exit(<span class="number">200</span>)</div><div class="line">        <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-----------------------------------------------------------------------------------------</span></div><div class="line"><span class="comment">--</span></div><div class="line"><span class="comment">--[[ 实时生成 ]]</span></div><div class="line"><span class="comment">--</span></div><div class="line"></div><div class="line"><span class="comment">--随机选择captcha模式X</span></div><div class="line"><span class="keyword">local</span> mode=<span class="built_in">math</span>.random(<span class="number">1</span>,ngx.var.modecount)</div><div class="line"></div><div class="line"><span class="comment">--调用modeX.lua，生成captcha</span></div><div class="line"><span class="keyword">local</span> res = ngx.location.capture(<span class="string">"/mode"</span>..mode)</div><div class="line"><span class="keyword">if</span> res.status==<span class="number">200</span> <span class="keyword">then</span></div><div class="line">    ngx.header.content_type=<span class="string">"application/octet-stream"</span></div><div class="line"></div><div class="line">    <span class="comment">--在header中返回用于去redis中查找记录的key</span></div><div class="line">    ngx.header.picgid=res.header.picgid</div><div class="line">        </div><div class="line">    <span class="comment">--在body中返回captcha</span></div><div class="line">    ngx.say(res.body)</div><div class="line"></div><div class="line">        ngx.exit(<span class="number">200</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>/usr/local/openresty/nginx/luascripts/luajit/captcha-check.lua 用于校验验证码：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--[[captcha check]]</span></div><div class="line"></div><div class="line"><span class="comment">----------------------------------------------------------------------------------------------</span></div><div class="line"><span class="built_in">package</span>.path = <span class="string">"/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/captcha/?.lua;"</span></div><div class="line"><span class="built_in">package</span>.cpath = <span class="string">"/usr/local/openresty/lualib/?.so;/usr/local/openresty/lualib/captcha/?.so;"</span></div><div class="line"><span class="comment">----------------------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">--获取请求中参数</span></div><div class="line"><span class="keyword">local</span> uriargs = ngx.req.get_uri_args()</div><div class="line"><span class="keyword">local</span> picgid = uriargs[<span class="string">"image"</span>]</div><div class="line"><span class="keyword">local</span> ustr=<span class="built_in">string</span>.lower(uriargs[<span class="string">"str"</span>])</div><div class="line"></div><div class="line"><span class="comment">--查找redis中key为picgid的记录</span></div><div class="line"><span class="keyword">local</span> res = ngx.location.capture(<span class="string">'/redisGetStr'</span>,&#123; args = &#123; key = picgid &#125; &#125;)</div><div class="line"><span class="keyword">if</span> res.status==<span class="number">200</span> <span class="keyword">then</span></div><div class="line">    <span class="keyword">local</span> parser=<span class="built_in">require</span>(<span class="string">"redis.parser"</span>)</div><div class="line">    <span class="keyword">local</span> reply=parser.parse_reply(res.body)</div><div class="line">    <span class="keyword">local</span> rstr=<span class="built_in">string</span>.lower(reply)</div><div class="line">    </div><div class="line">    <span class="comment">--匹配用户输入字符串与redis中记录的字符串，一致返回True，否则返回False</span></div><div class="line">    ngx.header.content_type=<span class="string">"text/plain"</span></div><div class="line">    <span class="keyword">if</span> ustr == rstr <span class="keyword">then</span></div><div class="line">        ngx.say(<span class="string">"True"</span>)</div><div class="line">    <span class="keyword">else</span></div><div class="line">        ngx.say(<span class="string">"False"</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    <span class="comment">--匹配操作后删除redis中该key记录</span></div><div class="line">    <span class="keyword">local</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>)</div><div class="line">    <span class="keyword">local</span> client = redis.connect(<span class="string">'127.0.0.1'</span>, <span class="number">10005</span>)</div><div class="line">    client:del(picgid)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>/usr/local/openresty/nginx/luascripts/luajit/mode/mode1.lua 是生成静态验证码图片：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--静态图片</span></div><div class="line"></div><div class="line"><span class="comment">------------------------------------------------------------------------------------------------</span></div><div class="line"><span class="built_in">package</span>.path = <span class="string">"/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/captcha/?.lua;"</span></div><div class="line"><span class="built_in">package</span>.cpath = <span class="string">"/usr/local/openresty/lualib/?.so;/usr/local/openresty/lualib/captcha/?.so;"</span></div><div class="line"><span class="comment">------------------------------------------------------------------------------------------------</span></div><div class="line"></div><div class="line"><span class="comment">--Redis中插入记录方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRedis</span><span class="params">(skey, sval)</span></span></div><div class="line">        <span class="keyword">local</span> res = ngx.location.capture(<span class="string">'/redisSetQueue'</span>, &#123;args= &#123;key=skey,val=sval&#125;&#125;)</div><div class="line">        <span class="keyword">if</span> res.status == <span class="number">200</span> <span class="keyword">then</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span></div><div class="line">        <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">--设置随机种子</span></div><div class="line"><span class="keyword">local</span> resty_uuid=<span class="built_in">require</span>(<span class="string">"resty.uuid"</span>)</div><div class="line"><span class="built_in">math</span>.randomseed(<span class="built_in">tonumber</span>(resty_uuid.gennum20()))</div><div class="line"></div><div class="line"><span class="comment">--在32个备选字符中随机筛选4个作为captcha字符串</span></div><div class="line"><span class="keyword">local</span> dict=&#123;<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'Z'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>&#125;</div><div class="line"><span class="keyword">local</span> stringmark=<span class="string">""</span></div><div class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">4</span> <span class="keyword">do</span></div><div class="line">       stringmark=stringmark..dict[<span class="built_in">math</span>.random(<span class="number">1</span>,<span class="number">32</span>)]</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">--图片基本info</span></div><div class="line"><span class="comment">--picgid</span></div><div class="line"><span class="keyword">local</span> filename= <span class="string">"1"</span>..resty_uuid.gen20()..<span class="string">".png"</span></div><div class="line"><span class="comment">--图片78x26</span></div><div class="line"><span class="keyword">local</span> xsize = <span class="number">78</span></div><div class="line"><span class="keyword">local</span> ysize = <span class="number">26</span></div><div class="line"><span class="comment">--字体大小</span></div><div class="line"><span class="keyword">local</span> wsize = <span class="number">17.5</span></div><div class="line"><span class="comment">--干扰线(yes/no)</span></div><div class="line"><span class="keyword">local</span> line = <span class="string">"yes"</span></div><div class="line"></div><div class="line"><span class="comment">--加载模块</span></div><div class="line"><span class="keyword">local</span> gd=<span class="built_in">require</span>(<span class="string">'gd'</span>)</div><div class="line"><span class="comment">--创建面板</span></div><div class="line"><span class="keyword">local</span> im = gd.createTrueColor(xsize, ysize)</div><div class="line"><span class="comment">--定义颜色</span></div><div class="line"><span class="keyword">local</span> black = im:colorAllocate(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line"><span class="keyword">local</span> grey = im:colorAllocate(<span class="number">202</span>,<span class="number">202</span>,<span class="number">202</span>)</div><div class="line"><span class="keyword">local</span> color=&#123;&#125;</div><div class="line"><span class="keyword">for</span> c=<span class="number">1</span>,<span class="number">100</span> <span class="keyword">do</span></div><div class="line">        color[c] = im:colorAllocate(<span class="built_in">math</span>.random(<span class="number">100</span>),<span class="built_in">math</span>.random(<span class="number">100</span>),<span class="built_in">math</span>.random(<span class="number">100</span>))</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">--画背景</span></div><div class="line">x, y = im:sizeXY()</div><div class="line">im:filledRectangle(<span class="number">0</span>, <span class="number">0</span>, x, y, grey)</div><div class="line"><span class="comment">--画字符</span></div><div class="line">gd.useFontConfig(<span class="keyword">true</span>)</div><div class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">4</span> <span class="keyword">do</span></div><div class="line">    k=(i<span class="number">-1</span>)*<span class="number">16</span>+<span class="number">3</span></div><div class="line">    im:stringFT(color[<span class="built_in">math</span>.random(<span class="number">100</span>)],<span class="string">"Arial:bold"</span>,wsize,<span class="built_in">math</span>.rad(<span class="built_in">math</span>.random(<span class="number">-10</span>,<span class="number">10</span>)),k,<span class="number">22</span>,<span class="built_in">string</span>.sub(stringmark,i,i))</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">--干扰线点</span></div><div class="line"><span class="keyword">if</span> line==<span class="string">"yes"</span> <span class="keyword">then</span></div><div class="line">    <span class="keyword">for</span> j=<span class="number">1</span>,<span class="built_in">math</span>.random(<span class="number">3</span>) <span class="keyword">do</span></div><div class="line">        im:line(<span class="built_in">math</span>.random(xsize),<span class="built_in">math</span>.random(ysize),<span class="built_in">math</span>.random(xsize),<span class="built_in">math</span>.random(ysize),color[<span class="built_in">math</span>.random(<span class="number">100</span>)])</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">for</span> p=<span class="number">1</span>,<span class="number">20</span> <span class="keyword">do</span></div><div class="line">            im:setPixel(<span class="built_in">math</span>.random(xsize),<span class="built_in">math</span>.random(ysize),color[<span class="built_in">math</span>.random(<span class="number">100</span>)])</div><div class="line">    <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">--流输出</span></div><div class="line"><span class="keyword">local</span> fp=im:pngStr(<span class="number">75</span>)</div><div class="line"></div><div class="line"><span class="comment">--redis中添加picgid为key,string为value的记录</span></div><div class="line">setRedis(filename,stringmark)</div><div class="line"></div><div class="line"><span class="comment">--response header中传参picgid</span></div><div class="line">ngx.header.content_type=<span class="string">"text/plain"</span></div><div class="line">ngx.header.picgid=filename</div><div class="line"></div><div class="line"><span class="comment">--页面返回pic</span></div><div class="line">ngx.say(fp)</div><div class="line"></div><div class="line"><span class="comment">--nginx退出</span></div><div class="line">ngx.exit(<span class="number">200</span>)</div></pre></td></tr></table></figure>
<h2 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h2><p>在<code>/usr/local/openresty/redis/conf/</code>创建redis-10005.conf文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">daemonize yes</div><div class="line">pidfile /usr/<span class="built_in">local</span>/openresty/redis/redis-10005.pid</div><div class="line">port 10005</div><div class="line">timeout 300</div><div class="line">tcp-keepalive 10</div><div class="line">loglevel notice</div><div class="line">logfile /usr/<span class="built_in">local</span>/openresty/redis/redis-10005.log</div><div class="line">databases 16</div><div class="line">save 900 1</div><div class="line">save 300 10</div><div class="line">save 60 10000</div><div class="line">stop-writes-on-bgsave-error yes</div><div class="line">rdbcompression yes</div><div class="line">rdbchecksum yes</div><div class="line">dbfilename dump-10005.rdb</div><div class="line">dir /usr/<span class="built_in">local</span>/openresty/redis</div><div class="line">slave-serve-stale-data yes</div><div class="line">slave-read-only yes</div><div class="line">repl-disable-tcp-nodelay no</div><div class="line">slave-priority 100</div><div class="line">appendonly no</div><div class="line">appendfsync everysec</div><div class="line">no-appendfsync-on-rewrite no</div><div class="line">auto-aof-rewrite-percentage 100</div><div class="line">auto-aof-rewrite-min-size 64mb</div><div class="line">lua-time-limit 5000</div><div class="line">slowlog-log-slower-than 10000</div><div class="line">slowlog-max-len 128</div><div class="line"><span class="built_in">hash</span>-max-ziplist-entries 512</div><div class="line"><span class="built_in">hash</span>-max-ziplist-value 64</div><div class="line">list-max-ziplist-entries 512</div><div class="line">list-max-ziplist-value 64</div><div class="line"><span class="built_in">set</span>-max-intset-entries 512</div><div class="line">zset-max-ziplist-entries 128</div><div class="line">zset-max-ziplist-value 64</div><div class="line">activerehashing yes</div><div class="line">client-output-buffer-limit normal 0 0 0</div><div class="line">client-output-buffer-limit slave 256mb 64mb 60</div><div class="line">client-output-buffer-limit pubsub 32mb 8mb 60</div><div class="line">hz 10</div></pre></td></tr></table></figure>
<h2 id="配置验证码服务器"><a href="#配置验证码服务器" class="headerlink" title="配置验证码服务器"></a>配置验证码服务器</h2><p>在<code>/etc/ld.so.conf.d/</code>目录创建captcha.conf，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ld.so.conf.d/captcha.conf</div><div class="line">/usr/<span class="built_in">local</span>/lib</div><div class="line">/usr/<span class="built_in">local</span>/openresty/lualib</div><div class="line">/usr/<span class="built_in">local</span>/openresty/lualib/captcha</div><div class="line">/usr/<span class="built_in">local</span>/openresty/lualib/zklua</div><div class="line">/usr/<span class="built_in">local</span>/openresty/luajit/lib</div></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="生成验证码"><a href="#生成验证码" class="headerlink" title="生成验证码"></a>生成验证码</h2><p>URL：<a href="http://IP:10002/captcha" target="_blank" rel="external">http://IP:10002/captcha</a></p>
<p>然后从响应Header中获取图片的picgid=XXXXX</p>
<h2 id="验证码校验"><a href="#验证码校验" class="headerlink" title="验证码校验"></a>验证码校验</h2><p>URL：<a href="http://IP:10002/captcha-check?image=XXXXX&amp;str=ABCD" target="_blank" rel="external">http://IP:10002/captcha-check?image=XXXXX&amp;str=ABCD</a> <a href="http://IP:10002/captcha-check?image=XXXXX&amp;str=ABCD&amp;delete=true" target="_blank" rel="external">http://IP:10002/captcha-check?image=XXXXX&amp;str=ABCD&amp;delete=true</a> 或 <a href="http://IP:10002/captcha-check?image=XXXXX&amp;str=ABCD&amp;delete=false" target="_blank" rel="external">http://IP:10002/captcha-check?image=XXXXX&amp;str=ABCD&amp;delete=false</a></p>
<p>参数说明如下：</p>
<ul>
<li>参数image：要校验的验证码图片的picgid。</li>
<li>参数str：用户输入的验证码字符串。</li>
<li>参数delete：当且仅当传该参数且参数值为false时，校验完成之后该验证码记录不被删除，验证码未过期之前可多次校验，用于异步校验应用中；否则，若不传该参数或者其值为true，校验完成之后该验证码记录删除。</li>
</ul>
<h2 id="验证码删除"><a href="#验证码删除" class="headerlink" title="验证码删除"></a>验证码删除</h2><p>URL：<a href="http://IP:10002/captcha-delete?image=XXXXX" target="_blank" rel="external">http://IP:10002/captcha-delete?image=XXXXX</a></p>
<p>其中image为要删除的验证码图片的picgid。</p>
]]></content>
    
    <summary type="html">
    
      Lua下有个Lua-GD图形库，通过简单的Lua语句就能控制、生成图片。 环境说明： 操作系统：RHEL6.4 RHEL系统默认已安装RPM包的Lua-5.1.4，但其只具有Lua基本功能，不提供 lua.h 等，但 Lua-GD 编译需要用到 lua.h，故 Lua 需要编译安装。 Lua-GD...
    
    </summary>
    
      <category term="openresty" scheme="https://plpcm.github.io/blog/categories/openresty/"/>
    
    
      <category term="openresty" scheme="https://plpcm.github.io/blog/tags/openresty/"/>
    
      <category term="checkcode" scheme="https://plpcm.github.io/blog/tags/checkcode/"/>
    
      <category term="lua" scheme="https://plpcm.github.io/blog/tags/lua/"/>
    
      <category term="lua-gd" scheme="https://plpcm.github.io/blog/tags/lua-gd/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty实现防cc攻击</title>
    <link href="https://plpcm.github.io/blog/2016/03/02/openresty-cc/"/>
    <id>https://plpcm.github.io/blog/2016/03/02/openresty-cc/</id>
    <published>2016-03-02T10:30:16.000Z</published>
    <updated>2016-12-02T10:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>导读<strong>OpenResty 通过汇聚各种设计精良的 Nginx 模块（由章亦春自主研发并汇聚各种精良模块），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统</strong></p>
<p>本文介绍使用openresty来实现防cc攻击的功能。openresty官网<a href="http://openresty.org/cn/index.html" target="_blank" rel="external">http://openresty.org/cn/index.html</a>。下面是防cc攻击的流程图。</p>
<p><img src="/blog/uploads/openresty/openresty-cc.png" alt="流程图"></p>
<p>根据流程图，我们知道防cc攻击主要包括两部分，一是限制请求速度，二是给用户发送js跳转代码进行验证请求是否合法。</p>
<p><strong>安装依赖</strong></p>
<p>RHEL/Centos:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install readline-devel pcre-devel openssl-devel</div></pre></td></tr></table></figure>
<p>ubuntu:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl</div></pre></td></tr></table></figure>
<p><strong>luajit安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /tmp/</div><div class="line">git <span class="built_in">clone</span> http://luajit.org/git/luajit-2.0.git</div><div class="line"><span class="built_in">cd</span> luajit-2.0/</div><div class="line">make &amp;&amp; make install</div><div class="line">ln -sf luajit-2.0.0-beta10 /usr/<span class="built_in">local</span>/bin/luajit</div><div class="line">ln -sf /usr/<span class="built_in">local</span>/lib/libluajit-5.1.so.2 /usr/lib/</div></pre></td></tr></table></figure>
<p><strong>openresty安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /tmp</div><div class="line">wget http://agentzh.org/misc/nginx/ngx_openresty-1.2.4.13.tar.gz</div><div class="line">tar xzf ngx_openresty-1.2.4.13.tar.gz</div><div class="line"><span class="built_in">cd</span> ngx_openresty-1.2.4.13/</div><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/openresty --with-luajit</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p><strong>nginx配置</strong></p>
<p>nginx.conf:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">http&#123;</div><div class="line">[......]</div><div class="line">lua_shared_dict limit <span class="number">10</span>m;</div><div class="line">lua_shared_dict jsjump <span class="number">10</span>m;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">#lua_code_cache off;</div><div class="line">        listen       <span class="number">80</span>;</div><div class="line">        server_name  www.centos.bz;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">default_type  text/html;</div><div class="line">content_by_lua_file <span class="string">"/usr/local/openresty/nginx/conf/lua"</span>;</div><div class="line">        &#125;</div><div class="line">        location @cc &#123;</div><div class="line">            internal;</div><div class="line">            root   html;</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>/usr/local/openresty/nginx/conf/lua文件:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 限速功能</span></div><div class="line"><span class="keyword">local</span> ip = ngx.var.binary_remote_addr</div><div class="line"><span class="keyword">local</span> limit = ngx.shared.limit</div><div class="line"><span class="keyword">local</span> req,_=limit:get(ip)</div><div class="line"><span class="keyword">if</span> req <span class="keyword">then</span></div><div class="line">		<span class="comment">-- 10秒钟内容最多只能请求20次</span></div><div class="line">        <span class="keyword">if</span> req &gt; <span class="number">20</span> <span class="keyword">then</span></div><div class="line">                ngx.exit(<span class="number">503</span>)</div><div class="line">        <span class="keyword">else</span></div><div class="line">                limit:incr(ip,<span class="number">1</span>)</div><div class="line">        <span class="keyword">end</span></div><div class="line"><span class="keyword">else</span></div><div class="line">        limit:set(ip,<span class="number">1</span>,<span class="number">10</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="comment">--验证部分</span></div><div class="line"><span class="keyword">local</span> jsjump = ngx.shared.jsjump</div><div class="line"><span class="keyword">local</span> uri = ngx.var.request_uri</div><div class="line"><span class="keyword">local</span> jspara,flags=jsjump:get(ip)</div><div class="line"><span class="keyword">local</span> args = ngx.req.get_uri_args()</div><div class="line"><span class="keyword">if</span> jspara <span class="keyword">then</span></div><div class="line">    <span class="keyword">if</span> flags <span class="keyword">then</span></div><div class="line">        ngx.exec(<span class="string">"@cc"</span>)</div><div class="line">    <span class="keyword">else</span></div><div class="line">                <span class="keyword">local</span> p_jskey=<span class="string">''</span></div><div class="line">                <span class="keyword">if</span> args[<span class="string">"jskey"</span>] <span class="keyword">and</span> <span class="built_in">type</span>(args[<span class="string">"jskey"</span>])==<span class="string">'table'</span> <span class="keyword">then</span></div><div class="line">                         p_jskey=args[<span class="string">"jskey"</span>][<span class="built_in">table</span>.getn(args[<span class="string">"jskey"</span>])]</div><div class="line">                <span class="keyword">else</span></div><div class="line">                         p_jskey=args[<span class="string">"jskey"</span>]</div><div class="line">                <span class="keyword">end</span></div><div class="line">        <span class="keyword">if</span> p_jskey <span class="keyword">and</span> p_jskey==<span class="built_in">tostring</span>(jspara) <span class="keyword">then</span></div><div class="line">                        jsjump:set(ip,jspara,<span class="number">3600</span>,<span class="number">1</span>) <span class="comment">--通过后，白名单时间为3600秒，即1小时</span></div><div class="line">                        ngx.exec(<span class="string">"@cc"</span>)</div><div class="line">        <span class="keyword">else</span></div><div class="line">                        <span class="keyword">local</span> url=<span class="string">''</span></div><div class="line">                        <span class="keyword">if</span> ngx.var.args <span class="keyword">then</span></div><div class="line">                               url=ngx.var.scheme..<span class="string">"://"</span>..ngx.var.host..uri..<span class="string">"&amp;jskey="</span>..jspara</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                               url=ngx.var.scheme..<span class="string">"://"</span>..ngx.var.host..uri..<span class="string">"?jskey="</span>..jspara</div><div class="line">                        <span class="keyword">end</span></div><div class="line">                        <span class="keyword">local</span> jscode=<span class="string">"window.location.href='"</span>..url..<span class="string">"';"</span></div><div class="line">                        ngx.say(jscode)</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">math</span>.randomseed( <span class="built_in">os</span>.time() );</div><div class="line">    <span class="keyword">local</span> random=<span class="built_in">math</span>.random(<span class="number">100000</span>,<span class="number">999999</span>)</div><div class="line">    jsjump:set(ip,random,<span class="number">60</span>)</div><div class="line">    <span class="keyword">local</span> url=<span class="string">''</span></div><div class="line">    <span class="keyword">if</span> ngx.var.args <span class="keyword">then</span></div><div class="line">        url=ngx.var.scheme..<span class="string">"://"</span>..ngx.var.host..uri..<span class="string">"&amp;jskey="</span>..random</div><div class="line">    <span class="keyword">else</span></div><div class="line">        url=ngx.var.scheme..<span class="string">"://"</span>..ngx.var.host..uri..<span class="string">"?jskey="</span>..random</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">local</span> jscode=<span class="string">"window.location.href='"</span>..url..<span class="string">"';"</span></div><div class="line">    ngx.say(jscode)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文介绍使用openresty来实现防cc攻击的功能。
    
    </summary>
    
      <category term="openresty" scheme="https://plpcm.github.io/blog/categories/openresty/"/>
    
    
      <category term="openresty" scheme="https://plpcm.github.io/blog/tags/openresty/"/>
    
      <category term="cc" scheme="https://plpcm.github.io/blog/tags/cc/"/>
    
      <category term="防攻击" scheme="https://plpcm.github.io/blog/tags/%E9%98%B2%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>nginx限制某个IP同一时间段的访问次数</title>
    <link href="https://plpcm.github.io/blog/2016/03/02/nginx-limit-mod/"/>
    <id>https://plpcm.github.io/blog/2016/03/02/nginx-limit-mod/</id>
    <published>2016-03-02T09:35:16.000Z</published>
    <updated>2016-12-02T10:28:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自: <a href="http://www.nginx.cn/446.html" target="_blank" rel="external">http://www.nginx.cn/446.html</a></p>
<p>如何设置能限制某个IP某一时间段的访问次数是一个让人头疼的问题，特别面对恶意的ddos攻击的时候。其中CC攻击（Challenge Collapsar）是DDOS（分布式拒绝服务）的一种，也是一种常见的网站攻击方法，攻击者通过代理服务器或者肉鸡向向受害主机不停地发大量数据包，造成对方服务器资源耗尽，一直到宕机崩溃。</p>
<p>cc攻击一般就是使用有限的ip数对服务器频繁发送数据来达到攻击的目的，nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击。</p>
<p>HttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。一旦并发连接超过指定数量，就会返回503错误。</p>
<p>HttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令</p>
<p>这两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制</p>
<h3 id="HttpLimitReqModul-限制某一段时间内同一ip访问数实例"><a href="#HttpLimitReqModul-限制某一段时间内同一ip访问数实例" class="headerlink" title="HttpLimitReqModul 限制某一段时间内同一ip访问数实例"></a>HttpLimitReqModul 限制某一段时间内同一ip访问数实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">http&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    #定义一个名为allips的limit_req_zone用来存储session，大小是<span class="number">10</span>M内存，</div><div class="line">    #以$binary_remote_addr 为key,限制平均每秒的请求为<span class="number">20</span>个，</div><div class="line">    #<span class="number">1</span>M能存储<span class="number">16000</span>个状态，rete的值必须为整数，</div><div class="line">    #如果限制两秒钟一个请求，可以设置成<span class="number">30</span>r/m</div><div class="line"></div><div class="line">    limit_req_zone $binary_remote_addr zone=allips:<span class="number">10</span>m rate=<span class="number">20</span>r/s;</div><div class="line">    ...</div><div class="line">    server&#123;</div><div class="line">        ...</div><div class="line">        location &#123;</div><div class="line">            ...</div><div class="line"></div><div class="line">            #限制每ip每秒不超过<span class="number">20</span>个请求，漏桶数burst为<span class="number">5</span></div><div class="line">            <span class="meta">#brust的意思就是，如果第1秒、2,3,4秒请求为19个，</span></div><div class="line">            #第<span class="number">5</span>秒的请求为<span class="number">25</span>个是被允许的。</div><div class="line">            #但是如果你第<span class="number">1</span>秒就<span class="number">25</span>个请求，第<span class="number">2</span>秒超过<span class="number">20</span>的请求返回<span class="number">503</span>错误。</div><div class="line">            <span class="meta">#nodelay，如果不设置该选项，严格使用平均速率限制请求数，</span></div><div class="line">            #第<span class="number">1</span>秒<span class="number">25</span>个请求时，<span class="number">5</span>个请求放到第<span class="number">2</span>秒执行，</div><div class="line">            #设置nodelay，<span class="number">25</span>个请求将在第<span class="number">1</span>秒执行。</div><div class="line"></div><div class="line">            limit_req zone=allips burst=<span class="number">5</span> nodelay;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="HttpLimitZoneModule-限制并发连接数实例"><a href="#HttpLimitZoneModule-限制并发连接数实例" class="headerlink" title="HttpLimitZoneModule 限制并发连接数实例"></a>HttpLimitZoneModule 限制并发连接数实例</h3><p>limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">http&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    #定义一个名为one的limit_zone,大小<span class="number">10</span>M内存来存储session，</div><div class="line">    #以$binary_remote_addr 为key</div><div class="line">    <span class="meta">#nginx 1.18以后用limit_conn_zone替换了limit_conn</span></div><div class="line">    #且只能放在http作用域</div><div class="line">    limit_conn_zone   one  $binary_remote_addr  <span class="number">10</span>m;</div><div class="line">    ...</div><div class="line">    server&#123;</div><div class="line">        ...</div><div class="line">        location &#123;</div><div class="line">            ...</div><div class="line">           limit_conn one <span class="number">20</span>;          #连接数限制</div><div class="line"></div><div class="line">           #带宽限制,对单个连接限数，如果一个ip两个连接，就是<span class="number">500</span>x2k</div><div class="line">           limit_rate <span class="number">500</span>k;</div><div class="line"></div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="nginx白名单设置"><a href="#nginx白名单设置" class="headerlink" title="nginx白名单设置"></a>nginx白名单设置</h3><p>以上配置会对所有的ip都进行限制，有些时候我们不希望对搜索引擎的蜘蛛或者自己测试ip进行限制，<br>对于特定的白名单ip我们可以借助geo指令实现。<br>1.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">http&#123;</div><div class="line">     geo $limited&#123;</div><div class="line">        <span class="keyword">default</span> <span class="number">1</span>;</div><div class="line">        <span class="meta">#google</span></div><div class="line">        <span class="number">64.233</span><span class="number">.160</span><span class="number">.0</span>/<span class="number">19</span> <span class="number">0</span>;</div><div class="line">        <span class="number">65.52</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">14</span> <span class="number">0</span>;</div><div class="line">        <span class="number">66.102</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">20</span> <span class="number">0</span>;</div><div class="line">        <span class="number">66.249</span><span class="number">.64</span><span class="number">.0</span>/<span class="number">19</span> <span class="number">0</span>;</div><div class="line">        <span class="number">72.14</span><span class="number">.192</span><span class="number">.0</span>/<span class="number">18</span> <span class="number">0</span>;</div><div class="line">        <span class="number">74.125</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> <span class="number">0</span>;</div><div class="line">        <span class="number">209.85</span><span class="number">.128</span><span class="number">.0</span>/<span class="number">17</span> <span class="number">0</span>;</div><div class="line">        <span class="number">216.239</span><span class="number">.32</span><span class="number">.0</span>/<span class="number">19</span> <span class="number">0</span>;</div><div class="line">        #M$</div><div class="line">        <span class="number">64.4</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">18</span> <span class="number">0</span>;</div><div class="line">        <span class="number">157.60</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> <span class="number">0</span>;</div><div class="line">        <span class="number">157.54</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">15</span> <span class="number">0</span>;</div><div class="line">        <span class="number">157.56</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">14</span> <span class="number">0</span>;</div><div class="line">        <span class="number">207.46</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> <span class="number">0</span>;</div><div class="line">        <span class="number">207.68</span><span class="number">.192</span><span class="number">.0</span>/<span class="number">20</span> <span class="number">0</span>;</div><div class="line">        <span class="number">207.68</span><span class="number">.128</span><span class="number">.0</span>/<span class="number">18</span> <span class="number">0</span>;</div><div class="line">        <span class="meta">#yahoo</span></div><div class="line">        <span class="number">8.12</span><span class="number">.144</span><span class="number">.0</span>/<span class="number">24</span> <span class="number">0</span>;</div><div class="line">        <span class="number">66.196</span><span class="number">.64</span><span class="number">.0</span>/<span class="number">18</span> <span class="number">0</span>;</div><div class="line">        <span class="number">66.228</span><span class="number">.160</span><span class="number">.0</span>/<span class="number">19</span> <span class="number">0</span>;</div><div class="line">        <span class="number">67.195</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> <span class="number">0</span>;</div><div class="line">        <span class="number">74.6</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> <span class="number">0</span>;</div><div class="line">        <span class="number">68.142</span><span class="number">.192</span><span class="number">.0</span>/<span class="number">18</span> <span class="number">0</span>;</div><div class="line">        <span class="number">72.30</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> <span class="number">0</span>;</div><div class="line">        <span class="number">209.191</span><span class="number">.64</span><span class="number">.0</span>/<span class="number">18</span> <span class="number">0</span>;</div><div class="line">        #My IPs</div><div class="line">        <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">32</span> <span class="number">0</span>;</div><div class="line">        <span class="number">123.456</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">28</span> <span class="number">0</span>; <span class="meta">#example for your server CIDR</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0</p>
<p>2.使用map指令映射搜索引擎客户端的ip为空串，如果不是搜索引擎就显示本身真是的ip，这样搜索引擎ip就不能存到limit_req_zone内存session中，所以不会限制搜索引擎的ip访问</p>
<p>map $limited $limit {<br>1 $binary_remote_addr;<br>0 “”;<br>}</p>
<p>3.设置limit_req_zone和limit_req<br>limit_req_zone $limit zone=foo:1m rate=10r/m;</p>
<p>limit_req zone=foo burst=5;</p>
<p><strong>最后我们使用ab压php-fpm的方式，对上面的方法效果实际测试下</strong></p>
<p>例1：限制只允许一分钟内只允许一个ip访问60次配置，也就是平均每秒1次<br>首先我们准备一个php脚本放在根目录下$document_root<br>test.php</p>
<p>&gt;</p>
<p>nginx配置增加<code>limit_req_zone</code> 和 <code>limit_req</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">http&#123;</div><div class="line">    ...</div><div class="line">    limit_req_zone $binary_remote_addr zone=allips:<span class="number">10</span>m rate=<span class="number">60</span>r/m;</div><div class="line">    ...</div><div class="line">    server&#123;</div><div class="line">        ...</div><div class="line">        location &#123;</div><div class="line">            ...</div><div class="line">            limit_req zone=allips;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ab -n 5 -c 1 <a href="http://www.weizhang.org/test.php" target="_blank" rel="external">http://www.weizhang.org/test.php</a></p>
<p>118.144.94.193 - - [22/Dec/2012:06:27:06 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”<br>118.144.94.193 - - [22/Dec/2012:06:27:06 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”<br>118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”<br>118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”<br>118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”</p>
<p>未设置brust和nodelay可以看到该配置只允许每秒访问1次，超出的请求返回503错误</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">http&#123;</div><div class="line">    ...</div><div class="line">    limit_req_zone $binary_remote_addr zone=allips:<span class="number">10</span>m rate=<span class="number">60</span>r/m;</div><div class="line">    ...</div><div class="line">    server&#123;</div><div class="line">        ...</div><div class="line">        location &#123;</div><div class="line">            ...</div><div class="line">            limit_req zone=allips burst=<span class="number">1</span> nodelay;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ab -n 5 -c 1 <a href="http://www.weizhang.org/test.php" target="_blank" rel="external">http://www.weizhang.org/test.php</a></p>
<p>118.144.94.193 - - [22/Dec/2012:07:01:00 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”<br>118.144.94.193 - - [22/Dec/2012:07:01:00 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”<br>118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”<br>118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”<br>118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”</p>
<p>设置brust=1和nodelay后允许第1秒处理两个请求。</p>
]]></content>
    
    <summary type="html">
    
      如何设置能限制某个IP某一时间段的访问次数是一个让人头疼的问题，特别面对恶意的ddos攻击的时候。其中CC攻击（Challenge Collapsar）是DDOS（分布式拒绝服务）的一种，也是一种常见的网站攻击方法，攻击者通过代理服务器或者肉鸡向向受害主机不停地发大量数据包，造成对方服务器资源耗尽，一直到宕机崩溃。cc攻击一般就是使用有限的ip数对服务器频繁发送数据来达到攻击的目的，nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击。
    
    </summary>
    
      <category term="nginx" scheme="https://plpcm.github.io/blog/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://plpcm.github.io/blog/tags/nginx/"/>
    
      <category term="cc" scheme="https://plpcm.github.io/blog/tags/cc/"/>
    
      <category term="防攻击" scheme="https://plpcm.github.io/blog/tags/%E9%98%B2%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>Git 的 .gitignore 配置</title>
    <link href="https://plpcm.github.io/blog/2016/02/22/git-ignore/"/>
    <id>https://plpcm.github.io/blog/2016/02/22/git-ignore/</id>
    <published>2016-02-22T07:00:16.000Z</published>
    <updated>2016-11-30T09:56:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>.gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利，以下是个人对于配 置.gitignore 的一些心得。</p>
<p>1.配置语法：</p>
<p>　　以斜杠“ /”“开头表示目录；</p>
<p>　　以星号“ *”“通配多个字符；</p>
<p>　　以问号“ ?”“通配单个字符</p>
<p>　　以方括号“ []” 包含单个字符的匹配列表；</p>
<p>　　以叹号“ !”“表示不忽略(跟踪)匹配到的文件或目录；</p>
<p>　　此外，git 对于 .ignore<br>配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效；</p>
<p>2.示例：</p>
<p>(1)规则：<code>fd1/*</code></p>
<pre><code>说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；
</code></pre><p>(2)规则：<code>/fd1/*</code></p>
<pre><code>说明：忽略根目录下的 /fd1/ 目录的全部内容；
</code></pre><p>(3)规则：</p>
<pre><code>            /*
            !.gitignore
            !/fw/bin/
            !/fw/sf/

说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；
</code></pre>]]></content>
    
    <summary type="html">
    
      .gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利，以下是个人对于配置.gitignore 的一些心得。
    
    </summary>
    
      <category term="git" scheme="https://plpcm.github.io/blog/categories/git/"/>
    
    
      <category term="git" scheme="https://plpcm.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git远程操作详解</title>
    <link href="https://plpcm.github.io/blog/2016/02/21/git-remote-server/"/>
    <id>https://plpcm.github.io/blog/2016/02/21/git-remote-server/</id>
    <published>2016-02-21T02:45:33.000Z</published>
    <updated>2016-12-02T10:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://zh.wikipedia.org/wiki/Git" target="_blank" rel="external">Git</a>是目前最流行的<a href="http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html" target="_blank" rel="external">版本管理系统</a>，学会Git几乎成了开发者的必备技能。<br>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>
<ul>
<li>git clone</li>
<li>git remote</li>
<li>git fetch</li>
<li>git pull</li>
<li>git push</li>
</ul>
<p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。<br><img src="http://image.beekka.com/blog/2014/bg2014061202.jpg" alt="git"></p>
<p>##一、git clone<br>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到<code>git clone</code>命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> &lt;版本库的网址&gt;</div></pre></td></tr></table></figure>
<p>比如，克隆jQuery的版本库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/jquery/jquery.git</div></pre></td></tr></table></figure>
<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为<code>git
clone</code>命令的第二个参数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> &lt;版本库的网址&gt; &lt;本地目录名&gt;</div></pre></td></tr></table></figure>
<p><code>git
clone</code>支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> http[s]://example.com/path/to/repo.git/</div><div class="line">$ git <span class="built_in">clone</span> ssh://example.com/path/to/repo.git/</div><div class="line">$ git <span class="built_in">clone</span> git://example.com/path/to/repo.git/</div><div class="line">$ git <span class="built_in">clone</span> /opt/git/project.git </div><div class="line">$ git <span class="built_in">clone</span> file:///opt/git/project.git</div><div class="line">$ git <span class="built_in">clone</span> ftp[s]://example.com/path/to/repo.git/</div><div class="line">$ git <span class="built_in">clone</span> rsync://example.com/path/to/repo.git/</div></pre></td></tr></table></figure>
<p>SSH协议还有另一种写法。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> [user@]example.com:path/to/repo.git/</div></pre></td></tr></table></figure>
<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考<a href="http://git-scm.com/book/en/Git-on-the-Server-The-Protocols" target="_blank" rel="external">官方文档</a>。</p>
<p>##二、git remote<br>为了便于管理，Git要求每个远程主机都必须指定一个主机名。<code>git
remote</code>命令就用于管理主机名。<br>不带选项的时候，<code>git remote</code>命令列出所有远程主机。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div></pre></td></tr></table></figure>
<p>使用<code>-v</code>选项，可以参看远程主机的网址。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  git@github.com:jquery/jquery.git (fetch)</div><div class="line">origin  git@github.com:jquery/jquery.git (push)</div></pre></td></tr></table></figure>
<p>上面命令表示，当前只有一台远程主机，叫做<code>origin</code>，以及它的网址。<br>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用<code>git
clone</code>命令的<code>-o</code>选项指定。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> -o jQuery https://github.com/jquery/jquery.git</div><div class="line">$ git remote</div><div class="line">jQuery</div></pre></td></tr></table></figure>
<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。<br><code>git remote show</code>命令加上主机名，可以查看该主机的详细信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote show &lt;主机名&gt;</div></pre></td></tr></table></figure>
<p><code>git remote add</code>命令用于添加远程主机。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add &lt;主机名&gt; &lt;网址&gt;</div></pre></td></tr></table></figure>
<p><code>git remote rm</code>命令用于删除远程主机。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rm &lt;主机名&gt;</div></pre></td></tr></table></figure>
<p><code>git remote rename</code>命令用于远程主机的改名。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</div></pre></td></tr></table></figure>
<p>##三、git fetch<br>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到<code>git
fetch</code>命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch &lt;远程主机名&gt;</div></pre></td></tr></table></figure>
<p>上面命令将某个远程主机的更新，全部取回本地。<br><code>git
fetch</code>命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。<br>默认情况下，<code>git
fetch</code>取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</div></pre></td></tr></table></figure>
<p>比如，取回<code>origin</code>主机的<code>master</code>分支。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin master</div></pre></td></tr></table></figure>
<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如<code>origin</code>主机的<code>master</code>，就要用<code>origin/master</code>读取。<br><code>git branch</code>命令的<code>-r</code>选项，可以用来查看远程分支，<code>-a</code>选项查看所有分支。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div><div class="line">origin/master</div><div class="line"></div><div class="line">$ git branch <span class="_">-a</span></div><div class="line">* master</div><div class="line">  remotes/origin/master</div></pre></td></tr></table></figure>
<p>  上面命令表示，本地主机的当前分支是<code>master</code>，远程分支是<code>origin/master</code>。<br>  取回远程主机的更新以后，可以在它的基础上，使用<code>git
  checkout</code>命令创建一个新的分支。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b newBrach origin/master</div></pre></td></tr></table></figure>
<p>  上面命令表示，在<code>origin/master</code>的基础上，创建一个新分支。<br>  此外，也可以使用<code>git merge</code>命令或者<code>git
  rebase</code>命令，在本地分支上合并远程分支。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  $ git merge origin/master</div><div class="line"><span class="comment"># 或者</span></div><div class="line">  $ git rebase origin/master</div></pre></td></tr></table></figure>
<p>  上面命令表示在当前分支上，合并<code>origin/master</code>。</p>
<p>##四、git pull<br>  <code>git
  pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</div></pre></td></tr></table></figure>
<p>  比如，取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并，需要写成下面这样。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin next:master</div></pre></td></tr></table></figure>
<p>  如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin next</div></pre></td></tr></table></figure>
<p>  上面命令表示，取回<code>origin/next</code>分支，再与当前分支合并。实质上，这等同于先做<code>git
  fetch</code>，再做<code>git merge</code>。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin</div><div class="line">$ git merge origin/next</div></pre></td></tr></table></figure>
<p>  在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在<code>git
  clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动”追踪”<code>origin/master</code>分支。</p>
<p>  Git也允许手动建立追踪关系。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream master origin/next</div></pre></td></tr></table></figure>
<p>  上面命令指定<code>master</code>分支追踪<code>origin/next</code>分支。<br>  如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin</div></pre></td></tr></table></figure>
<p>  上面命令表示，本地的当前分支自动与对应的<code>origin</code>主机”追踪分支”（remote-tracking<br>  branch）进行合并。<br>  如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure>
<p>  上面命令表示，当前分支自动与唯一一个追踪分支进行合并。<br>  如果合并需要采用rebase模式，可以使用<code>--rebase</code>选项。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</div></pre></td></tr></table></figure>
<p>  如果远程主机删除了某个分支，默认情况下，<code>git pull</code><br>  不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git<br>  pull不知不觉删除了本地分支。<br>  但是，你可以改变这个行为，加上参数<code>-p</code> 就会在本地删除远程已经删除的分支。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  $ git pull -p</div><div class="line"><span class="comment"># 等同于下面的命令</span></div><div class="line">  $ git fetch --prune origin </div><div class="line">  $ git fetch -p</div></pre></td></tr></table></figure>
<p>##五、git push<br>  <code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与git<br>  pull命令相仿。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</div></pre></td></tr></table></figure>
<p>  注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以<code>git
  pull</code>是&lt;远程分支&gt;:&lt;本地分支&gt;，而<code>git push</code>是&lt;本地分支&gt;:&lt;远程分支&gt;。<br>  如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>  上面命令表示，将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果后者不存在，则会被新建。</p>
<p>  如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  $ git push origin :master</div><div class="line"><span class="comment"># 等同于</span></div><div class="line">  $ git push origin --delete master</div></pre></td></tr></table></figure>
<p>  上面命令表示删除<code>origin</code>主机的<code>master</code>分支。</p>
<p>  如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin</div></pre></td></tr></table></figure>
<p>  上面命令表示，将当前分支推送到<code>origin</code>主机的对应分支。<br>  如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push</div></pre></td></tr></table></figure>
<p>  如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git
  push</code>。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<p>  上面命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git
  push</code>了。</p>
<p>  不带任何参数的<code>git
  push</code>，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git<br>  2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用<code>git
  config</code>命令。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  $ git config --global push.default matching</div><div class="line"><span class="comment"># 或者</span></div><div class="line">  $ git config --global push.default simple</div></pre></td></tr></table></figure>
<p>  还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>--all</code>选项。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push --all origin</div></pre></td></tr></table></figure>
<p>  上面命令表示，将所有本地分支都推送到<code>origin</code>主机。<br>  如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git
  pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push --force origin</div></pre></td></tr></table></figure>
<p>  上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。<br>  最后，<code>git push</code>不会推送标签（tag），除非使用<code>--tags</code>选项。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能。
    
    </summary>
    
      <category term="git" scheme="https://plpcm.github.io/blog/categories/git/"/>
    
    
      <category term="git" scheme="https://plpcm.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git工作原理</title>
    <link href="https://plpcm.github.io/blog/2016/02/20/git-works-how/"/>
    <id>https://plpcm.github.io/blog/2016/02/20/git-works-how/</id>
    <published>2016-02-20T02:30:16.000Z</published>
    <updated>2016-12-06T05:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://codewords.recurse.com/issues/two/git-from-the-inside-out" target="_blank" rel="external">https://codewords.recurse.com/issues/two/git-from-the-inside-out</a>)</p>
<p>这篇文章解释了<code>git</code>的工作原理，它会使你更深入的理解<code>git</code>，更好的使用它来控制项目的版本。</p>
<p>本文重点介绍了支持Git的图形结构，以及该图形的属性指示Git行为的方式。从基础开始，同时有实例讲解，根据实例建立一个更真实的模型，让你更好地理解<code>git</code>做了什么。</p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~ $ mkdir alpha</div><div class="line">~ $ cd alpha</div></pre></td></tr></table></figure>
<p>项目目录是<code>alpha</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ mkdir data</div><div class="line">~/alpha $ printf &apos;a&apos; &gt; data/letter.txt</div></pre></td></tr></table></figure>
<p>到目录<code>alpha</code>下创建了一个名为<code>data</code>的目录，在里面创建了一个名为<code>letter.txt</code>的文件，其中的内容是一个字符<code>a</code>，<code>alpha</code>目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alpha</div><div class="line">└── data</div><div class="line">    └── letter.txt</div></pre></td></tr></table></figure>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git init</div><div class="line">          Initialized empty Git repository</div></pre></td></tr></table></figure>
<p><code>git init</code>使当前目录变成了<code>Git</code>仓库，为此，它创建了一个<code>.git</code>目录并向其中写入了一些文件。这些文件定义了关于Git配置和项目历史的一切，它们只是普通文件。 用户可以使用文本编辑器或shell来读取和编辑它们。 这就是说，用户可以像他们的项目文件一样轻松地阅读和编辑他们项目的历史。</p>
<p>现在<code>alpha</code>目录的结构就像下面这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">alpha</div><div class="line">├── data</div><div class="line">|   └── letter.txt</div><div class="line">└── .git</div><div class="line">    ├── objects</div><div class="line">    etc...</div></pre></td></tr></table></figure>
<p><code>.git</code>目录及其内容归<code>Git</code>系统所有，所有其他的文件统称为工作副本，归用户所有。</p>
<h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git add data/letter.txt</div></pre></td></tr></table></figure>
<p>运行上面的命令，有两个效果。</p>
<p>首先，它在<code>.git/objects/</code>目录中创建了一个新的<code>blob</code>文件。</p>
<p>这个<code>blob</code>文件包含<code>data/letter.txt</code>的压缩内容。 它的名称通过文件内容的<code>Hash</code>(应该是用的<code>sha1</code>)得到。取一段文本的<code>Hash</code>值意味着运行一个程序，将其内容变成一块较小的文本，这块文本是原始内容的唯一标识。例如，<code>Git</code>将<code>aes</code>转换为<code>2e65efe2a145dda7ee51d1741299f848e5bf752e</code>，前两个字符用作对象数据库中的目录的名称：<code>.git/objects/2e/</code>。 散列的其余部分用作保存所添加文件的内容的<code>blob</code>文件的名称：</p>
<p><code>.git/objects/2e/65efe2a145dda7ee51d1741299f848e5bf752e</code>。</p>
<blockquote>
<p><code>git add</code>将文件添加到<code>Git</code>并将其内容保存到<code>objects</code>目录中。 如果用户从工作副本中删除<code>data/letter.text</code>，它的内容在<code>Git</code>中仍然是安全的。</p>
</blockquote>
<p>其次，<code>git add</code>将文件添加到<code>索引</code>。 <code>索引</code>是一个列表，其中包含<code>Git</code>已被告知要跟踪的每个文件。 它作为一个文件存储在<code>.git/index</code>。 文件的每一行将被跟踪的文件映射到其内容的<code>哈希</code>。 这是运行<code>git add</code>命令后的索引：</p>
<p><code>data/letter.txt 2e65efe2a145dda7ee51d1741299f848e5bf752e</code></p>
<p>创建一个包含内容<code>1234</code>的文件<code>data/number.txt</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;1234&apos; &gt; data/number.txt</div></pre></td></tr></table></figure>
<p>目录结构变成了下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alpha</div><div class="line">└── data</div><div class="line">    └── letter.txt</div><div class="line">    └── number.txt</div></pre></td></tr></table></figure>
<p>添加文件到<code>Git</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git add data</div></pre></td></tr></table></figure>
<p><code>git add</code>命令创建一个包含<code>data/number.txt</code>内容的<code>blob</code>对象。 它为指向<code>blob</code>的<code>data/number.txt</code>添加一个索引条目。 这是<code>git add</code>命令第二次运行后的索引：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data/letter.txt 2e65efe2a145dda7ee51d1741299f848e5bf752e</div><div class="line">data/number.txt 274c0052dd5408f8ae2bc8440029ff67d79bc5c3</div></pre></td></tr></table></figure>
<blockquote>
<p>只有数据目录中的文件被列在索引中，虽然用户运行了<code>git add data</code>。 数据目录<code>data</code>不单独列出。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;1&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git add data</div></pre></td></tr></table></figure>
<p>当最初创建<code>data/number.txt</code>时，想要输入内容<code>1</code>，而不是<code>1234</code>.他们进行更正并将文件再次添加到索引。 此命令将使用新内容创建一个新的<code>blob</code>。 并且它更新<code>data/number.txt</code>的索引条目以指向新的<code>blob</code>。</p>
<h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git commit -m &apos;a1&apos;</div><div class="line">          [master (root-commit) 774b54a] a</div></pre></td></tr></table></figure>
<p>进行<code>a1</code>提交，<code>Git</code>打印了这次提交的相关信息。</p>
<p><code>commit</code>命令有三个步骤。 创建一个树形图来表示正在提交的项目版本的内容。 创建一个提交对象。 将当前分支指向新的提交对象。</p>
<h3 id="创建树形图"><a href="#创建树形图" class="headerlink" title="创建树形图"></a>创建树形图</h3><p><code>Git</code>通过从索引创建树图来记录项目的当前状态。 此树图记录项目中每个文件的位置和内容。</p>
<p>该图由两种类型的对象组成：<code>blob</code>和<code>树</code>。</p>
<p><code>Blob</code>是通过<code>git add</code>存储的。 它们表示文件的内容。</p>
<p>在<code>commit</code>时存储树。 树表示工作副本中的目录。</p>
<p>下面是记录新提交的<code>data</code>目录的内容的树对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">100664 blob 2e65efe2a145dda7ee51d1741299f848e5bf752e letter.txt</div><div class="line">100664 blob 56a6051ca2b02b04ef92d5150c9ef600403cb1de number.txt</div></pre></td></tr></table></figure>
<p>第一行记录展示了<code>data/letter.txt</code>文件的信息。 第一部分是文件的权限。 第二部表示此条目的内容由<code>blob</code>而不是<code>树</code>表示。 第三部分描述了<code>blob</code>的<code>Hash</code>。 第四部分描述文件的名称。第二行当然就是文件<code>data/number.txt</code>文件的信息。</p>
<p>下面是<code>alpha</code>的树对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">040000 tree 0eed1217a2947f4930583229987d90fe5e8e0b74 data</div></pre></td></tr></table></figure>
<p><code>alpha</code>树对象只包含了一个指向<code>data</code>树指针。(译著：如果<code>alpha</code>目录下还有一个文件， <code>alpha</code>树对象就还会多一行，就是指向多出文件的<code>blob</code>对象)</p>
<p><img src="/blog/uploads/git-works-how/1-a1-tree-graph.png" alt="`a1` commit object pointing at its tree graph"></p>
<p>在上面的图中，<code>root</code>树指向<code>data</code>树。 <code>data</code>树指向<code>data/letter.txt</code>和<code>data/number.txt</code>的<code>blob</code>。</p>
<h3 id="创建一个提交对象"><a href="#创建一个提交对象" class="headerlink" title="创建一个提交对象"></a>创建一个提交对象</h3><p><code>git commit</code>在创建树图后创建一个<code>提交对象</code>。 <code>提交对象</code>只是<code>.git/objects/</code>中的另一个文本文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tree ffe298c3ce8bb07326f888907996eaa48d266db4</div><div class="line">author Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424798436 -0500</div><div class="line">committer Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424798436 -0500</div><div class="line"></div><div class="line">a1</div></pre></td></tr></table></figure>
<p>第一行指向树图。 <code>Hash</code>是表示工作副本的根的树对象。 也就是<code>alpha</code>目录。 最后一行是提交消息。</p>
<p><img src="/blog/uploads/git-works-how/2-a1-commit.png" alt="`a1` commit object pointing at its tree graph"></p>
<h3 id="将当前分支指向新的提交"><a href="#将当前分支指向新的提交" class="headerlink" title="将当前分支指向新的提交"></a>将当前分支指向新的提交</h3><p>最后，commit命令将当前分支指向新的提交对象。哪个是当前分支？ <code>.git/HEAD</code>文件记录了当前分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ref: refs/heads/master</div></pre></td></tr></table></figure>
<p>这说明<code>HEAD</code>指向<code>master</code>, <code>master</code>是主分支。<br><code>HEAD</code>和<code>master</code>都是<code>refs</code>。 <code>ref</code>是<code>Git</code>用来标识特定提交的标签。</p>
<p>表示<code>master</code>引用的文件不存在，因为这是对仓库的第一次提交。 <code>Git</code>在<code>.git/refs/heads/master</code>下创建文件，并将其内容设置为提交对象的哈希值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">74ac3ad9cde0b265d2b4f1c778b283a6e2ffbafd</div></pre></td></tr></table></figure>
<p>(如果你在阅读时输入这些<code>Git</code>命令，你的<code>a1</code>提交的<code>哈希值</code>将不同于我的<code>哈希值</code>。 内容对象（如blob和树）总是散列为相同的值。 提交不会，因为它们包括创建者的日期和名称。)</p>
<p>添加<code>HEAD</code>和<code>master</code>到树图：</p>
<p><img src="/blog/uploads/git-works-how/3-a1-refs.png" alt="`HEAD` pointing at `master` and `master` pointing at the `a1` commit"></p>
<p><code>HEAD</code>指向<code>master</code>，就像提交之前一样。 但<code>maste</code>r现在存在并指向新的提交对象<code>a1</code>。</p>
<h3 id="再一次commit"><a href="#再一次commit" class="headerlink" title="再一次commit"></a>再一次commit</h3><p>下面是<code>a1</code>提交后的<code>Git</code>结构图。 包含工作副本和索引。</p>
<p><img src="/blog/uploads/git-works-how/4-a1-wc-and-index.png" alt="`a1` commit shown with the working copy and index"></p>
<p>工作副本，索引和<code>a1</code>提交都具有与<code>data/letter.txt</code>和<code>data/number.txt</code>相同的内容。 索引和<code>HEAD</code>提交都使用<code>Hash</code>来引用<code>blob</code>对象，但是工作副本内容作为文本存储在不同的地方。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;2&apos; &gt; data/number.txt</div></pre></td></tr></table></figure>
<p>将<code>data/number.txt</code>的内容设置为<code>2</code>.这会更新工作副本，但<code>索引</code>和<code>HEAD</code>不变。</p>
<p><img src="/blog/uploads/git-works-how/5-a1-wc-number-set-to-2.png" alt="`data/number.txt` set to `2` in the working copy"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git add data/number.txt</div></pre></td></tr></table></figure>
<p>将文件添加到<code>Git</code>。 这会向<code>objects</code>目录添加一个包含<code>2</code>的<code>blob</code>。 它指向新<code>blob</code>的<code>data/number.txt</code>的索引条目。</p>
<p><img src="/blog/uploads/git-works-how/6-a1-wc-and-index-number-set-to-2.png" alt="`data/number.txt` set to `2` in the working copy and index"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git commit -m &apos;a2&apos;</div><div class="line">          [master f0af7e6] a2</div></pre></td></tr></table></figure></p>
<p>提交的步骤与之前相同。</p>
<p>首先，创建一个新的树形图来表示索引的内容。</p>
<p><code>data/number.txt</code>的索引条目已更改。 旧的数据树不再反映<code>data</code>目录的索引状态。 必须创建一个新的<code>data</code>树对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">100664 blob 2e65efe2a145dda7ee51d1741299f848e5bf752e letter.txt</div><div class="line">100664 blob d8263ee9860594d2806b0dfd1bfd17528b0ba2a4 number.txt</div></pre></td></tr></table></figure>
<p>新数据树与旧数据树的哈希值不同。 必须创建一个新的根树以记录此<code>Hash</code>值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">040000 tree 40b0318811470aaacc577485777d7a6780e51f0b data</div></pre></td></tr></table></figure>
<p>其次，创建一个新的提交对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tree ce72afb5ff229a39f6cce47b00d1b0ed60fe3556</div><div class="line">parent 774b54a193d6cfdd081e581a007d2e11f784b9fe</div><div class="line">author Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424813101 -0500</div><div class="line">committer Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1424813101 -0500</div><div class="line"></div><div class="line">a2</div></pre></td></tr></table></figure>
<p>提交对象的第一行指向新的根树对象。 第二行指向<code>a1</code>：新提交的父级。要找到父提交，要跟着<code>HEAD</code>和<code>master</code>来掌握并发现<code>a1</code>的提交哈希。</p>
<p>最后，master分支文件的内容被设置为新提交的<code>hash</code>值。</p>
<p><img src="/blog/uploads/git-works-how/7-a2.png" alt="`a2` commit"></p>
<p><img src="/blog/uploads/git-works-how/8-a2-just-objects-commits-and-refs.png" alt="Git graph without the working copy and index"></p>
<p>内容存储为对象树。 这意味着只有diffs存储在对象数据库中。 看看上面的图表。 <code>a2 commit</code>重用了在<code>a1</code>提交之前创建的<code>blob</code>。 类似地，如果提交中整个没有变，则其树以及其下的所有<code>blob</code>和树可以被重用。 一般来说，提交的内容更改很少。 这意味着<code>Git</code>可以在小的空间中存储大的提交历史。</p>
<p>每个提交都有一个父级。 这意味着存储库可以存储项目的历史记录。</p>
<p><code>refs</code>是提交历史的一部分或另一部分的入口点。 这意味着提交可以被赋予有意义的名称。 用户将他们的工作组织到对他们的项目有意义的谱系中，具体的参考如<code>fix-for-bug-376</code>。 <code>Git</code>使用符号引用，如<code>HEAD</code>，<code>MERGE_HEAD</code>和<code>FETCH_HEAD</code>来支持操作提交历史记录的命令。</p>
<p><code>objects</code>目录中的节点是不可变的。 这意味着内容被编辑，而不是被删除。 每一次添加的内容和每次提交的对象都是在目录中.</p>
<p><code>refs</code>是可变的。 因此，<code>ref</code>的含义可以改变。 <code>master</code>指向的提交可能是当前项目的最佳版本，但是，很快，它将被更新的更好的提交取代。</p>
<h3 id="Check-out-a-commit"><a href="#Check-out-a-commit" class="headerlink" title="Check out a commit"></a>Check out a commit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git checkout 37888c2</div><div class="line">          You are in &apos;detached HEAD&apos; state...</div></pre></td></tr></table></figure>
<p>使用<code>Hash</code>值<code>checkout``a2</code>的提交(如果你在运行这些git命令，这里的<code>hash</code>值要换成你自己的，使用<code>git log</code>查看)</p>
<p><code>checkout</code> 有四个步骤：</p>
<ul>
<li>获取<code>a2</code>提交，并获取指向它的树图</li>
<li>它将树形图中的文件条目写入工作副本。 这将导致没有更改。 工作副本已经具有被写入其中的树图的内容，因为<code>HEAD</code>已经通过<code>master</code>指向<code>a2</code>提交。</li>
<li>将树图中的文件条目写入索引。 这也导致没有变化。 索引已经具有<code>a2</code>提交的内容。</li>
<li><code>HEAD</code>的内容设置为<code>a2</code>提交的哈希：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f0af7e62679e144bb28c627ee3e8f7bdb235eee9</div></pre></td></tr></table></figure>
<p>将<code>HEAD</code>的内容设置为<code>Hash</code>值会使存储库处于分离的<code>HEAD</code>状态。 注意在下面的图表中，<code>HEAD</code>直接指向<code>a2</code>提交，而不是指向<code>master</code>。</p>
<p><img src="/blog/uploads/git-works-how/9-a2-detached-head.png" alt="Detached `HEAD` on `a2` commit"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;3&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git add data/number.txt</div><div class="line">~/alpha $ git commit -m &apos;a3&apos;</div><div class="line">          [detached HEAD 3645a0e] a3</div></pre></td></tr></table></figure>
<p>将<code>data/number.txt</code>的内容设置为<code>3</code>，并提交更改。 <code>Git</code>去<code>HEAD</code>得到<code>a3</code>提交的父级。 而不是找到一个分支ref，它找到并返回<code>a2</code>提交的哈希。</p>
<p><code>Git</code>更新<code>HEAD</code>直接指向新的<code>a3</code>提交的哈希。 存储库仍处于分离的<code>HEAD</code>状态。 它不在一个分支上，因为没有提交指向<code>a3</code>或其一个后代。 这意味着它很容易丢失。</p>
<p><img src="/blog/uploads/git-works-how/10-a3-detached-head.png" alt="`a3` commit that is not on a branch"></p>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git branch deputy</div></pre></td></tr></table></figure>
<p>创建一个新分支<code>deputy</code>。 这只是在<code>.git/refs/heads/deputy</code>创建一个新文件，其中包含<code>HEAD</code>指向的哈希, 也就是<code>a3</code>提交的哈希。</p>
<blockquote>
<p>分支只是refs, refs只是文件。 这意味着Git分支是轻量级的。</p>
</blockquote>
<p><code>deputy</code>分支的创建将新的<code>a3</code>提交安全地放置在分支上。 <code>HEAD</code>仍然分离，因为它仍然直接指向一个提交。</p>
<p><img src="/blog/uploads/git-works-how/11-a3-on-deputy.png" alt="`a3` commit now on the `deputy` branch"></p>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git checkout master</div><div class="line">          Switched to branch &apos;master&apos;</div></pre></td></tr></table></figure>
<p>切换到了<code>master</code>分支</p>
<ul>
<li>获取<code>a2</code>提交，并将<code>master</code>指向获取提交点的树图。</li>
<li>树形图中的文件条目替换工作副本的文件。 这将使<code>data/number.txt</code>的内容设置为2。</li>
<li>将树图中的文件条目写入索引。 这会将<code>data/number.txt</code>的条目更新为2个<code>blob</code>的散列。</li>
<li>改变<code>HEAD</code>的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ref: refs/heads/master</div></pre></td></tr></table></figure>
<p><img src="/blog/uploads/git-works-how/12-a3-on-master-on-a2.png" alt="`master` checked out and pointing at the `a2` commit"></p>
<h3 id="切换到与工作副本不兼容-有改变-的分支"><a href="#切换到与工作副本不兼容-有改变-的分支" class="headerlink" title="切换到与工作副本不兼容(有改变)的分支"></a>切换到与工作副本不兼容(有改变)的分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;789&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git checkout deputy</div><div class="line">          Your changes to these files would be overwritten</div><div class="line">          by checkout:</div><div class="line">            data/number.txt</div><div class="line">          Commit your changes or stash them before you</div><div class="line">          switch branches.</div></pre></td></tr></table></figure>
<p>将<code>data/number.txt</code>的内容设置为<code>789</code>， 当<code>checkout</code>到<code>deputy</code>时，<code>Git</code>报了一个错误。</p>
<p><code>HEAD</code>指向<code>master</code>，<code>master</code>指向<code>a2</code>，其中<code>data/number.txt</code>的内容是<code>2</code>。<code>deputy</code>指向<code>a3</code>，其中<code>data/number.txt</code>的内容是<code>3</code>。<code>data/number.txt</code>在工作副本的内容为<code>789</code>，所有这些版本都不同，差异必须解决。</p>
<p><code>Git</code>可以使用要切换分支中提交的版本替换掉工作副本中的版本，这样可以避免数据丢失。</p>
<p><code>Git</code>可以合并工作副本的版本和要切换分支中的版本，但这很复杂。</p>
<p>所以<code>Git</code>报了一个错误，不能切换分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;2&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git checkout deputy</div><div class="line">          Switched to branch &apos;deputy&apos;</div></pre></td></tr></table></figure>
<p>把<code>data/number.txt</code>的内容变回<code>2</code>时，便切换成功了。</p>
<p><img src="/blog/uploads/git-works-how/13-a3ondeputy.png" alt="`deputy` checked out"></p>
<h3 id="合并祖先"><a href="#合并祖先" class="headerlink" title="合并祖先"></a>合并祖先</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git merge master</div><div class="line">          Already up-to-date.</div></pre></td></tr></table></figure>
<p>将主分支<code>master</code>和并到<code>deputy</code>分支。和并两个分支实际上是合并两个提交。第一个提交指向<code>deputy</code>，它是接收者。第二个提交指向<code>master</code>，它是提交者。可以理解为把<code>master</code>提交到<code>deputy</code>。对于这个合并，<code>git</code>什么也没有做，因为两个分支的内容是一样的。</p>
<p>图中的一系列的提交可以看成是对存储库的一系列更改。这也就意味着，在合并中，如果提交者(<code>master</code>)是接收者(<code>deputy</code>)的祖先，<code>git</code>将什么也不做，因为这些变化已经存在。</p>
<h3 id="合并后代"><a href="#合并后代" class="headerlink" title="合并后代"></a>合并后代</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git checkout master</div><div class="line">          Switched to branch &apos;master&apos;</div></pre></td></tr></table></figure>
<p>切换到分支<code>master</code></p>
<p><img src="/blog/uploads/git-works-how/14-a3-on-master-on-a2.png" alt="`master` checked out and pointing at the `a2` commit"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git merge deputy</div><div class="line">          Fast-forward</div></pre></td></tr></table></figure>
<p>合并<code>deputy</code>到<code>master</code>。<code>Git</code>发现接受者的<code>a2</code>提是提交者<code>a3</code>的祖先，它可以做快进合并。</p>
<p>获得提交者的提交<code>a3</code>并提供指向它的树图，将树图中的文件条目写入工作副本和索引。<code>快进</code>是指<code>master</code>指向<code>a3</code>。</p>
<p><img src="/blog/uploads/git-works-how/15-a3-on-master.png" alt="`a3` commit from `deputy` fast-forward merged into `master`"></p>
<p>在合并中，如果提交者(<code>deputy</code>分支上的<code>a3</code>提价)是接收者(<code>master</code>上的<code>a2</code>提价)的后代，则历史记录不改变。 已经有一系列提交描述了要做出的改变(<code>接收者和提交者之间的提交序列</code>)。 虽然Git历史没有改变，Git图确实改变。 HEAD指向的具体引用被更新为指向提交者(<code>master</code>指向<code>a3</code>)。</p>
<h3 id="合并来自两个不同谱系的分支"><a href="#合并来自两个不同谱系的分支" class="headerlink" title="合并来自两个不同谱系的分支"></a>合并来自两个不同谱系的分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;4&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git add data/number.txt</div><div class="line">~/alpha $ git commit -m &apos;a4&apos;</div><div class="line">          [master 7b7bd9a] a4</div></pre></td></tr></table></figure>
<p>把<code>number.txt</code>的内容设置为<code>4</code>，并提交到<code>master</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git checkout deputy</div><div class="line">          Switched to branch &apos;deputy&apos;</div><div class="line">~/alpha $ printf &apos;b&apos; &gt; data/letter.txt</div><div class="line">~/alpha $ git add data/letter.txt</div><div class="line">~/alpha $ git commit -m &apos;b3&apos;</div><div class="line">          [deputy 982dffb] b3</div></pre></td></tr></table></figure>
<p>切换到<code>deputy</code>分支，把<code>data/letter.txt</code>的内容设置为<code>b</code>，并提交到<code>deputy</code>。</p>
<p><img src="/blog/uploads/git-works-how/16-a4-b3-on-deputy.png" alt="`a4` committed to `master`, `b3` committed to `deputy` and `deputy` checked out"></p>
<p>提交可以共享父级，这意味着可以在提价的历史中创建新的谱系。</p>
<p>提交可以有多个父级。 这意味着单独的谱系可以通过具有两个父的提交来合并：合并提交。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git merge master -m &apos;b4&apos;</div><div class="line">          Merge made by the &apos;recursive&apos; strategy.</div></pre></td></tr></table></figure>
<p>合并<code>master</code>到<code>deputy</code></p>
<p><code>Git</code>发现接收者<code>b3</code>和提供者<code>a4</code>在不同的谱系中。 它做一个合并提交。 这个过程有八个步骤。</p>
<ol>
<li><code>Git</code>将提交者的提交的哈希写入到<code>alpha/.git/MERGE_HEAD</code>文件。 这个文件的存在告诉<code>Git</code>在合并中。</li>
<li><code>Git</code>查找基本提交：接收者和提交者提交的最近的祖先的共同点。</li>
</ol>
<p><img src="/blog/uploads/git-works-how/17-a4-b3-on-deputy.png" alt="`a3`, the base commit of `a4` and `b3`"></p>
<p>提交有父级别。 这意味着可以找到两个谱系起始点。 <code>Git</code>从<code>b3</code>向后跟踪，找到所有的祖先，从<code>a4</code>向后寻找所有的祖先。 它找到两个谱系共享的最近的祖先<code>a3</code>。 这是基本提交。</p>
<ol>
<li><code>Git</code>从接收者和提交者提交的树图生成基本的索引。</li>
<li><code>Git</code>生成一个<code>diff</code>，它将接收者提交和提交者提交对基础提交所做的更改合并。 此<code>diff</code>是指向更改的文件路径列表：添加，删除，修改或冲突。</li>
</ol>
<p><code>Git</code>获取出现在<code>base</code>，<code>receiver</code>或<code>giver</code>索引中的所有文件的列表。 比较较索引条目以决定对文件做出的更改。 它将一个相应的条目写入<code>diff</code>。 在这种情况下，<code>diff</code>有两个条目。</p>
<p>第一个条目是是<code>data/letter.txt</code>。 文件内容在<code>base</code>和<code>receiver</code>中不同。 但是在<code>base</code>和<code>giver</code>中是一样的。 <code>Git</code>看到内容被<code>reviceer</code>修改，但是没有被<code>giver</code>修改。 <code>data/letter.txt</code>的<code>diff</code>条目是一个修改，而不是冲突。</p>
<p><code>diff</code>中的第二个条目是<code>data/number.txt</code>。 在这种情况下，文件内容在<code>base</code>和<code>receiver</code>中是相同的，并且在<code>giver</code>中是不同的。 <code>data/letter.txt</code>的<code>diff</code>条目也是一个修改。</p>
<p>可以找到合并的<code>base</code>提交。 这意味着，如果一个文件只是从<code>receiver</code>或提<code>giver</code>的<code>base</code>改变，<code>Git</code>可以自动解决该文件的合并。 这减少了用户必须做的工作。</p>
<ol>
<li>由<code>diff</code>中的条目指示的更改将应用于工作副本。 <code>data/letter.txt</code>的内容设置为<code>b</code>，<code>data/number.txt</code>的内容设置为<code>4</code>。</li>
<li>由<code>diff</code>中的条目指示的更改将应用于索引。 <code>data/letter.txt</code>的条目指向<code>b</code> <code>blob</code>，<code>data/number.txt</code>的条目指向<code>4</code> <code>blob</code>。</li>
<li>更新索引：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tree 20294508aea3fb6f05fcc49adaecc2e6d60f7e7d</div><div class="line">parent 982dffb20f8d6a25a8554cc8d765fb9f3ff1333b</div><div class="line">parent 7b7bd9a5253f47360d5787095afc5ba56591bfe7</div><div class="line">author Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1425596551 -0500</div><div class="line">committer Mary Rose Cook &lt;mary@maryrosecook.com&gt; 1425596551 -0500</div><div class="line"></div><div class="line">b4</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：这次提交有两个父级</p>
</blockquote>
<ol>
<li>将当前分支<code>deputy</code> 分支指向新的提交。</li>
</ol>
<p><img src="/blog/uploads/git-works-how/18-b4-on-deputy.png" alt="`b4`, the merge commit resulting from the recursive merge of `a4` into `b3`"></p>
<h3 id="合并来自不同谱系的两个提交，这两个提交都修改同一个文件"><a href="#合并来自不同谱系的两个提交，这两个提交都修改同一个文件" class="headerlink" title="合并来自不同谱系的两个提交，这两个提交都修改同一个文件"></a>合并来自不同谱系的两个提交，这两个提交都修改同一个文件</h3><p>切换到<code>master</code>分支，并把<code>deputy</code>合并到<code>master</code>，<code>快进</code>到<code>b4</code>，现在<code>master</code>和<code>deputy</code>都指向同一个提交</p>
<p><img src="/blog/uploads/git-works-how/19-b4-master-deputy-on-b4.png" alt="`deputy` merged into `master` to bring `master` up to the latest commit, `b4`"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git checkout deputy</div><div class="line">          Switched to branch &apos;deputy&apos;</div><div class="line">~/alpha $ printf &apos;5&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git add data/number.txt</div><div class="line">~/alpha $ git commit -m &apos;b5&apos;</div><div class="line">          [deputy bd797c2] b5</div></pre></td></tr></table></figure>
<p>切换到<code>deputy</code>分支，把<code>data/number.txt</code>的内容设置为<code>5</code>，并提交。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git checkout master</div><div class="line">          Switched to branch &apos;master&apos;</div><div class="line">~/alpha $ printf &apos;6&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git add data/number.txt</div><div class="line">~/alpha $ git commit -m &apos;b6&apos;</div><div class="line">          [master 4c3ce18] b6</div></pre></td></tr></table></figure>
<p>切换到<code>master</code>分支，把<code>data/number.txt</code>的内容设置为<code>6</code>，并提交。</p>
<p><img src="/blog/uploads/git-works-how/20-b5-on-deputy-b6-on-master.png" alt="`b5` commit on `deputy` and `b6` commit on `master`"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git merge deputy</div><div class="line">          CONFLICT in data/number.txt</div><div class="line">          Automatic merge failed; fix conflicts and</div><div class="line">          commit the result.</div></pre></td></tr></table></figure>
<p>将<code>deputy</code>合并到<code>master</code>。存在冲突，并且合并已暂停。冲突合并的过程遵循与未冲突合并的过程相同的前六个步骤：设置<code>.git/MERGE_HEAD</code>，查找<code>base</code>，生成<code>base</code>，<code>receiver</code>，<code>giver</code>的索引，创建<code>diff</code>，更新工作副本和更新索引。由于冲突，不采取第七提交步骤和第八更新<code>ref</code>步骤。让我们再次看看这些步骤，发生了什么。</p>
<ol>
<li><code>Git</code>将<code>giver</code>提交的哈希写入<code>.git/MERGE_HEAD</code>文件。</li>
</ol>
<p><img src="/blog/uploads/git-works-how/21-b6-on-master-with-merge-head.png" alt="`MERGE_HEAD` written during merge of `b5` into `b6`"></p>
<ol>
<li><code>Git</code>找到<code>base</code>提交<code>b4</code></li>
<li><code>Git</code>从接收者和提交者提交的树图生成基本的索引。</li>
<li><code>Git</code>生成一个<code>diff</code>，它将接收者提交和提交者提交对基础提交所做的更改合并。 此<code>diff</code>是指向更改的文件路径列表：添加，删除，修改或冲突。</li>
</ol>
<p>在这种情况下，<code>diff</code>只包含一个条目：<code>data/number.txt</code>。 该条目被标记为冲突，因为<code>data/number.txt</code>的内容在接收者，提供者和<code>base</code>中是不同的。</p>
<ol>
<li>由<code>diff</code>中的条目指示的更改将应用于工作副本。 对于冲突区域，<code>Git</code>将两个版本写入工作副本中的文件。 <code>data/number.txt</code>的内容设置为：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line">6</div><div class="line">=======</div><div class="line">5</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; deputy</div></pre></td></tr></table></figure>
<ol>
<li>由<code>diff</code>中的条目指示的更改应用于索引。 索引中的条目通过其文件路径和阶段的组合成唯一标识。 未冲突文件的条目具有阶段<code>0</code>.在此合并之前，索引如下所示，其中<code>0</code>是阶段值：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0 data/letter.txt 63d8dbd40c23542e740659a7168a0ce3138ea748</div><div class="line">0 data/number.txt 62f9457511f879886bb7728c986fe10b0ece6bcb</div></pre></td></tr></table></figure>
<p>在合并<code>diff</code>被写入索引之后，索引如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0 data/letter.txt 63d8dbd40c23542e740659a7168a0ce3138ea748</div><div class="line">1 data/number.txt bf0d87ab1b2b0ec1a11a3973d2845b42413d9767</div><div class="line">2 data/number.txt 62f9457511f879886bb7728c986fe10b0ece6bcb</div><div class="line">3 data/number.txt 7813681f5b41c028345ca62a2be376bae70b7f61</div></pre></td></tr></table></figure>
<p>在阶段<code>0</code>的<code>data/letter.txt</code>的条目与在合并之前相同。 在阶段<code>0</code>的<code>data/number.txt</code>的条目被去掉了。 它有三个新的条目。 阶段<code>1</code>的条目具有<code>base</code> <code>data/number.txt</code>内容的散列。 阶段<code>2</code>的条目具有<code>receiver</code> <code>data/number.txt</code>内容的散列。 阶段<code>3</code>的条目具有<code>giver</code> <code>data/number.txt</code>内容的散列。 这三个条目的存在告诉<code>Git</code> <code>data/number.txt</code>是冲突的。合并就暂停了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;11&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git add data/number.txt</div></pre></td></tr></table></figure>
<p>通过将<code>data/number.txt</code>的内容设置为<code>11</code>来合成两个冲突版本的内容。他们将文件添加到索引。 <code>Git</code>添加一个包含<code>11</code>的<code>Blob</code>。添加一个冲突的文件告诉<code>Git</code>冲突已解决。 <code>Git</code>从索引中删除阶段<code>1</code>,<code>2</code>和<code>3</code>的<code>data/number.txt</code>条目。 在阶段<code>0</code>的<code>data/number.txt</code>的条目中添加新<code>blob</code>的散列。 该索引现在为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0 data/letter.txt 63d8dbd40c23542e740659a7168a0ce3138ea748</div><div class="line">0 data/number.txt 9d607966b721abde8931ddd052181fae905db503</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git commit -m &apos;b11&apos;</div><div class="line">          [master 251a513] b11</div></pre></td></tr></table></figure>
<ol>
<li>提交。 <code>Git</code>在存储库中看到<code>.git/MERGE_HEAD</code>，告诉它合并正在进行。 然后检查索引并发现没有冲突。 就创建一个新的提交<code>b11</code>，以记录解析的合并的内容。 z最后会删除<code>.git/MERGE_HEAD</code>文件。 这将完成合并。</li>
<li>将当前分支<code>master</code>指向新的提交。</li>
</ol>
<p><img src="/blog/uploads/git-works-how/22-b11-on-master.png" alt="`b11`, the merge commit resulting from the conflicted, recursive merge of `b5` into `b6`"></p>
<h3 id="移除一个文件"><a href="#移除一个文件" class="headerlink" title="移除一个文件"></a>移除一个文件</h3><p>下面的图包括提交历史、最近提交的树和<code>blob</code>以及工作副本和索引：</p>
<p><img src="/blog/uploads/git-works-how/24-b11-letter-removed-from-wc-and-index.png" alt="The working copy, index, `b11` commit and its tree graph"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git rm data/letter.txt</div><div class="line">          rm &apos;data/letter.txt&apos;</div></pre></td></tr></table></figure>
<p>告诉<code>Git</code>删除<code>data/letter.txt</code>。 该文件从工作副本中删除。 该条目从索引中删除。</p>
<p><img src="/blog/uploads/git-works-how/24-b11-letter-removed-from-wc-and-index.png" alt="After `data/letter.txt` `rm`ed from working copy and index"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git commit -m &apos;11&apos;</div><div class="line">          [master d14c7d2] 11</div></pre></td></tr></table></figure>
<p>提交。 作为提交的一部分，一如既往，Git构建一个表示索引内容的树形图。 <code>data/letter.txt</code>不包括在树图中，因为它不在索引中。</p>
<p><img src="/blog/uploads/git-works-how/25-11.png" alt="`11` commit made after `data/letter.txt` `rm`ed"></p>
<h3 id="复制存储库"><a href="#复制存储库" class="headerlink" title="复制存储库"></a>复制存储库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ cd ..</div><div class="line">      ~ $ cp -R alpha bravo</div></pre></td></tr></table></figure>
<p>将<code>alpha/</code>存储库的内容复制到<code>bravo/</code>目录。 这将产生以下目录结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">~</div><div class="line">├── alpha</div><div class="line">|   └── data</div><div class="line">|       └── number.txt</div><div class="line">└── bravo</div><div class="line">    └── data</div><div class="line">        └── number.txt</div></pre></td></tr></table></figure>
<p>现在<code>bravo</code>目录中有另一个<code>Git</code>图：</p>
<p><img src="/blog/uploads/git-works-how/26-11-cp-alpha-to-bravo.png" alt="New graph created when `alpha` `cp`ed to `bravo`"></p>
<h3 id="将存储库链接到另一个存储库"><a href="#将存储库链接到另一个存储库" class="headerlink" title="将存储库链接到另一个存储库"></a>将存储库链接到另一个存储库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">      ~ $ cd alpha</div><div class="line">~/alpha $ git remote add bravo ../bravo</div></pre></td></tr></table></figure>
<p>移回到<code>alpha</code>存储库。 他们将<code>bravo</code>设置为<code>alpha</code>上的远程存储库。 这会在<code>alpha/.git/config</code>文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[remote &quot;bravo&quot;]</div><div class="line">	url = ../bravo/</div></pre></td></tr></table></figure>
<h3 id="从远程获取分支"><a href="#从远程获取分支" class="headerlink" title="从远程获取分支"></a>从远程获取分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/alpha $ cd ../bravo</div><div class="line">~/bravo $ printf &apos;12&apos; &gt; data/number.txt</div><div class="line">~/bravo $ git add data/number.txt</div><div class="line">~/bravo $ git commit -m &apos;12&apos;</div><div class="line">          [master 94cd04d] 12</div></pre></td></tr></table></figure>
<p>进入<code>bravo</code>存储库。 将<code>data/number.txt</code>的内容设置为<code>12</code>，并将更改提交到<code>bravo</code>上的<code>master</code>。</p>
<p><img src="/blog/uploads/git-works-how/27-12-bravo.png" alt="`12` commit on `bravo` repository"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/bravo $ cd ../alpha</div><div class="line">~/alpha $ git fetch bravo master</div><div class="line">          Unpacking objects: 100%</div><div class="line">          From ../bravo</div><div class="line">            * branch master -&gt; FETCH_HEAD</div></pre></td></tr></table></figure>
<p>进入<code>alpha</code>存储库。 从<code>bravo</code>获取<code>master</code>到<code>alpha</code>。 这个过程有四个步骤。</p>
<ol>
<li><code>Git</code>获取<code>master</code>在<code>bravo</code>上指向的提交的哈希。 这是<code>12</code>提交的哈希。</li>
<li><code>Git</code>提供了<code>12</code>提交所依赖的所有对象的列表：提交对象本身，其树图中的对象，<code>12</code>提交的祖先提交和它们的树图中的对象。 它从此列表中删除<code>alpha</code>对象数据库已有的对象。 它将其余部分复制到<code>alpha/.git/objects/</code>。</li>
<li>将<code>alpha/.git/refs/remotes/bravo/master</code>下的具体<code>ref</code>文件的内容设置为12提交的哈希值。</li>
<li>将<code>alpha/.git/FETCH_HEAD</code>的内容设置为：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">94cd04d93ae88a1f53a4646532b1e8cdfbc0977f branch &apos;master&apos; of ../bravo</div></pre></td></tr></table></figure>
<p>下图表示了<code>fetch</code>命令从<code>bravo</code>获取了<code>master</code>的<code>12</code>提交</p>
<p><img src="/blog/uploads/git-works-how/28-12-fetched-to-alpha.png" alt="`alpha` after `bravo/master` fetched"></p>
<p>对象是可以复制的，这意味着可以在存储库之间共享历史记录。</p>
<p>存储库可以存储远程分支引用，如<code>alpha/.git/refs/remotes/bravo/master</code>， 这意味着存储库可以在本地记录在远程存储库上分支的状态。 在获取时是正确的，但如果远程分支改变，它将过期。</p>
<h3 id="合并FETCH-HEAD"><a href="#合并FETCH-HEAD" class="headerlink" title="合并FETCH_HEAD"></a>合并FETCH_HEAD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git merge FETCH_HEAD</div><div class="line">          Updating d14c7d2..94cd04d</div><div class="line">          Fast-forward</div></pre></td></tr></table></figure>
<p>合并<code>FETCH_HEAD</code>, <code>FETCH_HEAD</code>只是另一个<code>ref</code>。 解析了<code>12</code>提交，<code>giver</code>。 <code>master</code>开始指向<code>11</code>提交。 <code>Git</code>做一个快进合并，并将<code>master</code>指向在<code>12</code>提交。</p>
<p><img src="/blog/uploads/git-works-how/29-12-merged-to-alpha.png" alt="`alpha` after `FETCH_HEAD` merged"></p>
<h3 id="从远程分支Pull"><a href="#从远程分支Pull" class="headerlink" title="从远程分支Pull"></a>从远程分支Pull</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git pull bravo master</div><div class="line">          Already up-to-date.</div></pre></td></tr></table></figure>
<p>将<code>bravo</code>的<code>master</code>拉到<code>alpha</code>。 <code>Pull</code>是<code>fetch and merge FETCH_HEAD</code>的缩写。</p>
<h3 id="Clone一个存储库"><a href="#Clone一个存储库" class="headerlink" title="Clone一个存储库"></a>Clone一个存储库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~/alpha $ cd ..</div><div class="line">      ~ $ git clone alpha charlie</div><div class="line">          Cloning into &apos;charlie&apos;</div></pre></td></tr></table></figure>
<p>移动到上面的目录。 <code>clone</code> <code>alpha</code>到<code>charlie</code>。 <code>clone</code>到<code>charlie</code>具有与生成<code>bravo</code>存储库的<code>cp</code>类似的结果。 <code>Git</code>创建一个名为<code>charlie</code>的新目录。 它将<code>charlie</code>作为一个Git仓库，将<code>alpha</code>添加为远程仓库被称为<code>origin</code>，获取源并合并<code>FETCH_HEAD</code>。</p>
<h3 id="Push分支到远程分支"><a href="#Push分支到远程分支" class="headerlink" title="Push分支到远程分支"></a>Push分支到远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">      ~ $ cd alpha</div><div class="line">~/alpha $ printf &apos;13&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git add data/number.txt</div><div class="line">~/alpha $ git commit -m &apos;13&apos;</div><div class="line">          [master 3238468] 13</div></pre></td></tr></table></figure>
<p>返回到<code>alpha</code>仓库，把<code>data/number.txt</code>的内容设置为<code>13</code>，并提交。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git remote add charlie ../charlie</div></pre></td></tr></table></figure>
<p>设置<code>alpha</code>的远程仓库为<code>charlie</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git push charlie master</div><div class="line">          Writing objects: 100%</div><div class="line">          remote error: refusing to update checked out</div><div class="line">          branch: refs/heads/master because it will make</div><div class="line">          the index and work tree inconsistent</div></pre></td></tr></table></figure>
<p><code>push</code> <code>master</code>到<code>charlie</code>.</p>
<p><code>13</code>提交所需的所有对象都复制到<code>charlie</code>。</p>
<p>此时，推送过程停止。 <code>Git</code>告诉我们出了什么问题。 它拒绝推送到远程分支。 这是有道理的, 因为推送将更新远程索引和<code>HEAD</code>。 这将导致混乱，如果有人正在编辑远程的工作副本。(这也有其他的解决办法，可以google一下)</p>
<p>此时，可以创建一个新的分支，将<code>13</code>提交合并到其中，并将该分支推送到<code>charlie</code>。但是我们想要一个类似<code>GitHub</code>那样的中央仓库，无论什么时候都可以<code>push</code> <code>pull</code>。(中央仓库为什么可以？因为在初始化仓库的时候使用的是<code>git init --bare</code>, 初始化成一个裸存储库，远程仓库应该都要这么初始化。)</p>
<h3 id="Clone-一个裸仓库"><a href="#Clone-一个裸仓库" class="headerlink" title="Clone 一个裸仓库"></a>Clone 一个裸仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">~/alpha $ cd ..</div><div class="line">      ~ $ git clone alpha delta --bare</div><div class="line">          Cloning into bare repository &apos;delta&apos;</div></pre></td></tr></table></figure>
<p>移动到上面的目录。 将<code>delta</code> <code>clone</code>为裸存储库。 这是一个有两个区别的普通<code>clone</code>。 配置文件指示存储库是裸的。 通常存储在<code>.git</code>目录中的文件存储在存储库的根目录中如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">delta</div><div class="line">├── HEAD</div><div class="line">├── config</div><div class="line">├── objects</div><div class="line">└── refs</div></pre></td></tr></table></figure>
<p><img src="/blog/uploads/git-works-how/30-13-alpha-cloned-to-delta-bare.png" alt="`alpha` and `delta` graphs after `alpha` cloned to `delta`"></p>
<h3 id="Push分支到裸存储库"><a href="#Push分支到裸存储库" class="headerlink" title="Push分支到裸存储库"></a>Push分支到裸存储库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">      ~ $ cd alpha</div><div class="line">~/alpha $ git remote add delta ../delta</div></pre></td></tr></table></figure>
<p>返回到<code>alpha</code>存储库。 将<code>delta</code>设置为<code>alpha</code>上的远程存储库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/alpha $ printf &apos;14&apos; &gt; data/number.txt</div><div class="line">~/alpha $ git add data/number.txt</div><div class="line">~/alpha $ git commit -m &apos;14&apos;</div><div class="line">          [master cb51da8] 14</div></pre></td></tr></table></figure>
<p>将<code>data/number.txt</code>的内容设置为<code>14</code>，并将更改提交到<code>alpha</code>上的<code>master</code></p>
<p><img src="/blog/uploads/git-works-how/31-14-alpha.png" alt="`14` commit on `alpha`"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/alpha $ git push delta master</div><div class="line">          Writing objects: 100%</div><div class="line">          To ../delta</div><div class="line">            3238468..cb51da8 master -&gt; master</div></pre></td></tr></table></figure>
<p><code>push</code> <code>master</code>到<code>delta</code>，有3个步骤</p>
<ol>
<li><code>master</code>分支上的<code>14</code>提交所需的所有对象都从<code>alpha/.git/objects/</code>复制到<code>delta/objects /</code>。</li>
<li><code>delta/refs/heads/master</code>被更新为指向<code>14</code>提交。</li>
<li><code>alpha/.git/refs/remotes/delta/master</code>设置为指向<code>14</code>提交。 <code>alpha</code>具有<code>delta</code>的状态的最新记录.</li>
</ol>
<p><img src="/blog/uploads/git-works-how/32-14-pushed-to-delta.png" alt="`14` commit pushed from `alpha` to `delta`"></p>
]]></content>
    
    <summary type="html">
    
      本文重点介绍了支持Git的图形结构，以及该图形的属性指示Git行为的方式。从基础开始，同时有实例讲解，根据实例建立一个更真实的模型，让你更好地理解git做了什么。
    
    </summary>
    
      <category term="git" scheme="https://plpcm.github.io/blog/categories/git/"/>
    
    
      <category term="git" scheme="https://plpcm.github.io/blog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>virtualenv 和 virtualenvwrapper 实践</title>
    <link href="https://plpcm.github.io/blog/2016/02/05/python-virtualenv-virtualenvwrapper-practice/"/>
    <id>https://plpcm.github.io/blog/2016/02/05/python-virtualenv-virtualenvwrapper-practice/</id>
    <published>2016-02-05T08:39:16.000Z</published>
    <updated>2016-12-05T08:32:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>各位 Python 的小伙伴肯定多多少少接触过 virtualenv。本文将介绍 virtualenv 以及如何更科学更优雅地使用 virtualenv。</p>
<h1 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h1><p>首先来聊一下 <code>virtualenv</code> 是个什么鬼。</p>
<p>在使用 <code>Python</code> 开发的过程中，工程一多，难免会碰到不同的工程依赖不同版本的库的问题；亦或者是在开发过程中不想让物理环境里充斥各种各样的库，引发未来的依赖灾难。此时，我们需要对于不同的工程使用不同的虚拟环境来保持开发环境以及宿主环境的清洁。这里，就要隆重介绍 <code>virtualenv</code>，一个可以帮助我们管理不同 <code>Python</code> 环境的绝好工具。<code>virtualenv</code> 可以在系统中建立多个不同并且相互不干扰的虚拟环境。另外，值得一提的是，在 <code>virtualenv</code> 的虚拟环境中使用 <code>pip</code> 安装依赖还可以绕过某些系统的权限设置，因为毕竟不需要向系统目录写入数据嘛~~</p>
<p>那么，<code>virtualenv</code> 是怎么运行的呢？</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先从安装讲起，这里假设已经安装了 <code>pip</code>，如果没有安装 <code>pip</code> 的话，请自行出门谷歌(好吧，我是好人，附上<a href="https://pip.readthedocs.org/en/stable" target="_blank" rel="external"><code>pip</code>官方文档</a>链接)。之后就可以用 <code>pip</code> 来直接安装 <code>virtualenv</code> 了。当然，这里可能是需要使用 <code>sudo</code> 提升权限的，毕竟是在宿主物理环境里安装。如下命令中 <code>sudo</code> 省略，如有需求请自行添加。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div></pre></td></tr></table></figure>
<p>好了现在你拥有了 <code>virtualenv</code> 虚拟环境管理器。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>接下来说使用。</p>
<p>比如我们想要做一点奇怪的事情，写一个脚本去抓取某个网站的信息，我们暂且把这个工程叫做 <code>spider</code> 吧。这个工程里需要访问网络，我们打算使用为人类编写的网络访问库 <code>requests</code>，但是我们又不想在宿主环境中安装这个包。让我们开始吧。</p>
<p>假设我们把这个工程放在 <code>/path/to/project/spider/</code> 目录下，并且这里我们把虚拟环境直接放在工程目录下。首先，我们在这个目录下建立一个虚拟环境。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /path/to/project/spider</div><div class="line">virtualenv --no-site-packages venv</div></pre></td></tr></table></figure>
<p>命令<code>virtualenv</code>就可以创建一个独立的Python运行环境，我们还加上了参数<code>--no-site-packages</code>，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。</p>
<p>这样，虚拟环境就建立好了。此时可以看到，在这个目录下面会有三个目录被建立:</p>
<blockquote>
<ul>
<li>bin</li>
<li>include</li>
<li>lib</li>
</ul>
</blockquote>
<p>其中，<code>bin</code> 目录中包含一些在这个虚拟环境中可用的命令，以及开启虚拟环境的脚本 <code>activate</code>；<code>include</code> 中包含虚拟环境中的头文件，包括 <code>Python</code> 的头文件；<code>lib</code> 中就是一些依赖库啦~~</p>
<p>当然，现在我们还没有进入到虚拟环境中。激活虚拟环境只需要一条命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> venv/bin/activate</div><div class="line">(vv) plpcm:spider docker$</div></pre></td></tr></table></figure>
<p>注意到命令提示符变了，有个<code>(venv)</code>前缀，表示当前环境是一个名为<code>venv</code>的Python环境。</p>
<p>接下来安装工程需要的 <code>requests</code> 库。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install requests</div></pre></td></tr></table></figure>
<p>搞定！</p>
<p>这时候在虚拟环境里就有了 <code>requests</code> 库，宿主环境中则不会被干扰。</p>
<p>那么如何退出虚拟环境嘞？退出就更简单啦，只需要下面一个命令就搞定啦。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deactivate</div></pre></td></tr></table></figure>
<p>此时就回到了进入虚拟环境之前，一切都好像没发生过。多年以后，如果你忘记了虚拟环境的位置，一切就真的没发生过了 = =</p>
<p>补充一句，如果想要删除虚拟环境，只要把这个spider目录下的 venv目录删掉就好了。</p>
<h1 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a>virtualenvwrapper</h1><p>为神马需要 <code>virtualenvwrapper</code>？这要从 <code>virtualenv</code> 说起。</p>
<p>上一节结束的时候说，如果忘记了虚拟环境的位置，一切就真的没发生过了。虽然是句玩笑，不过真的会发生哦~</p>
<p><code>virtualenv</code> 的一个最大的缺点就是，每次开启虚拟环境之前要去虚拟环境所在目录下的 <code>bin</code> 目录下 <code>source</code> 一下 <code>activate</code>，这就需要我们记住每个虚拟环境所在的目录。</p>
<p>一种可行的解决方案是，将所有的虚拟环境目录全都集中起来，比如放到 <code>~/virtualenvs/</code>，并对不同的虚拟环境使用不同的目录来管理。<code>virtualenvwrapper</code> 正是这样做的。并且，它还省去了每次开启虚拟环境时候的 <code>source</code> 操作，使得虚拟环境更加好用。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>同样，从安装开始。</p>
<p>安装 <code>virtualenvwrapper</code> 也可以使用 <code>pip</code> 的方式。需要加入 <code>sudo</code> 的话请自行加入哦~</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenvwrapper</div></pre></td></tr></table></figure>
<p>不过，在 Mac OS X El Capitan 上可能会出现安装报错的情况，主要问题出在一个叫做 <code>six</code> 的包上。因此安装的时候，可以采用如下方式。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenvwrapper --ignore-installed six</div></pre></td></tr></table></figure>
<p>现在，我们就拥有了一个可以管理虚拟环境的神器。</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>首先，需要对 <code>virtualenvwrapper</code> 进行配置。它需要指定一个环境变量，叫做 <code>WORKON_HOME</code>，并且需要运行一下它的初始化工具 <code>virtualenvwrapper.sh</code>，这个脚本在 <code>/usr/local/bin/</code> 目录下。<code>WORKON_HOME</code> 就是它将要用来存放各种虚拟环境目录的目录，这里我们可以设置为 <code>~/.virtualenvs</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> WORKON_HOME=<span class="string">'~/.virtualenvs'</span></div><div class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</div></pre></td></tr></table></figure>
<p>由于每次都需要执行这两部操作，我们可以将其写入终端的配置文件中。例如，如果使用 <code>bash</code>，则添加到 <code>~/.bashrc</code> 中；如果使用 <code>zsh</code>，则添加到 <code>~/.zshrc</code> 中。这样每次启动终端的时候都会自动运行，终端其中之后 <code>virtualenvwrapper</code> 就可以用啦。</p>
<p>利用 <code>virtualenvwrapper</code>，我们可以使用下面的命令轻松创建一个虚拟环境。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkvirtualenv spider</div></pre></td></tr></table></figure>
<p>之后我们就有了一个叫做 <code>spider</code> 的虚拟环境。它被存放在 <code>$WORKON_HOME/spider</code> 目录下。</p>
<p>新建虚拟环境之后会自动激活虚拟环境。如果我们平时想要进入某个虚拟环境，可以用下面的命令。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">workon spider</div></pre></td></tr></table></figure>
<p>这也就是为什么环境变量中存放虚拟环境的目录为啥叫做 <code>WORKON_HOME</code>。顺便说一句，<code>workon</code> 后面可是可以支持用 <code>tab</code> 自动补全的哟。</p>
<p>同样，离开虚拟环境，可以使用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deactivate</div></pre></td></tr></table></figure>
<p>另外，删除虚拟环境也一样简单。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rmvirtualenv spider</div></pre></td></tr></table></figure>
<h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>到这里，<code>virtualenv</code> 和 <code>virtualenvwrapper</code> 的基本使用就介绍完了，需要了解更多用法，可以参考官方文档哟。希望这两个工具能够帮助小伙伴们在工作中提高效率哟~~</p>
]]></content>
    
    <summary type="html">
    
      在使用 Python 开发的过程中，工程一多，难免会碰到不同的工程依赖不同版本的库的问题；亦或者是在开发过程中不想让物理环境里充斥各种各样的库，引发未来的依赖灾难。此时，我们需要对于不同的工程使用不同的虚拟环境来保持开发环境以及宿主环境的清洁。这里，就要隆重介绍 virtualenv，一个可以帮助我们管理不同 Python 环境的绝好工具。virtualenv 可以在系统中建立多个不同并且相互不干扰的虚拟环境。另外，值得一提的是，在 virtualenv 的虚拟环境中使用 pip 安装依赖还可以绕过某些系统的权限设置
    
    </summary>
    
      <category term="python" scheme="https://plpcm.github.io/blog/categories/python/"/>
    
    
      <category term="python" scheme="https://plpcm.github.io/blog/tags/python/"/>
    
      <category term="virtualenv" scheme="https://plpcm.github.io/blog/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>pip安装使用详解</title>
    <link href="https://plpcm.github.io/blog/2016/02/05/python-pip/"/>
    <id>https://plpcm.github.io/blog/2016/02/05/python-pip/</id>
    <published>2016-02-05T02:30:16.000Z</published>
    <updated>2016-12-05T08:32:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>pip类似RedHat里面的yum，安装<a href="http://www.ttlsa.com/python/" target="_blank" rel="external">Python</a>包非常方便。本节详细介绍pip的安装、以及使用方法。</p>
<h3 id="1、pip下载安装"><a href="#1、pip下载安装" class="headerlink" title="1、pip下载安装"></a><strong>1、pip下载安装</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -O https://bootstrap.pypa.io/get-pip.py</div><div class="line">sudo python get-pip.py</div></pre></td></tr></table></figure>
<h3 id="2-pip使用详解"><a href="#2-pip使用详解" class="headerlink" title="2. pip使用详解"></a><strong>2. pip使用详解</strong></h3><p>2.1 pip安装包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install SomePackage</div><div class="line">[...]</div><div class="line">Successfully installed SomePackage</div></pre></td></tr></table></figure>
<p>2.2 pip查看已安装的包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">show --files SomePackage</div><div class="line">  Name: SomePackage</div><div class="line">  Version: 1.0</div><div class="line">  Location: /my/env/lib/pythonx.x/site-packages</div><div class="line">  Files:</div><div class="line">   ../somepackage/__init__.py</div><div class="line">  [...]</div></pre></td></tr></table></figure>
<p>2.3 pip检查哪些包需要更新</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip list --outdated</div><div class="line">  SomePackage (Current: 1.0 Latest: 2.0)</div></pre></td></tr></table></figure>
<p>2.4 pip升级包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade SomePackage</div><div class="line">  [...]</div><div class="line">  Found existing installation: SomePackage 1.0</div><div class="line">  Uninstalling SomePackage:</div><div class="line">    Successfully uninstalled SomePackage</div><div class="line">  Running setup.py install <span class="keyword">for</span> SomePackage</div><div class="line">  Successfully installed SomePackage</div></pre></td></tr></table></figure>
<p>2.5 pip卸载包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pip uninstall SomePackage</div><div class="line">  Uninstalling SomePackage:</div><div class="line">    /my/env/lib/pythonx.x/site-packages/somepackage</div><div class="line">  Proceed (y/n)? y</div><div class="line">  Successfully uninstalled SomePackage</div></pre></td></tr></table></figure>
<h3 id="3-pip使用实例"><a href="#3-pip使用实例" class="headerlink" title="3. pip使用实例"></a><strong>3. pip使用实例</strong></h3><p>3.1 安装<a href="http://www.ttlsa.com/redis/" target="_blank" rel="external">redis</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install redis</div></pre></td></tr></table></figure>
<p>3.2 卸载redis</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pip uninstall redis</div><div class="line">Uninstalling redis:</div><div class="line">  /usr/lib/python2.6/site-packages/redis-2.9.1-py2.6.egg-info</div><div class="line">.....省略一些内容....</div><div class="line">Proceed (y/n)? y</div><div class="line">  Successfully uninstalled redis</div></pre></td></tr></table></figure>
<p>3.3 查看待更新包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pip list --outdate</div><div class="line">pygpgme (Current: 0.1 Latest: 0.3)</div><div class="line">pycurl (Current: 7.19.0 Latest: 7.19.3.1)</div><div class="line">iniparse (Current: 0.3.1 Latest: 0.4)</div></pre></td></tr></table></figure>
<h3 id="4-常见错误"><a href="#4-常见错误" class="headerlink" title="4. 常见错误"></a><strong>4. 常见错误</strong></h3><p>4.1 ImportError No module named setuptools<br>请参考《<a href="http://www.ttlsa.com/python/importerror-no-module-named-setuptools-res/?preview=true" target="_blank" rel="external">ImportError No module named setuptools解决</a>》</p>
<h3 id="5-pip参数解释"><a href="#5-pip参数解释" class="headerlink" title="5. pip参数解释"></a><strong>5. pip参数解释</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">pip --help</div><div class="line"></div><div class="line">Usage:</div><div class="line">  pip &lt;<span class="built_in">command</span>&gt; [options]</div><div class="line"></div><div class="line">Commands:</div><div class="line">  install                     Install packages.</div><div class="line">  download                    Download packages.</div><div class="line">  uninstall                   Uninstall packages.</div><div class="line">  freeze                      Output installed packages <span class="keyword">in</span> requirements format.</div><div class="line">  list                        List installed packages.</div><div class="line">  show                        Show information about installed packages.</div><div class="line">  check                       Verify installed packages have compatible dependencies.</div><div class="line">  search                      Search PyPI <span class="keyword">for</span> packages.</div><div class="line">  wheel                       Build wheels from your requirements.</div><div class="line">  <span class="built_in">hash</span>                        Compute hashes of package archives.</div><div class="line">  completion                  A helper <span class="built_in">command</span> used <span class="keyword">for</span> <span class="built_in">command</span> completion.</div><div class="line">  <span class="built_in">help</span>                        Show <span class="built_in">help</span> <span class="keyword">for</span> commands.</div><div class="line"></div><div class="line">General Options:</div><div class="line">  -h, --help                  Show help.</div><div class="line">  --isolated                  Run pip <span class="keyword">in</span> an isolated mode, ignoring environment variables and user configuration.</div><div class="line">  -v, --verbose               Give more output. Option is additive, and can be used up to 3 times.</div><div class="line">  -V, --version               Show version and exit.</div><div class="line">  -q, --quiet                 Give less output. Option is additive, and can be used up to 3 <span class="built_in">times</span> (corresponding to WARNING, ERROR, and CRITICAL logging levels).</div><div class="line">  --log &lt;path&gt;                Path to a verbose appending log.</div><div class="line">  --proxy &lt;proxy&gt;             Specify a proxy <span class="keyword">in</span> the form [user:passwd@]proxy.server:port.</div><div class="line">  --retries &lt;retries&gt;         Maximum number of retries each connection should attempt (default 5 <span class="built_in">times</span>).</div><div class="line">  --timeout &lt;sec&gt;             Set the socket timeout (default 15 seconds).</div><div class="line">  --exists-action &lt;action&gt;    Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort.</div><div class="line">  --trusted-host &lt;hostname&gt;   Mark this host as trusted, even though it does not have valid or any HTTPS.</div><div class="line">  --cert &lt;path&gt;               Path to alternate CA bundle.</div><div class="line">  --client-cert &lt;path&gt;        Path to SSL client certificate, a single file containing the private key and the certificate <span class="keyword">in</span> PEM format.</div><div class="line">  --cache-dir &lt;dir&gt;           Store the cache data <span class="keyword">in</span> &lt;dir&gt;.</div><div class="line">  --no-cache-dir              Disable the cache.</div><div class="line">  --disable-pip-version-check</div><div class="line">                              Don<span class="string">'t periodically check PyPI to determine whether a new version of pip is available for download. Implied with --no-index.</span></div></pre></td></tr></table></figure>
<h3 id="6-结束"><a href="#6-结束" class="headerlink" title="6. 结束"></a>6.<strong> 结束</strong></h3><p>安装使用一目了然，太简单了。</p>
]]></content>
    
    <summary type="html">
    
      pip类似RedHat里面的yum，安装Python包非常方便。本节详细介绍pip的安装、以及使用方法。
    
    </summary>
    
      <category term="python" scheme="https://plpcm.github.io/blog/categories/python/"/>
    
    
      <category term="python" scheme="https://plpcm.github.io/blog/tags/python/"/>
    
      <category term="pip" scheme="https://plpcm.github.io/blog/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>Macdown 编辑器</title>
    <link href="https://plpcm.github.io/blog/2016/02/02/macdown-introduce/"/>
    <id>https://plpcm.github.io/blog/2016/02/02/macdown-introduce/</id>
    <published>2016-02-02T08:38:10.000Z</published>
    <updated>2016-11-30T07:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://macdown.uranusjr.com/static/base/img/logo-160.png" alt="MacDown logo"></p>
<p>Hello there! I’m <strong>MacDown</strong>, the open source Markdown editor for OS X.</p>
<p>Let me introduce myself.</p>
<h2 id="Markdown-and-I"><a href="#Markdown-and-I" class="headerlink" title="Markdown and I"></a>Markdown and I</h2><p><strong>Markdown</strong> is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">here</a>.</p>
<p><strong>MacDown</strong> is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel.</p>
<p><img src="http://d.pr/i/10UGP+" alt="MacDown Screenshot"></p>
<p>I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the <a href="#markdown-pane"><strong>Markdown</strong> preference pane</a>.</p>
<p>You can specify extra HTML rendering options through the <a href="#rendering-pane"><strong>Rendering</strong> preference pane</a>.</p>
<p>You can customize the editor window to you liking in the <a href="#editor-pane"><strong>Editor</strong> preferences pane</a>:</p>
<p>You can configure various application (that’s me!) behaviors in the <a href="#general-pane"><strong>General</strong> preference pane</a>.</p>
<h2 id="The-Basics"><a href="#The-Basics" class="headerlink" title="The Basics"></a>The Basics</h2><p>Before I tell you about all the extra syntaxes and capabilities I have, I’ll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the <a href="#markdown-pane"><strong>Markdown</strong> preference pane</a>. Lets jump right in.  </p>
<h3 id="Line-Breaks"><a href="#Line-Breaks" class="headerlink" title="Line Breaks"></a>Line Breaks</h3><p>To force a line break, put two spaces and a newline (return) at the end of the line.</p>
<ul>
<li><p>This two-line bullet<br>won’t break</p>
</li>
<li><p>This two-line bullet<br>will break</p>
</li>
</ul>
<p>Here is the code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* This two-line bullet </div><div class="line">won&apos;t break</div><div class="line"></div><div class="line">* This two-line bullet  </div><div class="line">will break</div></pre></td></tr></table></figure>
<h3 id="Strong-and-Emphasize"><a href="#Strong-and-Emphasize" class="headerlink" title="Strong and Emphasize"></a>Strong and Emphasize</h3><p><strong>Strong</strong>: <code>**Strong**</code> or <code>__Strong__</code> (Command-B)<br><em>Emphasize</em>: <code>*Emphasize*</code> or <code>_Emphasize_</code>[^emphasize] (Command-I)</p>
<h3 id="Headers-like-this-one"><a href="#Headers-like-this-one" class="headerlink" title="Headers (like this one!)"></a>Headers (like this one!)</h3><pre><code>Header 1
========

Header 2
--------
</code></pre><p>or</p>
<pre><code># Header 1
## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6
</code></pre><h3 id="Links-and-Email"><a href="#Links-and-Email" class="headerlink" title="Links and Email"></a>Links and Email</h3><h4 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h4><p>Just put angle brackets around an email and it becomes clickable: <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x75;&#114;&#x61;&#110;&#117;&#x73;&#x6a;&#x72;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#x75;&#114;&#x61;&#110;&#117;&#x73;&#x6a;&#x72;&#64;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a><br><code>&lt;uranusjr@gmail.com&gt;</code>  </p>
<p>Same thing with urls: <a href="http://macdown.uranusjr.com" target="_blank" rel="external">http://macdown.uranusjr.com</a><br><code>&lt;http://macdown.uranusjr.com&gt;</code>  </p>
<p>Perhaps you want to some link text like this: <a href="http://macdown.uranusjr.com" title="Title" target="_blank" rel="external">Macdown Website</a><br><code>[Macdown Website](http://macdown.uranusjr.com &quot;Title&quot;)</code> (The title is optional)  </p>
<h4 id="Reference-style"><a href="#Reference-style" class="headerlink" title="Reference style"></a>Reference style</h4><p>Sometimes it looks too messy to include big long urls inline, or you want to keep all your urls together.  </p>
<p>Make <a href="http://macdown.uranusjr.com" title="Title" target="_blank" rel="external">a link</a> <code>[a link][arbitrary_id]</code> then on it’s own line anywhere else in the file:<br><code>[arbitrary_id]: http://macdown.uranusjr.com &quot;Title&quot;</code></p>
<p>If the link text itself would make a good id, you can link <a href="http://macdown.uranusjr.com" target="_blank" rel="external">like this</a> <code>[like this][]</code>, then on it’s own line anywhere else in the file:<br><code>[like this]: http://macdown.uranusjr.com</code>  </p>
<h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><h4 id="Inline-1"><a href="#Inline-1" class="headerlink" title="Inline"></a>Inline</h4><p><code>![Alt Image Text](path/or/url/to.jpg &quot;Optional Title&quot;)</code></p>
<h4 id="Reference-style-1"><a href="#Reference-style-1" class="headerlink" title="Reference style"></a>Reference style</h4><p><code>![Alt Image Text][image-id]</code><br>on it’s own line elsewhere:<br><code>[image-id]: path/or/url/to.jpg &quot;Optional Title&quot;</code></p>
<h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><ul>
<li>Lists must be preceded by a blank line (or block element)</li>
<li>Unordered lists start each item with a <code>*</code></li>
</ul>
<ul>
<li><code>-</code> works too<ul>
<li>Indent a level to make a nested list<ol>
<li>Ordered lists are supported.</li>
<li>Start each item (number-period-space) like <code>1.</code></li>
<li>It doesn’t matter what number you use, I will render them sequentially</li>
<li>So you might want to start each line with <code>1.</code> and let me sort it out</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>Here is the code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">* Lists must be preceded by a blank line (or block element)</div><div class="line">* Unordered lists start each item with a `*`</div><div class="line">- `-` works too</div><div class="line">	* Indent a level to make a nested list</div><div class="line">		1. Ordered lists are supported.</div><div class="line">		2. Start each item (number-period-space) like `1. `</div><div class="line">		42. It doesn&apos;t matter what number you use, I will render them sequentially</div><div class="line">		1. So you might want to start each line with `1.` and let me sort it out</div></pre></td></tr></table></figure>
<h3 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h3><blockquote>
<p>Angle brackets <code>&gt;</code> are used for block quotes.<br>Technically not every line needs to start with a <code>&gt;</code> as long as<br>there are no empty lines between paragraphs.<br>Looks kinda ugly though.</p>
<blockquote>
<p>Block quotes can be nested.  </p>
<blockquote>
<p>Multiple Levels</p>
</blockquote>
</blockquote>
<p>Most markdown syntaxes work inside block quotes.</p>
<ul>
<li>Lists</li>
<li><a href="http://macdown.uranusjr.com" title="Title" target="_blank" rel="external">Links</a></li>
<li>Etc.</li>
</ul>
</blockquote>
<p>Here is the code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt; Angle brackets `&gt;` are used for block quotes.  </div><div class="line">Technically not every line needs to start with a `&gt;` as long as</div><div class="line">there are no empty lines between paragraphs.  </div><div class="line">&gt; Looks kinda ugly though.</div><div class="line">&gt; &gt; Block quotes can be nested.  </div><div class="line">&gt; &gt; &gt; Multiple Levels</div><div class="line">&gt;</div><div class="line">&gt; Most markdown syntaxes work inside block quotes.</div><div class="line">&gt;</div><div class="line">&gt; * Lists</div><div class="line">&gt; * [Links][arbitrary_id]</div><div class="line">&gt; * Etc.</div></pre></td></tr></table></figure>
<h3 id="Inline-Code"><a href="#Inline-Code" class="headerlink" title="Inline Code"></a>Inline Code</h3><p><code>Inline code</code> is indicated by surrounding it with backticks:<br><code>`Inline code` </code></p>
<p>If your <code>code has `backticks` </code> that need to be displayed, you can use double backticks:<br><figure class="highlight plain"><figcaption><span>``Code with `backticks` `` ````  (mind the spaces preceding the final set of backticks)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### Block Code</div><div class="line">If you indent at least four spaces or one tab, I&apos;ll display a code block.</div><div class="line"></div><div class="line">	print(&apos;This is a code block&apos;)</div><div class="line">	print(&apos;The block must be preceded by a blank line&apos;)</div><div class="line">	print(&apos;Then indent at least 4 spaces or 1 tab&apos;)</div><div class="line">		print(&apos;Nesting does nothing. Your code is displayed Literally&apos;)</div><div class="line"></div><div class="line">I also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.</div><div class="line"></div><div class="line">### Horizontal Rules</div><div class="line">If you type three asterisks `***` or three dashes `---` on a line, I&apos;ll display a horizontal rule:</div><div class="line"></div><div class="line">***</div><div class="line"></div><div class="line"></div><div class="line">## &lt;a name=&quot;markdown-pane&quot;&gt;&lt;/a&gt;The Markdown Preference Pane</div><div class="line">This is where I keep all preferences related to how I parse markdown into html.  </div><div class="line">![Markdown preferences pane](http://d.pr/i/RQEi+)</div><div class="line"></div><div class="line">### Document Formatting</div><div class="line">The ***Smartypants*** extension automatically transforms straight quotes (`&quot;` and `&apos;`) in your text into typographer’s quotes (`“`, `”`, `‘`, and `’`) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.</div><div class="line"></div><div class="line"></div><div class="line">### Block Formatting</div><div class="line"></div><div class="line">#### Table</div><div class="line"></div><div class="line">This is a table:</div><div class="line"></div><div class="line">First Header  | Second Header</div><div class="line">------------- | -------------</div><div class="line">Content Cell  | Content Cell</div><div class="line">Content Cell  | Content Cell</div><div class="line"></div><div class="line">You can align cell contents with syntax like this:</div><div class="line"></div><div class="line">| Left Aligned  | Center Aligned  | Right Aligned |</div><div class="line">|:------------- |:---------------:| -------------:|</div><div class="line">| col 3 is      | some wordy text |         $1600 |</div><div class="line">| col 2 is      | centered        |           $12 |</div><div class="line">| zebra stripes | are neat        |            $1 |</div><div class="line"></div><div class="line">The left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.</div><div class="line"></div><div class="line">#### &lt;a name=&quot;fenced-code-block&quot;&gt;Fenced Code Block&lt;/a&gt;</div><div class="line"></div><div class="line">This is a fenced code block:</div></pre></td></tr></table></figure></p>
<p>print(‘Hello world!’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">You can also use waves (`~`) instead of back ticks (`` ` ``):</div><div class="line"></div><div class="line">~~~</div><div class="line">print(&apos;Hello world!&apos;)</div><div class="line">~~~</div><div class="line"></div><div class="line"></div><div class="line">You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the ***Enable highlighting in code blocks*** option. This is what happens if you enable it:</div><div class="line"></div><div class="line">![Syntax highlighting example](http://d.pr/i/9HM6+)</div><div class="line"></div><div class="line">I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http://macdown.uranusjr.com/features/) for a full list of supported syntaxes.</div><div class="line"></div><div class="line"></div><div class="line">### Inline Formatting</div><div class="line"></div><div class="line">The following is a list of optional inline markups supported:</div><div class="line"></div><div class="line">Option name         | Markup           | Result if enabled     |</div><div class="line">--------------------|------------------|-----------------------|</div><div class="line">Intra-word emphasis | So A\*maz\*ing   | So A&lt;em&gt;maz&lt;/em&gt;ing   |</div><div class="line">Strikethrough       | \~~Much wow\~~   | &lt;del&gt;Much wow&lt;/del&gt;   |</div><div class="line">Underline [^under]  | \_So doge\_      | &lt;u&gt;So doge&lt;/u&gt;        |</div><div class="line">Quote [^quote]      | \&quot;Such editor\&quot;  | &lt;q&gt;Such editor&lt;/q&gt;    |</div><div class="line">Highlight           | \==So good\==    | &lt;mark&gt;So good&lt;/mark&gt;  |</div><div class="line">Superscript         | hoge\^(fuga)     | hoge&lt;sup&gt;fuga&lt;/sup&gt;   |</div><div class="line">Autolink            | http://t.co      | &lt;http://t.co&gt;         |</div><div class="line">Footnotes           | [\^4] and [\^4]: | [^4] and footnote 4   |</div><div class="line"></div><div class="line">[^4]: You don&apos;t have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">## &lt;a name=&quot;rendering-pane&quot;&gt;&lt;/a&gt;The Rendering Preference Pane</div><div class="line">This is where I keep preferences relating to how I render and style the parsed markdown in the preview window.  </div><div class="line">![Rendering preferences pane](http://d.pr/i/rT4d+)</div><div class="line"></div><div class="line">### CSS</div><div class="line">You can choose different css files for me to use to render your html. You can even customize or add your own custom css files.</div><div class="line"></div><div class="line">### Syntax Highlighting</div><div class="line">You have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.</div><div class="line"></div><div class="line">### TeX-like Math Syntax</div><div class="line">I can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\( 1 + 1 \\) or this (in MathML): &lt;math&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;, and block math:</div><div class="line"></div><div class="line">\\[</div><div class="line">    A^T_S = B</div><div class="line">\\]</div><div class="line"></div><div class="line">or (in MathML)</div><div class="line"></div><div class="line">&lt;math display=&quot;block&quot;&gt;</div><div class="line">    &lt;msubsup&gt;&lt;mi&gt;A&lt;/mi&gt; &lt;mi&gt;S&lt;/mi&gt; &lt;mi&gt;T&lt;/mi&gt;&lt;/msubsup&gt;</div><div class="line">    &lt;mo&gt;=&lt;/mo&gt;</div><div class="line">    &lt;mi&gt;B&lt;/mi&gt;</div><div class="line">&lt;/math&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">### Task List Syntax</div><div class="line">1. [x] I can render checkbox list syntax</div><div class="line">	* [x] I support nesting</div><div class="line">	* [x] I support ordered *and* unordered lists</div><div class="line">2. [ ] I don&apos;t support clicking checkboxes directly in the html window</div><div class="line"></div><div class="line"></div><div class="line">### Jekyll front-matter</div><div class="line">If you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with `---`. For example:</div></pre></td></tr></table></figure></p>
<hr>
<p>title: “Macdown is my friend”</p>
<h2 id="date-2014-06-06-20-00-00"><a href="#date-2014-06-06-20-00-00" class="headerlink" title="date: 2014-06-06 20:00:00"></a>date: 2014-06-06 20:00:00</h2><p>```</p>
<h3 id="Render-newline-literally"><a href="#Render-newline-literally" class="headerlink" title="Render newline literally"></a>Render newline literally</h3><p>Normally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some <em>other</em> program render it.</p>
<h2 id="The-General-Preferences-Pane"><a href="#The-General-Preferences-Pane" class="headerlink" title="The General Preferences Pane"></a><a name="general-pane"></a>The General Preferences Pane</h2><p>This is where I keep preferences related to application behavior.<br><img src="http://d.pr/i/rvwu+" alt="General preferences pane"></p>
<p>The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit <code>command-R</code> instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases.  </p>
<h2 id="The-Editor-Preference-Pane"><a href="#The-Editor-Preference-Pane" class="headerlink" title="The Editor Preference Pane"></a><a name="editor-pane"></a>The Editor Preference Pane</h2><p>This is where I keep preferences related to the behavior and styling of the editing window.<br><img src="http://d.pr/i/6OL5+" alt="Editor preferences pane"></p>
<h3 id="Styling"><a href="#Styling" class="headerlink" title="Styling"></a>Styling</h3><p>My editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of <a href="http://mouapp.com" target="_blank" rel="external">Mou</a>’s creator, Chen Luo) if you don’t know where to start.</p>
<p>You can also edit, or even add new themes if you want to! Just click the <strong><em>Reveal</em></strong> button, and start moving things around. Remember to use the correct file extension (<code>.styles</code>), though. I’m picky about that.</p>
<p>I offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off.</p>
<h2 id="Hack-On"><a href="#Hack-On" class="headerlink" title="Hack On"></a>Hack On</h2><p>That’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!).</p>
<p>Happy writing!</p>
<p>[^emphasize]: If <strong>Underlines</strong> is turned on, <code>_this notation_</code> will render as underlined instead of emphasized </p>
<p>[^under]: If <strong>Underline</strong> is disabled <code>_this_</code> will be rendered as <em>emphasized</em> instead of being underlined.</p>
<p>[^quote]: <strong>Quote</strong> replaces literal <code>&quot;</code> characters with html <code>&lt;q&gt;</code> tags. <strong>Quote</strong> and <strong>Smartypants</strong> are syntactically incompatible. If both are enabled, <strong>Quote</strong> takes precedence. Note that <strong>Quote</strong> is different from <em>blockquote</em>, which is part of standard Markdown.</p>
<p>[^math]: Internet connection required.</p>
]]></content>
    
    <summary type="html">
    
      Hello there! I’m MacDown, the open source Markdown editor for OS X.
    
    </summary>
    
      <category term="mac" scheme="https://plpcm.github.io/blog/categories/mac/"/>
    
    
      <category term="markdown" scheme="https://plpcm.github.io/blog/tags/markdown/"/>
    
      <category term="mac" scheme="https://plpcm.github.io/blog/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下两款 Markdown 编辑器 Mou/MacDown 大 PK</title>
    <link href="https://plpcm.github.io/blog/2016/02/02/markdown-editor-Mou-MacDown-pk/"/>
    <id>https://plpcm.github.io/blog/2016/02/02/markdown-editor-Mou-MacDown-pk/</id>
    <published>2016-02-02T07:30:16.000Z</published>
    <updated>2016-11-30T08:18:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自 <a href="http://www.jianshu.com/p/6c157af09e84" target="_blank" rel="external">http://www.jianshu.com/p/6c157af09e84</a></p>
<p><a href="http://25.io/mou/" target="_blank" rel="external">Mou</a> 和 <a href="http://macdown.uranusjr.com/" target="_blank" rel="external">MacDown</a> 是我在 Mac 下用过的两款优秀的 Markdown 编辑器。之前一直使用的是 Mou，但不知怎的最近 Mou 在保存时总有 4s 以上的卡顿，这让我很不爽，没找到有效的解决方法，于是我被迫去寻找其它的 MD 编辑器。我尝试过很多种，但总觉得没有 Mou 体验好，最终让我找到了 MacDown——OS X下开放源代码 Markdown 编辑器。</p>
<h3 id="背后的故事"><a href="#背后的故事" class="headerlink" title="背后的故事"></a>背后的故事</h3><p>很有兴趣关注了这两款软件的作者及背后的故事，发现很有趣，在评测两款软件之前我们先八一八故事吧。</p>
<p>Mou 的作者罗晨，个人主页：<a href="http://chenluois.com/" target="_blank" rel="external">http://chenluois.com/</a>，现居住天津，自由职业者。MacDown 的作者Tzu-ping Chung，个人主页：<a href="https://uranusjr.com/" target="_blank" rel="external">https://uranusjr.com/</a>，现居住台北市，应该是台湾同胞吧。</p>
<p>根据 MacDown 作者的<a href="https://uranusjr.com/blog/post/58/introducing-macdown/" target="_blank" rel="external">介绍</a>，他曾经一度是 Markdown 的重度用户，而使用的编辑器基本是 Mou，但 Mou 可以处理<a href="https://help.github.com/articles/github-flavored-markdown#fenced-code-blocks" target="_blank" rel="external">fenced code blocks</a>，却对代码高亮不支持，同时在渲染 Markdown 时也有 bug，这让他很苦恼。Mou 的作者当时正准备<a href="http://www.v2ex.com/t/112732" target="_blank" rel="external">转手</a>该软件，一直没有更新，所以，他就开始从头开始模仿 Mou 写一个，因为是 Markdown editor for Macs，所以取名为 MacDown。</p>
<p>MacDown 作者 Chung 在征得 Mou 作者 Luo 的同意使用了 Mou 的几款主题，发布了 MacDown 的原始版本。Luo 最后发现 MacDown 时，很气愤，并指责 Chung 是 copycat，意思是 MacDown 山寨了 Mou。Chung 也意识到确实是自己抄袭了 Mou 很多东西，根据某条推文的<a href="https://twitter.com/remaerd/status/484914820408279040" target="_blank" rel="external">建议</a>（并不是Luo发布的），将之前 github 中<a href="https://github.com/uranusjr/macdown/blob/master/README.md" target="_blank" rel="external">项目描述</a> 改成了：</p>
<blockquote>
<p>MacDown is an open source Markdown editor for OS X, released under the MIT License. The author stole the idea from Chen Luo’s Mou so that people can make crappy clones. ^<a href="https://github.com/uranusjr/macdown/commit/b6f87f123ace20cd1cc44c9f98d9d6a911f50b9c" target="_blank" rel="external">1</a></p>
</blockquote>
<p><img src="/blog/uploads/markdown-editor-Mou-MacDown-pk/macdown1.png" alt="MacDown logo"></p>
<p>比较详细的情节可以参见 Chung 的<a href="http://macdown.uranusjr.com/blog/post/5/show-hn-macdown/" target="_blank" rel="external">博客</a>。至于 MacDown 和 Mou 的关系是怎样的，是不是 MacDown 就是不道德地克隆了 Mou 呢？这个每个人都有自己的看法，这里就不讨论了。</p>
<p>欣喜的是，目前两款软件都找到自己的发展模式，Mou 已经完成了众筹，即将发布 1.0 版本，如果有对 Mou 有情怀的同学可以<a href="http://25.io/mou/store/" target="_blank" rel="external">支持</a>作者；MacDown 依旧会走自己开源的道路。</p>
<p>Chung 的一句话也道出了我的心声：</p>
<blockquote>
<p>Let’s focus on making better software for everyone.</p>
</blockquote>
<p>好了，八卦完了，最后我要对两位作者表示由衷的谢意，贡献给我们好用的软件！下面我会根据我体验，分别提一下两款软件各自的特色地方。</p>
<h3 id="共同功能"><a href="#共同功能" class="headerlink" title="共同功能"></a>共同功能</h3><ul>
<li>提供丰富的简洁大方好看的主题，同时支持自定义</li>
<li>提供丰富的渲染 Markdown 之后的 CSS 样式，同时支持自定义样式</li>
<li>英文单词的自动补全功能，按下 Esc 键列出补全的列表</li>
<li>字符、单词统计功能</li>
<li>支持 fenced code blocks</li>
<li>TeX 数学公式的支持</li>
<li>支持导出 HTML 和 PDF 两种格式</li>
<li>便捷的快捷键操作</li>
<li>…</li>
</ul>
<h3 id="Mou-特色功能"><a href="#Mou-特色功能" class="headerlink" title="Mou 特色功能"></a>Mou 特色功能</h3><h4 id="集成-Tumblr-和-Scriptogr-am-发布博文"><a href="#集成-Tumblr-和-Scriptogr-am-发布博文" class="headerlink" title="集成 Tumblr 和 Scriptogr.am 发布博文"></a>集成 Tumblr 和 Scriptogr.am 发布博文</h4><p>可以配置 Tumblr 和 Scriptogr.am 的邮箱，在 Mou 上写文章通过 <code>File-&gt;Post-&gt;</code> 可以发布到这两个平台上，非常方便。</p>
<p><img src="/blog/uploads/markdown-editor-Mou-MacDown-pk/macdown2.png" alt="Mou 支持集成 Tumblr 和 Scriptor.am"></p>
<p><code>Mou 支持集成 Tumblr 和 Scriptor.am</code></p>
<h3 id="语言支持"><a href="#语言支持" class="headerlink" title="语言支持"></a>语言支持</h3><p>Mou 内置 CJK 字符支持，你可以很容易使用中文、日文、韩文等来写文章，同时还支持竖排的风格。</p>
<p><img src="/blog/uploads/markdown-editor-Mou-MacDown-pk/macdown3.png" alt="Mou 支持 CJK 及竖排"></p>
<p><code>Mou 支持 CJK 及竖排</code></p>
<h3 id="MacDown-特色"><a href="#MacDown-特色" class="headerlink" title="MacDown 特色"></a>MacDown 特色</h3><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>Mou 和 MacDown 都支持 fenced code blocks（前后三个反引号可以表示代码块），但 MacDown 支持加语言标识符实现代码高亮，这对程序员来说简直是福音啊，非常棒的功能。</p>
<p><img src="/blog/uploads/markdown-editor-Mou-MacDown-pk/macdown4.png" alt="MacDown 支持代码高亮"></p>
<p><code>MacDown 支持代码高亮</code></p>
<h4 id="GFM-Task-List-支持"><a href="#GFM-Task-List-支持" class="headerlink" title="GFM Task List 支持"></a>GFM Task List 支持</h4><p>MacDown 支持 <a href="http://www.jianshu.com/p/6c157af09e84" target="_blank" rel="external">Task list</a>，有了这个功能，你可以将你的 MD 编辑器立马变成 TODO list，是不是很赞？</p>
<p><img src="/blog/uploads/markdown-editor-Mou-MacDown-pk/macdown5.png" alt="MacDown 对 Task list 的支持"></p>
<p><code>MacDown 对 Task list 的支持</code></p>
<h4 id="Jekyll-Front-matter-支持"><a href="#Jekyll-Front-matter-支持" class="headerlink" title="Jekyll Front-matter 支持"></a>Jekyll Front-matter 支持</h4><p>很多人使用 Jekyll 作为博客引擎，这时 Jekyll 的前面那段该怎么去渲染呢？MacDown 和 github 一样可以支持。</p>
<p><img src="/blog/uploads/markdown-editor-Mou-MacDown-pk/macdown6.png" alt="MacDown 对 Jekyll front-matter 的支持"></p>
<p><code>MacDown 对 Jekyll front-matter 的支持</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>OK，总结完了，如果不是 Mou 在我的 Mac 上有卡顿，我也没想着要换一款编辑器，目前我在用 MacDown 感觉还是很不错的，因为有代码高亮支持就足以把我留下了。至于你选哪一款，你可以下载下来自己体验体验，反正软件都很小。也许你跟我一样，因为某个小瑕疵放弃某个软件，又因为某个小功能的惊喜而喜欢上某个软件。</p>
]]></content>
    
    <summary type="html">
    
      Mou 和 MacDown 是我在 Mac 下用过的两款优秀的 Markdown 编辑器。之前一直使用的是 Mou，但不知怎的最近 Mou 在保存时总有 4s 以上的卡顿，这让我很不爽，没找到有效的解决方法，于是我被迫去寻找其它的 MD 编辑器。我尝试过很多种，但总觉得没有 Mou 体验好，最终让我找到了 MacDown——OS X下开放源代码 Markdown 编辑器。
    
    </summary>
    
      <category term="mac" scheme="https://plpcm.github.io/blog/categories/mac/"/>
    
    
      <category term="markdown" scheme="https://plpcm.github.io/blog/tags/markdown/"/>
    
      <category term="mac" scheme="https://plpcm.github.io/blog/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="https://plpcm.github.io/blog/2015/12/23/hexo-init/"/>
    <id>https://plpcm.github.io/blog/2015/12/23/hexo-init/</id>
    <published>2015-12-22T16:00:00.000Z</published>
    <updated>2016-12-05T08:32:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir hexo  <span class="comment">#创建一个文件夹</span></div><div class="line"><span class="built_in">cd</span> hexo</div><div class="line">npm install -g hexo-cli</div><div class="line">npm install hexo --save</div></pre></td></tr></table></figure>
<ul>
<li>部署Hexo：在Git shell 中输入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<ul>
<li>安装Hexo 插件：自动生成sitemap,Rss，部署到git等，建议安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-index --save</div><div class="line">npm install hexo-generator-archive --save</div><div class="line">npm install hexo-generator-category --save</div><div class="line">npm install hexo-generator-tag --save</div><div class="line">npm install hexo-server --save</div><div class="line">npm install hexo-deployer-git --save</div><div class="line">npm install hexo-deployer-heroku --save</div><div class="line">npm install hexo-deployer-rsync --save</div><div class="line">npm install hexo-deployer-openshift --save</div><div class="line">npm install hexo-renderer-marked@0.2 --save</div><div class="line">npm install hexo-renderer-stylus@0.2 --save</div><div class="line">npm install hexo-generator-feed@1 --save</div><div class="line">npm install hexo-generator-sitemap@1 --save</div></pre></td></tr></table></figure>
<h2 id="Hexo常用的几个命令"><a href="#Hexo常用的几个命令" class="headerlink" title="Hexo常用的几个命令"></a>Hexo常用的几个命令</h2><h3 id="创建新博文"><a href="#创建新博文" class="headerlink" title="创建新博文"></a>创建新博文</h3><p>执行new命令，生成指定名称的文章至hexo\source_posts\postName.md。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] &quot;postName&quot; #新建文章</div></pre></td></tr></table></figure>
<p>其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: &#123; &#123; title &#125; &#125;</div><div class="line">date: &#123; &#123; date &#125; &#125;</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<blockquote>
<p>请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。</p>
</blockquote>
<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: &#123; &#123; title &#125; &#125;</div><div class="line">date: &#123; &#123; date &#125; &#125;</div><div class="line">categories: </div><div class="line">tags: </div><div class="line">---</div></pre></td></tr></table></figure>
<p>更多信息参考: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>参考: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="生成静态站点文件"><a href="#生成静态站点文件" class="headerlink" title="生成静态站点文件"></a>生成静态站点文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>参考: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="部署到Git"><a href="#部署到Git" class="headerlink" title="部署到Git"></a>部署到Git</h3><p>部署到Github前需要配置_config.yml文件</p>
<p>添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">	type: git</div><div class="line">	repository: git@github.com:EZLippi/EZLippi.github.io.git</div><div class="line">	branch: master</div></pre></td></tr></table></figure>
<p>然后输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>参考: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="fancybox"><a href="#fancybox" class="headerlink" title="fancybox"></a>fancybox</h2><p>可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: Hexo建立个人博客</div><div class="line">photos:</div><div class="line">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg</div><div class="line">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>本博客采用了iissnan的Next主题，他的博客有详细的安装教程，这里贴下链接<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">next</a>，有需要的朋友直接参考他写的教程，一气呵成~</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> hexo目录</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h3 id="应用Hexo主题"><a href="#应用Hexo主题" class="headerlink" title="应用Hexo主题"></a>应用Hexo主题</h3><p>在hexo目录下找到_config.yml配置文件，找到 theme 字段，并将其值更改为 next，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
<h3 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h3><p>在上面的步骤中已经安装了Rss插件，只要要在themes\next_config.yml配置文件中添加如下一行即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rss：</div></pre></td></tr></table></figure>
<h3 id="添加标签tags页面"><a href="#添加标签tags页面" class="headerlink" title="添加标签tags页面"></a>添加标签tags页面</h3><p>定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> hexo目录</div><div class="line">$ hexo new page tags</div></pre></td></tr></table></figure>
<p>内容如下所示，如果要关闭tags页面的评论可以设置comments为false：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: 标签</div><div class="line">date: 2014-12-22 12:39:04</div><div class="line">type: &quot;tags&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure>
<p>这样以后tags页面在每次执行hexo generate后自动更新。</p>
<h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><p>和上面的一样，在hexo目录下执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page categories</div></pre></td></tr></table></figure>
<p>内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: 分类</div><div class="line">date: 2014-12-22 12:39:04</div><div class="line">type: &quot;categories&quot;</div><div class="line">comments: false</div><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h3><p>新建一个404.html文件，放到themes\next\source目录下，内容你自己定。</p>
<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>以前jekyll代码高亮需要用到pygments插件，Hexo下更加简单，只需要按照下面的格式：<br><a href="http://www.ezlippi.com/images/highlight.png" target="_blank" rel="external"><img src="http://www.ezlippi.com/images/highlight.png" alt="img"></a><br>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(&quot;hello hexo!&quot;);</div></pre></td></tr></table></figure>
<p>你也可以更改代码高亮的主题，一共有五种，可选的值有 normal，night， night blue， night bright， night eighties，修改themes\next_config.yml文件，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">highlight_theme: normal</div></pre></td></tr></table></figure>
<h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h3><p>登录多说官网，登录后点我要安装，然后填写站点相关信息，最主要的是duoshuo_shortname这个字段，设置后之后修改themes\next_config.yml文件，把duoshuo_shortname改成你的，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duoshuo_shortname: ezlippi</div></pre></td></tr></table></figure>
<h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><p>登录百度统计，转到获取代码截面，找到百度统计脚本id，然后把themes\next_config.yml文件下的baidu_analytics字段改成你的id，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">baidu_analytics: 340874ba9357cbe81570aa4ac1185941</div></pre></td></tr></table></figure>
<h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>next主题集成了swiftype搜索，你需要到swiftype配置一个搜索引擎， 而后编辑 站点配置文件， 新增 swiftype_key 字段，值为你的 swiftype 搜索引擎的 key。 详细的配置请参考：<a href="http://theme-next.iissnan.com/third-party-services.html#swfitype" target="_blank" rel="external">swfitype教程</a></p>
<h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><p>其他设置比如侧边栏、友情链接、菜单栏等请参考<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">next主题配置教程</a></p>
<p>最后附上我的站点配置文件，如果有不懂的可以给我留言或者发邮件。<br>_config.yml配置文件内容如下：</p>
<p>站点配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: http://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"></div><div class="line"># Site</div><div class="line">title: Lippi-浮生志</div><div class="line">subtitle:</div><div class="line">description: Easy Lippi</div><div class="line">author: EZLippi </div><div class="line">language: zh-Hans</div><div class="line">timezone: Asia/Shanghai</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://www.ezlippi.com</div><div class="line">root: /</div><div class="line">permalink: /blog/:year/:month/:title.html</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :year-:month-:day-:title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: true</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10</div><div class="line">pagination_dir: page</div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: http://hexo.io/plugins/</div><div class="line">## Themes: http://hexo.io/themes/</div><div class="line">theme: next </div><div class="line">#since: 2014</div><div class="line"># Deployment</div><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:EZLippi/EZLippi.github.io.git </div><div class="line">  coding.net: git@git.coding.net:ezlippi/ezlippi.git,coding-pages</div></pre></td></tr></table></figure>
<p>主题配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Site Information Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Place your favicon.ico to /source directory.</div><div class="line">favicon: /favicon.ico</div><div class="line"></div><div class="line"># Set default keywords (Use a comma to separate)</div><div class="line">keywords: &quot;Hexo, NexT&quot;</div><div class="line"></div><div class="line"># Set rss to false to disable feed link.</div><div class="line"># Leave rss as empty to use site&apos;s feed link.</div><div class="line"># Set rss to specific value if you have burned your feed already.</div><div class="line">rss:</div><div class="line"></div><div class="line"># Specify the date when the site was setup</div><div class="line">since: 2014</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Menu Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># When running hexo in a subdirectory (e.g. domain.tld/blog)</div><div class="line"># Remove leading slashes ( &quot;/archives&quot; -&gt; &quot;archives&quot; )</div><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div><div class="line">  about: /about</div><div class="line">#  commonweal: /404.html</div><div class="line"></div><div class="line"></div><div class="line"># Enable/Disable menu icons.</div><div class="line"># Icon Mapping:</div><div class="line">#   Map a menu item to a specific FontAwesome icon name.</div><div class="line">#   Key is the name of menu item and value is the name of FontAwsome icon.</div><div class="line">#   When an question mask icon presenting up means that the item has no mapping icon.</div><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  # Icon Mapping.</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Scheme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Schemes</div><div class="line">#scheme: Muse</div><div class="line">scheme: Mist</div><div class="line">#scheme: Pisces</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Sidebar Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"></div><div class="line"># Social links</div><div class="line">social:</div><div class="line">  GitHub: https://github.com/EZLippi</div><div class="line">  weibo: http://weibo.com/ouyanglip</div><div class="line">  zhihu: http://www.zhihu.com/people/lippi-ouyang</div><div class="line">  #Others:</div><div class="line"></div><div class="line">      </div><div class="line"># Social Icons</div><div class="line">social_icons:</div><div class="line">  enable: true</div><div class="line">  # Icon Mappings</div><div class="line">  GitHub: github</div><div class="line">  Twitter: twitter</div><div class="line">  weibo: weibo</div><div class="line">  zhihu: weibo </div><div class="line"></div><div class="line"></div><div class="line"># Sidebar Avatar</div><div class="line"># in theme directory(source/images): /images/avatar.jpg</div><div class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class="line"># default : /images/default_avatar.jpg</div><div class="line">avatar: /images/avatar.jpg</div><div class="line"></div><div class="line"></div><div class="line"># TOC in the Sidebar</div><div class="line">toc:</div><div class="line">  enable: true</div><div class="line"></div><div class="line">  # Automatically add list number to toc.</div><div class="line">  number: true</div><div class="line"></div><div class="line"></div><div class="line"># Creative Commons 4.0 International License.</div><div class="line"># http://creativecommons.org/</div><div class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</div><div class="line">#creative_commons: by-nc-sa</div><div class="line">#creative_commons:</div><div class="line"></div><div class="line">sidebar:</div><div class="line">  # Sidebar Position, available value: left | right</div><div class="line">  position: left</div><div class="line">  #position: right</div><div class="line"></div><div class="line">  # Sidebar Display, available value:</div><div class="line">  #  - post    expand on posts automatically. Default.</div><div class="line">  #  - always  expand for all pages automatically</div><div class="line">  #  - hide    expand only when click on the sidebar toggle icon.</div><div class="line">  #  - remove  Totally remove sidebar including sidebar toggle icon.</div><div class="line">  display: post</div><div class="line">  #display: always</div><div class="line">  #display: hide</div><div class="line">  #display: remove</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Misc Theme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Custom Logo.</div><div class="line"># !!Only available for Default Scheme currently.</div><div class="line"># Options:</div><div class="line">#   enabled: [true/false] - Replace with specific image</div><div class="line">#   image: url-of-image   - Images&apos;s url</div><div class="line">custom_logo:</div><div class="line">  enabled: false</div><div class="line">  image:</div><div class="line"></div><div class="line"></div><div class="line"># Code Highlight theme</div><div class="line"># Available value:</div><div class="line">#    normal | night | night eighties | night blue | night bright</div><div class="line"># https://github.com/chriskempson/tomorrow-theme</div><div class="line">highlight_theme: night </div><div class="line"></div><div class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</div><div class="line">scroll_to_more: true</div><div class="line"></div><div class="line"># Automatically Excerpt</div><div class="line">auto_excerpt:</div><div class="line">  enable: false</div><div class="line">  length: 150</div><div class="line"></div><div class="line"># Use Lato font</div><div class="line">use_font_lato: true</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># ---------------------------------------------------------------</div><div class="line"># Third Party Services Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># MathJax Support</div><div class="line">mathjax:</div><div class="line"></div><div class="line"></div><div class="line"># Swiftype Search API Key</div><div class="line">swiftype_key: fLM9qfxyerC6njvM7usy</div><div class="line"></div><div class="line"># Baidu Analytics ID</div><div class="line">baidu_analytics: 340874ba9357cbe81570aa4ac1185941</div><div class="line"></div><div class="line"></div><div class="line"># Duoshuo ShortName</div><div class="line">duoshuo_shortname: ezlippi </div><div class="line"></div><div class="line"># Disqus</div><div class="line">#disqus_shortname:</div><div class="line"></div><div class="line"># Share</div><div class="line">#jiathis:</div><div class="line">#add_this_id:</div><div class="line"></div><div class="line"># Share</div><div class="line">duoshuo_share: true</div><div class="line"># 多说热评文章 true 或者 false</div><div class="line">duoshuo_hotartical: true</div><div class="line"></div><div class="line"># Google Webmaster tools verification setting</div><div class="line"># See: https://www.google.com/webmasters/</div><div class="line">#google_site_verification:</div><div class="line"></div><div class="line"></div><div class="line"># Google Analytics</div><div class="line">#google_analytics:</div><div class="line"></div><div class="line"></div><div class="line"># Make duoshuo show UA</div><div class="line"># user_id must NOT be null when admin_enable is true!</div><div class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</div><div class="line">duoshuo_info:</div><div class="line">  ua_enable: true</div><div class="line">  admin_enable: false</div><div class="line">  user_id: 0</div><div class="line">  #admin_nickname: ROOT</div><div class="line"></div><div class="line"></div><div class="line"># Facebook SDK Support.</div><div class="line"># https://github.com/iissnan/hexo-theme-next/pull/410</div><div class="line">facebook_sdk:</div><div class="line">  enable: false</div><div class="line">  app_id:       #&lt;app_id&gt;</div><div class="line">  fb_admin:     #&lt;user_id&gt;</div><div class="line">  like_button:  #true</div><div class="line">  webmaster:    #true</div><div class="line"></div><div class="line"></div><div class="line"># Show number of visitors to each article.</div><div class="line"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class="line">leancloud_visitors:</div><div class="line">  enable: false</div><div class="line">  app_id: #&lt;app_id&gt;</div><div class="line">  app_key: #&lt;app_key&gt;</div><div class="line"></div><div class="line"></div><div class="line"># Tencent analytics ID</div><div class="line"># tencent_analytics:</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#! ---------------------------------------------------------------</div><div class="line">#! DO NOT EDIT THE FOLLOWING SETTINGS</div><div class="line">#! UNLESS YOU KNOW WHAT YOU ARE DOING</div><div class="line">#! ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Motion</div><div class="line">use_motion: true</div><div class="line"></div><div class="line"># Fancybox</div><div class="line">fancybox: true</div><div class="line"></div><div class="line"># Static files</div><div class="line">vendors: vendors</div><div class="line">css: css</div><div class="line">js: js</div><div class="line">images: images</div><div class="line"></div><div class="line"># Theme version</div><div class="line">version: 0.5.0</div><div class="line"></div><div class="line"># title, chinese available</div><div class="line">links_title: 友情链接 </div><div class="line"># # links</div><div class="line">links:</div><div class="line">   MacTalk: http://macshuo.com/</div></pre></td></tr></table></figure>
<p>参考文献：</p>
<p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a><br><a href="http://sunwhut.com/2015/10/30/buildBlog/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">如何利用GitHub Pages和Hexo快速搭建个人博客</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next主题</a></p>
]]></content>
    
    <summary type="html">
    
      Hexo搭建个人博客
    
    </summary>
    
      <category term="hexo" scheme="https://plpcm.github.io/blog/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://plpcm.github.io/blog/tags/hexo/"/>
    
      <category term="next" scheme="https://plpcm.github.io/blog/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://plpcm.github.io/blog/2015/12/22/hello-world/"/>
    <id>https://plpcm.github.io/blog/2015/12/22/hello-world/</id>
    <published>2015-12-22T11:08:10.000Z</published>
    <updated>2016-11-30T07:50:28.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      使用 hexo 搭建基于github的免费blog
    
    </summary>
    
      <category term="hexo" scheme="https://plpcm.github.io/blog/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://plpcm.github.io/blog/tags/hexo/"/>
    
  </entry>
  
</feed>
