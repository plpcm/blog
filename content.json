{"meta":{"title":"曹淼的“git博客”","subtitle":"道法自然","description":"混迹互联网圈数载，潜心修行编程之道的码农","author":"曹淼","url":"https://plpcm.github.io/blog"},"pages":[{"title":"","date":"2016-12-02T03:59:48.000Z","updated":"2016-12-02T03:59:48.000Z","comments":true,"path":"404.html","permalink":"https://plpcm.github.io/blog/404.html","excerpt":"","text":"公益404页面 // 曹淼的\"git博客\""},{"title":"关于本人","date":"2016-02-01T10:29:36.000Z","updated":"2016-12-02T08:55:49.000Z","comments":false,"path":"about/index.html","permalink":"https://plpcm.github.io/blog/about/index.html","excerpt":"","text":"资深 openresty 爱好者 资深运维工程师 来自河北 现居北京 邮箱: plp.cm@qq.com"},{"title":"Tagcloud","date":"2016-02-01T10:29:36.000Z","updated":"2016-12-02T05:33:01.000Z","comments":false,"path":"tags/index.html","permalink":"https://plpcm.github.io/blog/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2016-01-29T13:13:21.000Z","updated":"2016-12-02T05:32:52.000Z","comments":false,"path":"categories/index.html","permalink":"https://plpcm.github.io/blog/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"收藏链接","slug":"hotlink","date":"2016-12-02T07:14:27.000Z","updated":"2016-12-02T07:14:27.000Z","comments":true,"path":"2016/12/02/hotlink/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/12/02/hotlink/","excerpt":"","text":"平时的一些收集，不想转载的放到这里记录下来Markdown 语法说明 (简体中文版)http://wowubuntu.com/markdown/ hexo主题next使用帮助http://theme-next.iissnan.com/getting-started.html 很不错的hexo介绍文章http://ibruce.info/2013/11/22/hexo-your-blog/ hexo原作者-Hexo 颯爽登場！https://zespia.tw/blog/2012/10/11/hexo-debut/","categories":[{"name":"Collection","slug":"Collection","permalink":"https://plpcm.github.io/blog/categories/Collection/"}],"tags":[]},{"title":"Nginx虚拟主机根据不同的域名使用不同的root路径","slug":"nginx_var_root","date":"2016-03-12T07:33:16.000Z","updated":"2016-12-02T10:07:55.000Z","comments":true,"path":"2016/03/12/nginx_var_root/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/03/12/nginx_var_root/","excerpt":"","text":"一 应用场景描述应开发同事需求，需要在开发环境的Nginx能够根据不同的域名使用不同的root路径。例如如果域名是 aa.abc.com,就使用root路径为/data/public/aa bb.abc.com,就使用root路径为/data/public/bb cc.abc.com,就是用root路径为/data/public/cc 二 解决方法123456789101112131415161718192021222324252627server&#123; listen 80; server_name *.abc.com; set $path_name aa; if ($host ~ \"bb\") &#123; set $path_name bb; &#125; if ($host ~ \"cc\") &#123; set $path_name cc; &#125; root /data/public/$path_name/; location / &#123; if (!-e $request_filename)&#123; rewrite /(.*) /index.php last; &#125; index index.php; &#125; location ~ .php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name; include fastcgi_params; &#125;&#125; 这里设置变量$path_name,然后在root路径中使用这个变量 三 相关Nginx指令介绍 set指令用于定义一个变量，并为变量赋值作用范围为if,location,server如以上的set $path_name aa; if指令if(condition) {…}作用范围为如： 1234if ($host ~ &quot;bb&quot;)&#123;set $path_name bb;&#125; if指令用于检查一个条件是否符合，如果条件符合，则执行大括号内的内容。if指令不支持嵌套，不支持多个&amp;&amp;或||可以指定的条件为： 123456781）变量名2）变量比较可以使用 =（等于）和!=（不等于）3）正则表达式匹配可以使用 ~（区分大小写匹配）和 ~* （不区分大小写匹配） !~ 和 !~* 则表示不匹配4）-f和!-f 用来判断文件是否存在5) -d和!-d 用来判断目录是否存在6) -e和!-e 用来判断文件或目录是否存在7）-x和!-x 用来判断文件是否可以执行 Nginx内置变量 12$host 请求的主机名$request_filename 请求的文件名 rewrite指令 1rewrite regex replacement flag; 用来重定向URL 123if (!-e $request_filename)&#123;rewrite /(.*) /index.php last;&#125; rewrite最后一项为标记位，Nginx支持的标记为有： 1234last 表示完成rewritepermanent 返回301永久重定向，浏览器地址栏会显示跳转后的URLbreak 本条规则匹配完成后，终止其他规则的匹配redirect 返回302临时重定向 last和break完成URL的重定向，浏览器上的地址不会变，但在服务器端上的位置发生了变化。permanent和redirect用来实现URL跳转，浏览器地址栏会显示跳转后的URL。使用alias指令时必须使用last指令，使用proxy_pass指令时必须使用break指令","categories":[{"name":"nginx","slug":"nginx","permalink":"https://plpcm.github.io/blog/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://plpcm.github.io/blog/tags/nginx/"}]},{"title":"OpenResty实现防cc攻击","slug":"openresty-cc","date":"2016-03-02T10:30:16.000Z","updated":"2016-12-02T10:28:47.000Z","comments":true,"path":"2016/03/02/openresty-cc/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/03/02/openresty-cc/","excerpt":"","text":"导读OpenResty 通过汇聚各种设计精良的 Nginx 模块（由章亦春自主研发并汇聚各种精良模块），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统 本文介绍使用openresty来实现防cc攻击的功能。openresty官网http://openresty.org/cn/index.html。下面是防cc攻击的流程图。 根据流程图，我们知道防cc攻击主要包括两部分，一是限制请求速度，二是给用户发送js跳转代码进行验证请求是否合法。 安装依赖 RHEL/Centos: 1yum install readline-devel pcre-devel openssl-devel ubuntu: 1apt-get install libreadline-dev libncurses5-dev libpcre3-dev libssl-dev perl luajit安装 123456cd /tmp/git clone http://luajit.org/git/luajit-2.0.gitcd luajit-2.0/make &amp;&amp; make installln -sf luajit-2.0.0-beta10 /usr/local/bin/luajitln -sf /usr/local/lib/libluajit-5.1.so.2 /usr/lib/ openresty安装 123456cd /tmpwget http://agentzh.org/misc/nginx/ngx_openresty-1.2.4.13.tar.gztar xzf ngx_openresty-1.2.4.13.tar.gzcd ngx_openresty-1.2.4.13/./configure --prefix=/usr/local/openresty --with-luajitmake &amp;&amp; make install nginx配置 nginx.conf: 123456789101112131415161718192021http&#123;[......]lua_shared_dict limit 10m;lua_shared_dict jsjump 10m; server &#123;#lua_code_cache off; listen 80; server_name www.centos.bz; location / &#123;default_type text/html;content_by_lua_file \"/usr/local/openresty/nginx/conf/lua\"; &#125; location @cc &#123; internal; root html; index index.html index.htm; &#125; &#125;&#125; /usr/local/openresty/nginx/conf/lua文件: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556-- 限速功能local ip = ngx.var.binary_remote_addrlocal limit = ngx.shared.limitlocal req,_=limit:get(ip)if req then -- 10秒钟内容最多只能请求20次 if req &gt; 20 then ngx.exit(503) else limit:incr(ip,1) endelse limit:set(ip,1,10)end--验证部分local jsjump = ngx.shared.jsjumplocal uri = ngx.var.request_urilocal jspara,flags=jsjump:get(ip)local args = ngx.req.get_uri_args()if jspara then if flags then ngx.exec(\"@cc\") else local p_jskey='' if args[\"jskey\"] and type(args[\"jskey\"])=='table' then p_jskey=args[\"jskey\"][table.getn(args[\"jskey\"])] else p_jskey=args[\"jskey\"] end if p_jskey and p_jskey==tostring(jspara) then jsjump:set(ip,jspara,3600,1) --通过后，白名单时间为3600秒，即1小时 ngx.exec(\"@cc\") else local url='' if ngx.var.args then url=ngx.var.scheme..\"://\"..ngx.var.host..uri..\"&amp;jskey=\"..jspara else url=ngx.var.scheme..\"://\"..ngx.var.host..uri..\"?jskey=\"..jspara end local jscode=\"window.location.href='\"..url..\"';\" ngx.say(jscode) end endelsemath.randomseed( os.time() ); local random=math.random(100000,999999) jsjump:set(ip,random,60) local url='' if ngx.var.args then url=ngx.var.scheme..\"://\"..ngx.var.host..uri..\"&amp;jskey=\"..random else url=ngx.var.scheme..\"://\"..ngx.var.host..uri..\"?jskey=\"..random end local jscode=\"window.location.href='\"..url..\"';\" ngx.say(jscode)end","categories":[{"name":"openresty","slug":"openresty","permalink":"https://plpcm.github.io/blog/categories/openresty/"}],"tags":[{"name":"cc","slug":"cc","permalink":"https://plpcm.github.io/blog/tags/cc/"},{"name":"防攻击","slug":"防攻击","permalink":"https://plpcm.github.io/blog/tags/防攻击/"},{"name":"openresty","slug":"openresty","permalink":"https://plpcm.github.io/blog/tags/openresty/"}]},{"title":"nginx限制某个IP同一时间段的访问次数","slug":"nginx-limit-mod","date":"2016-03-02T09:35:16.000Z","updated":"2016-12-02T10:28:33.000Z","comments":true,"path":"2016/03/02/nginx-limit-mod/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/03/02/nginx-limit-mod/","excerpt":"","text":"转载自: http://www.nginx.cn/446.html 如何设置能限制某个IP某一时间段的访问次数是一个让人头疼的问题，特别面对恶意的ddos攻击的时候。其中CC攻击（Challenge Collapsar）是DDOS（分布式拒绝服务）的一种，也是一种常见的网站攻击方法，攻击者通过代理服务器或者肉鸡向向受害主机不停地发大量数据包，造成对方服务器资源耗尽，一直到宕机崩溃。 cc攻击一般就是使用有限的ip数对服务器频繁发送数据来达到攻击的目的，nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击。 HttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。一旦并发连接超过指定数量，就会返回503错误。 HttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令 这两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制 HttpLimitReqModul 限制某一段时间内同一ip访问数实例1234567891011121314151617181920212223242526272829303132http&#123; ... #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存， #以$binary_remote_addr 为key,限制平均每秒的请求为20个， #1M能存储16000个状态，rete的值必须为整数， #如果限制两秒钟一个请求，可以设置成30r/m limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s; ... server&#123; ... location &#123; ... #限制每ip每秒不超过20个请求，漏桶数burst为5 #brust的意思就是，如果第1秒、2,3,4秒请求为19个， #第5秒的请求为25个是被允许的。 #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。 #nodelay，如果不设置该选项，严格使用平均速率限制请求数， #第1秒25个请求时，5个请求放到第2秒执行， #设置nodelay，25个请求将在第1秒执行。 limit_req zone=allips burst=5 nodelay; ... &#125; ... &#125; ...&#125; HttpLimitZoneModule 限制并发连接数实例limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域 123456789101112131415161718192021222324http&#123; ... #定义一个名为one的limit_zone,大小10M内存来存储session， #以$binary_remote_addr 为key #nginx 1.18以后用limit_conn_zone替换了limit_conn #且只能放在http作用域 limit_conn_zone one $binary_remote_addr 10m; ... server&#123; ... location &#123; ... limit_conn one 20; #连接数限制 #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k limit_rate 500k; ... &#125; ... &#125; ...&#125; nginx白名单设置以上配置会对所有的ip都进行限制，有些时候我们不希望对搜索引擎的蜘蛛或者自己测试ip进行限制，对于特定的白名单ip我们可以借助geo指令实现。1. 123456789101112131415161718192021222324252627282930313233http&#123; geo $limited&#123; default 1; #google 64.233.160.0/19 0; 65.52.0.0/14 0; 66.102.0.0/20 0; 66.249.64.0/19 0; 72.14.192.0/18 0; 74.125.0.0/16 0; 209.85.128.0/17 0; 216.239.32.0/19 0; #M$ 64.4.0.0/18 0; 157.60.0.0/16 0; 157.54.0.0/15 0; 157.56.0.0/14 0; 207.46.0.0/16 0; 207.68.192.0/20 0; 207.68.128.0/18 0; #yahoo 8.12.144.0/24 0; 66.196.64.0/18 0; 66.228.160.0/19 0; 67.195.0.0/16 0; 74.6.0.0/16 0; 68.142.192.0/18 0; 72.30.0.0/16 0; 209.191.64.0/18 0; #My IPs 127.0.0.1/32 0; 123.456.0.0/28 0; #example for your server CIDR &#125; geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0 2.使用map指令映射搜索引擎客户端的ip为空串，如果不是搜索引擎就显示本身真是的ip，这样搜索引擎ip就不能存到limit_req_zone内存session中，所以不会限制搜索引擎的ip访问 map $limited $limit {1 $binary_remote_addr;0 “”;} 3.设置limit_req_zone和limit_reqlimit_req_zone $limit zone=foo:1m rate=10r/m; limit_req zone=foo burst=5; 最后我们使用ab压php-fpm的方式，对上面的方法效果实际测试下 例1：限制只允许一分钟内只允许一个ip访问60次配置，也就是平均每秒1次首先我们准备一个php脚本放在根目录下$document_roottest.php &gt; nginx配置增加limit_req_zone 和 limit_req 123456789101112131415http&#123; ... limit_req_zone $binary_remote_addr zone=allips:10m rate=60r/m; ... server&#123; ... location &#123; ... limit_req zone=allips; ... &#125; ... &#125; ...&#125; ab -n 5 -c 1 http://www.weizhang.org/test.php 118.144.94.193 - - [22/Dec/2012:06:27:06 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:06:27:06 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:06:27:07 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3” 未设置brust和nodelay可以看到该配置只允许每秒访问1次，超出的请求返回503错误 123456789101112131415http&#123; ... limit_req_zone $binary_remote_addr zone=allips:10m rate=60r/m; ... server&#123; ... location &#123; ... limit_req zone=allips burst=1 nodelay; ... &#125; ... &#125; ...&#125; ab -n 5 -c 1 http://www.weizhang.org/test.php 118.144.94.193 - - [22/Dec/2012:07:01:00 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:07:01:00 +0000] “GET /test.php HTTP/1.0” 200 11000 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3”118.144.94.193 - - [22/Dec/2012:07:01:01 +0000] “GET /test.php HTTP/1.0” 503 537 “-“ “ApacheBench/2.3” 设置brust=1和nodelay后允许第1秒处理两个请求。","categories":[{"name":"nginx","slug":"nginx","permalink":"https://plpcm.github.io/blog/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://plpcm.github.io/blog/tags/nginx/"},{"name":"cc","slug":"cc","permalink":"https://plpcm.github.io/blog/tags/cc/"},{"name":"防攻击","slug":"防攻击","permalink":"https://plpcm.github.io/blog/tags/防攻击/"}]},{"title":"Git 的 .gitignore 配置","slug":"git-ignore","date":"2016-02-22T07:00:16.000Z","updated":"2016-11-30T09:56:11.000Z","comments":true,"path":"2016/02/22/git-ignore/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/02/22/git-ignore/","excerpt":"","text":".gitignore配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利，以下是个人对于配 置.gitignore 的一些心得。 1.配置语法： 以斜杠“ /”“开头表示目录； 以星号“ *”“通配多个字符； 以问号“ ?”“通配单个字符 以方括号“ []” 包含单个字符的匹配列表； 以叹号“ !”“表示不忽略(跟踪)匹配到的文件或目录； 此外，git 对于 .ignore配置文件是按行从上到下进行规则匹配的，意味着如果前面的规则匹配的范围更大，则后面的规则将不会生效； 2.示例： (1)规则：fd1/* 说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略； (2)规则：/fd1/* 说明：忽略根目录下的 /fd1/ 目录的全部内容； (3)规则： /* !.gitignore !/fw/bin/ !/fw/sf/ 说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；","categories":[{"name":"git","slug":"git","permalink":"https://plpcm.github.io/blog/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://plpcm.github.io/blog/tags/git/"}]},{"title":"Git远程操作详解","slug":"git-remote-server","date":"2016-02-21T02:45:33.000Z","updated":"2016-12-02T10:11:48.000Z","comments":true,"path":"2016/02/21/git-remote-server/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/02/21/git-remote-server/","excerpt":"","text":"Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能。Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。 git clone git remote git fetch git pull git push 本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。 ##一、git clone远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。 1$ git clone &lt;版本库的网址&gt; 比如，克隆jQuery的版本库。 1$ git clone https://github.com/jquery/jquery.git 该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。 1$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt; git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。 1234567$ git clone http[s]://example.com/path/to/repo.git/$ git clone ssh://example.com/path/to/repo.git/$ git clone git://example.com/path/to/repo.git/$ git clone /opt/git/project.git $ git clone file:///opt/git/project.git$ git clone ftp[s]://example.com/path/to/repo.git/$ git clone rsync://example.com/path/to/repo.git/ SSH协议还有另一种写法。 1$ git clone [user@]example.com:path/to/repo.git/ 通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考官方文档。 ##二、git remote为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。不带选项的时候，git remote命令列出所有远程主机。 12$ git remoteorigin 使用-v选项，可以参看远程主机的网址。 123$ git remote -vorigin git@github.com:jquery/jquery.git (fetch)origin git@github.com:jquery/jquery.git (push) 上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。 123$ git clone -o jQuery https://github.com/jquery/jquery.git$ git remotejQuery 上面命令表示，克隆的时候，指定远程主机叫做jQuery。git remote show命令加上主机名，可以查看该主机的详细信息。 1$ git remote show &lt;主机名&gt; git remote add命令用于添加远程主机。 1$ git remote add &lt;主机名&gt; &lt;网址&gt; git remote rm命令用于删除远程主机。 1$ git remote rm &lt;主机名&gt; git remote rename命令用于远程主机的改名。 1$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt; ##三、git fetch一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令。 1$ git fetch &lt;远程主机名&gt; 上面命令将某个远程主机的更新，全部取回本地。git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。 1$ git fetch &lt;远程主机名&gt; &lt;分支名&gt; 比如，取回origin主机的master分支。 1$ git fetch origin master 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。 123456$ git branch -rorigin/master$ git branch -a* master remotes/origin/master 上面命令表示，本地主机的当前分支是master，远程分支是origin/master。 取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。 1$ git checkout -b newBrach origin/master 上面命令表示，在origin/master的基础上，创建一个新分支。 此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。 123 $ git merge origin/master# 或者 $ git rebase origin/master 上面命令表示在当前分支上，合并origin/master。 ##四、git pull git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。 1$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。 1$ git pull origin next:master 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。 1$ git pull origin next 上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。 12$ git fetch origin$ git merge origin/next 在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。 Git也允许手动建立追踪关系。 1git branch --set-upstream master origin/next 上面命令指定master分支追踪origin/next分支。 如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。 1$ git pull origin 上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”（remote-tracking branch）进行合并。 如果当前分支只有一个追踪分支，连远程主机名都可以省略。 1$ git pull 上面命令表示，当前分支自动与唯一一个追踪分支进行合并。 如果合并需要采用rebase模式，可以使用--rebase选项。 1$ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。 但是，你可以改变这个行为，加上参数-p 就会在本地删除远程已经删除的分支。 1234 $ git pull -p# 等同于下面的命令 $ git fetch --prune origin $ git fetch -p ##五、git push git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。 1$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; 注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以git pull是&lt;远程分支&gt;:&lt;本地分支&gt;，而git push是&lt;本地分支&gt;:&lt;远程分支&gt;。 如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。 1$ git push origin master 上面命令表示，将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建。 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。 123 $ git push origin :master# 等同于 $ git push origin --delete master 上面命令表示删除origin主机的master分支。 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。 1$ git push origin 上面命令表示，将当前分支推送到origin主机的对应分支。 如果当前分支只有一个追踪分支，那么主机名都可以省略。 1$ git push 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。 1$ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。 不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。 123 $ git config --global push.default matching# 或者 $ git config --global push.default simple 还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。 1$ git push --all origin 上面命令表示，将所有本地分支都推送到origin主机。 如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。 1$ git push --force origin 上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。 最后，git push不会推送标签（tag），除非使用--tags选项。 1$ git push origin --tags","categories":[{"name":"git","slug":"git","permalink":"https://plpcm.github.io/blog/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://plpcm.github.io/blog/tags/git/"}]},{"title":"Macdown 编辑器","slug":"macdown-introduce","date":"2016-02-02T08:38:10.000Z","updated":"2016-11-30T07:50:28.000Z","comments":true,"path":"2016/02/02/macdown-introduce/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/02/02/macdown-introduce/","excerpt":"","text":"Hello there! I’m MacDown, the open source Markdown editor for OS X. Let me introduce myself. Markdown and IMarkdown is a plain text formatting syntax created by John Gruber, aiming to provide a easy-to-read and feasible markup. The original Markdown syntax specification can be found here. MacDown is created as a simple-to-use editor for Markdown documents. I render your Markdown contents real-time into HTML, and display them in a preview panel. I support all the original Markdown syntaxes. But I can do so much more! Various popular but non-standard syntaxes can be turned on/off from the Markdown preference pane. You can specify extra HTML rendering options through the Rendering preference pane. You can customize the editor window to you liking in the Editor preferences pane: You can configure various application (that’s me!) behaviors in the General preference pane. The BasicsBefore I tell you about all the extra syntaxes and capabilities I have, I’ll introduce you to the basics of standard markdown. If you already know markdown, and want to jump straight to learning about the fancier things I can do, I suggest you skip to the Markdown preference pane. Lets jump right in. Line BreaksTo force a line break, put two spaces and a newline (return) at the end of the line. This two-line bulletwon’t break This two-line bulletwill break Here is the code: 12345* This two-line bullet won&apos;t break* This two-line bullet will break Strong and EmphasizeStrong: **Strong** or __Strong__ (Command-B)Emphasize: *Emphasize* or _Emphasize_[^emphasize] (Command-I) Headers (like this one!)Header 1 ======== Header 2 -------- or # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6 Links and EmailInlineJust put angle brackets around an email and it becomes clickable: &#117;&#114;&#97;&#x6e;&#x75;&#x73;&#x6a;&#x72;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;&lt;uranusjr@gmail.com&gt; Same thing with urls: http://macdown.uranusjr.com&lt;http://macdown.uranusjr.com&gt; Perhaps you want to some link text like this: Macdown Website[Macdown Website](http://macdown.uranusjr.com &quot;Title&quot;) (The title is optional) Reference styleSometimes it looks too messy to include big long urls inline, or you want to keep all your urls together. Make a link [a link][arbitrary_id] then on it’s own line anywhere else in the file:[arbitrary_id]: http://macdown.uranusjr.com &quot;Title&quot; If the link text itself would make a good id, you can link like this [like this][], then on it’s own line anywhere else in the file:[like this]: http://macdown.uranusjr.com ImagesInline![Alt Image Text](path/or/url/to.jpg &quot;Optional Title&quot;) Reference style![Alt Image Text][image-id]on it’s own line elsewhere:[image-id]: path/or/url/to.jpg &quot;Optional Title&quot; Lists Lists must be preceded by a blank line (or block element) Unordered lists start each item with a * - works too Indent a level to make a nested list Ordered lists are supported. Start each item (number-period-space) like 1. It doesn’t matter what number you use, I will render them sequentially So you might want to start each line with 1. and let me sort it out Here is the code: 12345678* Lists must be preceded by a blank line (or block element)* Unordered lists start each item with a `*`- `-` works too * Indent a level to make a nested list 1. Ordered lists are supported. 2. Start each item (number-period-space) like `1. ` 42. It doesn&apos;t matter what number you use, I will render them sequentially 1. So you might want to start each line with `1.` and let me sort it out Block Quote Angle brackets &gt; are used for block quotes.Technically not every line needs to start with a &gt; as long asthere are no empty lines between paragraphs.Looks kinda ugly though. Block quotes can be nested. Multiple Levels Most markdown syntaxes work inside block quotes. Lists Links Etc. Here is the code: 123456789101112&gt; Angle brackets `&gt;` are used for block quotes. Technically not every line needs to start with a `&gt;` as long asthere are no empty lines between paragraphs. &gt; Looks kinda ugly though.&gt; &gt; Block quotes can be nested. &gt; &gt; &gt; Multiple Levels&gt;&gt; Most markdown syntaxes work inside block quotes.&gt;&gt; * Lists&gt; * [Links][arbitrary_id]&gt; * Etc. Inline CodeInline code is indicated by surrounding it with backticks:`Inline code` If your code has `backticks` that need to be displayed, you can use double backticks:``Code with `backticks` `` ```` (mind the spaces preceding the final set of backticks)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950### Block CodeIf you indent at least four spaces or one tab, I&apos;ll display a code block. print(&apos;This is a code block&apos;) print(&apos;The block must be preceded by a blank line&apos;) print(&apos;Then indent at least 4 spaces or 1 tab&apos;) print(&apos;Nesting does nothing. Your code is displayed Literally&apos;)I also know how to do something called [Fenced Code Blocks](#fenced-code-block) which I will tell you about later.### Horizontal RulesIf you type three asterisks `***` or three dashes `---` on a line, I&apos;ll display a horizontal rule:***## &lt;a name=&quot;markdown-pane&quot;&gt;&lt;/a&gt;The Markdown Preference PaneThis is where I keep all preferences related to how I parse markdown into html. ![Markdown preferences pane](http://d.pr/i/RQEi+)### Document FormattingThe ***Smartypants*** extension automatically transforms straight quotes (`&quot;` and `&apos;`) in your text into typographer’s quotes (`“`, `”`, `‘`, and `’`) according to the context. Very useful if you’re a typography freak like I am. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence.### Block Formatting#### TableThis is a table:First Header | Second Header------------- | -------------Content Cell | Content CellContent Cell | Content CellYou can align cell contents with syntax like this:| Left Aligned | Center Aligned | Right Aligned ||:------------- |:---------------:| -------------:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 |The left- and right-most pipes (`|`) are only aesthetic, and can be omitted. The spaces don’t matter, either. Alignment depends solely on `:` marks.#### &lt;a name=&quot;fenced-code-block&quot;&gt;Fenced Code Block&lt;/a&gt;This is a fenced code block: print(‘Hello world!’)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071You can also use waves (`~`) instead of back ticks (`` ` ``):~~~print(&apos;Hello world!&apos;)~~~You can add an optional language ID at the end of the first line. The language ID will only be used to highlight the code inside if you tick the ***Enable highlighting in code blocks*** option. This is what happens if you enable it:![Syntax highlighting example](http://d.pr/i/9HM6+)I support many popular languages as well as some generic syntax descriptions that can be used if your language of choice is not supported. See [relevant sections on the official site](http://macdown.uranusjr.com/features/) for a full list of supported syntaxes.### Inline FormattingThe following is a list of optional inline markups supported:Option name | Markup | Result if enabled |--------------------|------------------|-----------------------|Intra-word emphasis | So A\\*maz\\*ing | So A&lt;em&gt;maz&lt;/em&gt;ing |Strikethrough | \\~~Much wow\\~~ | &lt;del&gt;Much wow&lt;/del&gt; |Underline [^under] | \\_So doge\\_ | &lt;u&gt;So doge&lt;/u&gt; |Quote [^quote] | \\&quot;Such editor\\&quot; | &lt;q&gt;Such editor&lt;/q&gt; |Highlight | \\==So good\\== | &lt;mark&gt;So good&lt;/mark&gt; |Superscript | hoge\\^(fuga) | hoge&lt;sup&gt;fuga&lt;/sup&gt; |Autolink | http://t.co | &lt;http://t.co&gt; |Footnotes | [\\^4] and [\\^4]: | [^4] and footnote 4 |[^4]: You don&apos;t have to use a number. Arbitrary things like `[^footy note4]` and `[^footy note4]:` will also work. But they will *render* as numbered footnotes. Also, no need to keep your footnotes in order, I will sort out the order for you so they appear in the same order they were referenced in the text body. You can even keep some footnotes near where you referenced them, and collect others at the bottom of the file in the traditional place for footnotes. ## &lt;a name=&quot;rendering-pane&quot;&gt;&lt;/a&gt;The Rendering Preference PaneThis is where I keep preferences relating to how I render and style the parsed markdown in the preview window. ![Rendering preferences pane](http://d.pr/i/rT4d+)### CSSYou can choose different css files for me to use to render your html. You can even customize or add your own custom css files.### Syntax HighlightingYou have already seen how I can syntax highlight your fenced code blocks. See the [Fenced Code Block](#fenced-code-block) section if you haven’t! You can also choose different themes for syntax highlighting.### TeX-like Math SyntaxI can also render TeX-like math syntaxes, if you allow me to.[^math] I can do inline math like this: \\\\( 1 + 1 \\\\) or this (in MathML): &lt;math&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;, and block math:\\\\[ A^T_S = B\\\\]or (in MathML)&lt;math display=&quot;block&quot;&gt; &lt;msubsup&gt;&lt;mi&gt;A&lt;/mi&gt; &lt;mi&gt;S&lt;/mi&gt; &lt;mi&gt;T&lt;/mi&gt;&lt;/msubsup&gt; &lt;mo&gt;=&lt;/mo&gt; &lt;mi&gt;B&lt;/mi&gt;&lt;/math&gt;### Task List Syntax1. [x] I can render checkbox list syntax * [x] I support nesting * [x] I support ordered *and* unordered lists2. [ ] I don&apos;t support clicking checkboxes directly in the html window### Jekyll front-matterIf you like, I can display Jekyll front-matter in a nice table. Just make sure you put the front-matter at the very beginning of the file, and fence it with `---`. For example: title: “Macdown is my friend” date: 2014-06-06 20:00:00``` Render newline literallyNormally I require you to put two spaces and a newline (aka return) at the end of a line in order to create a line break. If you like, I can render a newline any time you end a line with a newline. However, if you enable this, markdown that looks lovely when I render it might look pretty funky when you let some other program render it. The General Preferences PaneThis is where I keep preferences related to application behavior. The General Preferences Pane allows you to tell me how you want me to behave. For example, do you want me to make sure there is a document open when I launch? You can also tell me if I should constantly update the preview window as you type, or wait for you to hit command-R instead. Maybe you prefer your editor window on the right? Or to see the word-count as you type. This is also the place to tell me if you are interested in pre-releases of me, or just want to stick to better-tested official releases. The Editor Preference PaneThis is where I keep preferences related to the behavior and styling of the editing window. StylingMy editor provides syntax highlighting. You can edit the base font and the coloring/sizing theme. I provided some default themes (courtesy of Mou’s creator, Chen Luo) if you don’t know where to start. You can also edit, or even add new themes if you want to! Just click the Reveal button, and start moving things around. Remember to use the correct file extension (.styles), though. I’m picky about that. I offer auto-completion and other functions to ease your editing experience. If you don’t like it, however, you can turn them off. Hack OnThat’s about it. Thanks for listening. I’ll be quiet from now on (unless there’s an update about the app—I’ll remind you for that!). Happy writing! [^emphasize]: If Underlines is turned on, _this notation_ will render as underlined instead of emphasized [^under]: If Underline is disabled _this_ will be rendered as emphasized instead of being underlined. [^quote]: Quote replaces literal &quot; characters with html &lt;q&gt; tags. Quote and Smartypants are syntactically incompatible. If both are enabled, Quote takes precedence. Note that Quote is different from blockquote, which is part of standard Markdown. [^math]: Internet connection required.","categories":[{"name":"mac","slug":"mac","permalink":"https://plpcm.github.io/blog/categories/mac/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://plpcm.github.io/blog/tags/markdown/"},{"name":"mac","slug":"mac","permalink":"https://plpcm.github.io/blog/tags/mac/"}]},{"title":"Mac 下两款 Markdown 编辑器 Mou/MacDown 大 PK","slug":"markdown-editor-Mou-MacDown-pk","date":"2016-02-02T07:30:16.000Z","updated":"2016-11-30T08:18:31.000Z","comments":true,"path":"2016/02/02/markdown-editor-Mou-MacDown-pk/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/02/02/markdown-editor-Mou-MacDown-pk/","excerpt":"","text":"转载自 http://www.jianshu.com/p/6c157af09e84 Mou 和 MacDown 是我在 Mac 下用过的两款优秀的 Markdown 编辑器。之前一直使用的是 Mou，但不知怎的最近 Mou 在保存时总有 4s 以上的卡顿，这让我很不爽，没找到有效的解决方法，于是我被迫去寻找其它的 MD 编辑器。我尝试过很多种，但总觉得没有 Mou 体验好，最终让我找到了 MacDown——OS X下开放源代码 Markdown 编辑器。 背后的故事很有兴趣关注了这两款软件的作者及背后的故事，发现很有趣，在评测两款软件之前我们先八一八故事吧。 Mou 的作者罗晨，个人主页：http://chenluois.com/，现居住天津，自由职业者。MacDown 的作者Tzu-ping Chung，个人主页：https://uranusjr.com/，现居住台北市，应该是台湾同胞吧。 根据 MacDown 作者的介绍，他曾经一度是 Markdown 的重度用户，而使用的编辑器基本是 Mou，但 Mou 可以处理fenced code blocks，却对代码高亮不支持，同时在渲染 Markdown 时也有 bug，这让他很苦恼。Mou 的作者当时正准备转手该软件，一直没有更新，所以，他就开始从头开始模仿 Mou 写一个，因为是 Markdown editor for Macs，所以取名为 MacDown。 MacDown 作者 Chung 在征得 Mou 作者 Luo 的同意使用了 Mou 的几款主题，发布了 MacDown 的原始版本。Luo 最后发现 MacDown 时，很气愤，并指责 Chung 是 copycat，意思是 MacDown 山寨了 Mou。Chung 也意识到确实是自己抄袭了 Mou 很多东西，根据某条推文的建议（并不是Luo发布的），将之前 github 中项目描述 改成了： MacDown is an open source Markdown editor for OS X, released under the MIT License. The author stole the idea from Chen Luo’s Mou so that people can make crappy clones. ^1 比较详细的情节可以参见 Chung 的博客。至于 MacDown 和 Mou 的关系是怎样的，是不是 MacDown 就是不道德地克隆了 Mou 呢？这个每个人都有自己的看法，这里就不讨论了。 欣喜的是，目前两款软件都找到自己的发展模式，Mou 已经完成了众筹，即将发布 1.0 版本，如果有对 Mou 有情怀的同学可以支持作者；MacDown 依旧会走自己开源的道路。 Chung 的一句话也道出了我的心声： Let’s focus on making better software for everyone. 好了，八卦完了，最后我要对两位作者表示由衷的谢意，贡献给我们好用的软件！下面我会根据我体验，分别提一下两款软件各自的特色地方。 共同功能 提供丰富的简洁大方好看的主题，同时支持自定义 提供丰富的渲染 Markdown 之后的 CSS 样式，同时支持自定义样式 英文单词的自动补全功能，按下 Esc 键列出补全的列表 字符、单词统计功能 支持 fenced code blocks TeX 数学公式的支持 支持导出 HTML 和 PDF 两种格式 便捷的快捷键操作 … Mou 特色功能集成 Tumblr 和 Scriptogr.am 发布博文可以配置 Tumblr 和 Scriptogr.am 的邮箱，在 Mou 上写文章通过 File-&gt;Post-&gt; 可以发布到这两个平台上，非常方便。 Mou 支持集成 Tumblr 和 Scriptor.am 语言支持Mou 内置 CJK 字符支持，你可以很容易使用中文、日文、韩文等来写文章，同时还支持竖排的风格。 Mou 支持 CJK 及竖排 MacDown 特色代码高亮Mou 和 MacDown 都支持 fenced code blocks（前后三个反引号可以表示代码块），但 MacDown 支持加语言标识符实现代码高亮，这对程序员来说简直是福音啊，非常棒的功能。 MacDown 支持代码高亮 GFM Task List 支持MacDown 支持 Task list，有了这个功能，你可以将你的 MD 编辑器立马变成 TODO list，是不是很赞？ MacDown 对 Task list 的支持 Jekyll Front-matter 支持很多人使用 Jekyll 作为博客引擎，这时 Jekyll 的前面那段该怎么去渲染呢？MacDown 和 github 一样可以支持。 MacDown 对 Jekyll front-matter 的支持 总结OK，总结完了，如果不是 Mou 在我的 Mac 上有卡顿，我也没想着要换一款编辑器，目前我在用 MacDown 感觉还是很不错的，因为有代码高亮支持就足以把我留下了。至于你选哪一款，你可以下载下来自己体验体验，反正软件都很小。也许你跟我一样，因为某个小瑕疵放弃某个软件，又因为某个小功能的惊喜而喜欢上某个软件。","categories":[{"name":"mac","slug":"mac","permalink":"https://plpcm.github.io/blog/categories/mac/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://plpcm.github.io/blog/tags/markdown/"},{"name":"mac","slug":"mac","permalink":"https://plpcm.github.io/blog/tags/mac/"}]},{"title":"Hexo搭建个人博客","slug":"hexo-init","date":"2016-01-31T16:00:00.000Z","updated":"2016-12-02T10:14:12.000Z","comments":true,"path":"2016/02/01/hexo-init/","link":"","permalink":"https://plpcm.github.io/blog/blog/2016/02/01/hexo-init/","excerpt":"","text":"安装Hexo 安装 1234mkdir hexo #创建一个文件夹cd hexonpm install -g hexo-clinpm install hexo --save 部署Hexo：在Git shell 中输入 1hexo init 安装Hexo 插件：自动生成sitemap,Rss，部署到git等，建议安装 12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save Hexo常用的几个命令创建新博文执行new命令，生成指定名称的文章至hexo\\source_posts\\postName.md。 1hexo new [layout] &quot;postName&quot; #新建文章 其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md 1234title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;tags:--- 请注意，大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。 我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下： 12345title: &#123; &#123; title &#125; &#125;date: &#123; &#123; date &#125; &#125;categories: tags: --- 更多信息参考: Writing 运行服务器1$ hexo server 参考: Server 生成静态站点文件1$ hexo generate 参考: Generating 部署到Git部署到Github前需要配置_config.yml文件 添加如下内容： 1234deploy: type: git repository: git@github.com:EZLippi/EZLippi.github.io.git branch: master 然后输入： 1$ hexo deploy 参考: Deployment fancybox可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片: 12345title: Hexo建立个人博客photos:- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg--- 主题设置本博客采用了iissnan的Next主题，他的博客有详细的安装教程，这里贴下链接next，有需要的朋友直接参考他写的教程，一气呵成~ 下载主题12$ cd hexo目录$ git clone https://github.com/iissnan/hexo-theme-next themes/next 应用Hexo主题在hexo目录下找到_config.yml配置文件，找到 theme 字段，并将其值更改为 next，如下所示： 1theme: next 设置RSS在上面的步骤中已经安装了Rss插件，只要要在themes\\next_config.yml配置文件中添加如下一行即可： 1rss： 添加标签tags页面定位到 Hexo 站点目录下，使用 hexo new page 新建一个页面，命名为 tags，布局格式为page： 12$ cd hexo目录$ hexo new page tags 内容如下所示，如果要关闭tags页面的评论可以设置comments为false： 12345title: 标签date: 2014-12-22 12:39:04type: &quot;tags&quot;comments: false--- 这样以后tags页面在每次执行hexo generate后自动更新。 添加分类页面和上面的一样，在hexo目录下执行下面命令： 1$ hexo new page categories 内容为： 12345title: 分类date: 2014-12-22 12:39:04type: &quot;categories&quot;comments: false--- 添加404页面新建一个404.html文件，放到themes\\next\\source目录下，内容你自己定。 代码高亮以前jekyll代码高亮需要用到pygments插件，Hexo下更加简单，只需要按照下面的格式：效果如下： 1System.out.println(&quot;hello hexo!&quot;); 你也可以更改代码高亮的主题，一共有五种，可选的值有 normal，night， night blue， night bright， night eighties，修改themes\\next_config.yml文件，如下所示： 1highlight_theme: normal 第三方服务多说评论登录多说官网，登录后点我要安装，然后填写站点相关信息，最主要的是duoshuo_shortname这个字段，设置后之后修改themes\\next_config.yml文件，把duoshuo_shortname改成你的，如下所示： 1duoshuo_shortname: ezlippi 百度统计登录百度统计，转到获取代码截面，找到百度统计脚本id，然后把themes\\next_config.yml文件下的baidu_analytics字段改成你的id，如下所示： 1baidu_analytics: 340874ba9357cbe81570aa4ac1185941 站内搜索next主题集成了swiftype搜索，你需要到swiftype配置一个搜索引擎， 而后编辑 站点配置文件， 新增 swiftype_key 字段，值为你的 swiftype 搜索引擎的 key。 详细的配置请参考：swfitype教程 其他设置其他设置比如侧边栏、友情链接、菜单栏等请参考next主题配置教程 最后附上我的站点配置文件，如果有不懂的可以给我留言或者发邮件。_config.yml配置文件内容如下： 站点配置文件： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273# Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Lippi-浮生志subtitle:description: Easy Lippiauthor: EZLippi language: zh-Hanstimezone: Asia/Shanghai# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://www.ezlippi.comroot: /permalink: /blog/:year/:month/:title.htmlpermalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :year-:month-:day-:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: next #since: 2014# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:EZLippi/EZLippi.github.io.git coding.net: git@git.coding.net:ezlippi/ezlippi.git,coding-pages 主题配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# Place your favicon.ico to /source directory.favicon: /favicon.ico# Set default keywords (Use a comma to separate)keywords: &quot;Hexo, NexT&quot;# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss:# Specify the date when the site was setupsince: 2014# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running hexo in a subdirectory (e.g. domain.tld/blog)# Remove leading slashes ( &quot;/archives&quot; -&gt; &quot;archives&quot; )menu: home: / categories: /categories archives: /archives tags: /tags about: /about# commonweal: /404.html# Enable/Disable menu icons.# Icon Mapping:# Map a menu item to a specific FontAwesome icon name.# Key is the name of menu item and value is the name of FontAwsome icon.# When an question mask icon presenting up means that the item has no mapping icon.menu_icons: enable: true # Icon Mapping. home: home about: user categories: th tags: tags archives: archive commonweal: heartbeat# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes#scheme: Musescheme: Mist#scheme: Pisces# ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# Social linkssocial: GitHub: https://github.com/EZLippi weibo: http://weibo.com/ouyanglip zhihu: http://www.zhihu.com/people/lippi-ouyang #Others: # Social Iconssocial_icons: enable: true # Icon Mappings GitHub: github Twitter: twitter weibo: weibo zhihu: weibo # Sidebar Avatar# in theme directory(source/images): /images/avatar.jpg# in site directory(source/uploads): /uploads/avatar.jpg# default : /images/default_avatar.jpgavatar: /images/avatar.jpg# TOC in the Sidebartoc: enable: true # Automatically add list number to toc. number: true# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero#creative_commons: by-nc-sa#creative_commons:sidebar: # Sidebar Position, available value: left | right position: left #position: right # Sidebar Display, available value: # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggle icon. display: post #display: always #display: hide #display: remove# ---------------------------------------------------------------# Misc Theme Settings# ---------------------------------------------------------------# Custom Logo.# !!Only available for Default Scheme currently.# Options:# enabled: [true/false] - Replace with specific image# image: url-of-image - Images&apos;s urlcustom_logo: enabled: false image:# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night # Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: true# Automatically Excerptauto_excerpt: enable: false length: 150# Use Lato fontuse_font_lato: true# ---------------------------------------------------------------# Third Party Services Settings# ---------------------------------------------------------------# MathJax Supportmathjax:# Swiftype Search API Keyswiftype_key: fLM9qfxyerC6njvM7usy# Baidu Analytics IDbaidu_analytics: 340874ba9357cbe81570aa4ac1185941# Duoshuo ShortNameduoshuo_shortname: ezlippi # Disqus#disqus_shortname:# Share#jiathis:#add_this_id:# Shareduoshuo_share: true# 多说热评文章 true 或者 falseduoshuo_hotartical: true# Google Webmaster tools verification setting# See: https://www.google.com/webmasters/#google_site_verification:# Google Analytics#google_analytics:# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: false user_id: 0 #admin_nickname: ROOT# Facebook SDK Support.# https://github.com/iissnan/hexo-theme-next/pull/410facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true# Show number of visitors to each article.# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: false app_id: #&lt;app_id&gt; app_key: #&lt;app_key&gt;# Tencent analytics ID# tencent_analytics:#! ---------------------------------------------------------------#! DO NOT EDIT THE FOLLOWING SETTINGS#! UNLESS YOU KNOW WHAT YOU ARE DOING#! ---------------------------------------------------------------# Motionuse_motion: true# Fancyboxfancybox: true# Static filesvendors: vendorscss: cssjs: jsimages: images# Theme versionversion: 0.5.0# title, chinese availablelinks_title: 友情链接 # # linkslinks: MacTalk: http://macshuo.com/ 参考文献： Hexo如何利用GitHub Pages和Hexo快速搭建个人博客Next主题","categories":[{"name":"hexo","slug":"hexo","permalink":"https://plpcm.github.io/blog/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://plpcm.github.io/blog/tags/hexo/"},{"name":"next","slug":"next","permalink":"https://plpcm.github.io/blog/tags/next/"}]},{"title":"Hello World","slug":"hello-world","date":"2015-12-22T11:08:10.000Z","updated":"2016-11-30T07:50:28.000Z","comments":true,"path":"2015/12/22/hello-world/","link":"","permalink":"https://plpcm.github.io/blog/blog/2015/12/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"hexo","slug":"hexo","permalink":"https://plpcm.github.io/blog/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://plpcm.github.io/blog/tags/hexo/"}]}]}